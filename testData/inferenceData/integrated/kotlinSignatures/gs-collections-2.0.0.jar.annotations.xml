<root>
    <item name='com.gs.collections.impl.Counter boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.Counter void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.Counter void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.EmptyIterator com.gs.collections.impl.EmptyIterator&lt;T&gt; getInstance()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getInstance() : EmptyIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableMap UnmodifiableMap(java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableMap(delegate : Map&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableRichIterable void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableRichIterable void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableRichIterable void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableRichIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.UnmodifiableRichIterable com.gs.collections.impl.UnmodifiableRichIterable&lt;E&gt; of(RI)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, RI : RichIterable&lt;E&gt;?&gt; of(iterable : RI) : UnmodifiableRichIterable&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.AbstractImmutableBag.ImmutableBagSerializationProxy void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.AbstractImmutableBag.ImmutableBagSerializationProxy void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag.ArrayBagIterator ArrayBagIterator(com.gs.collections.impl.bag.immutable.ImmutableArrayBag)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ArrayBagIterator()&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag.ArrayBagIterator ArrayBagIterator(com.gs.collections.impl.bag.immutable.ImmutableArrayBag, com.gs.collections.impl.bag.immutable.ImmutableArrayBag.1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ArrayBagIterator(x0 : ImmutableArrayBag, x1 : ImmutableArrayBag.1?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag java.lang.Object[] access$100(com.gs.collections.impl.bag.immutable.ImmutableArrayBag)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ImmutableArrayBag) : Array&lt;out Any?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag int[] access$200(com.gs.collections.impl.bag.immutable.ImmutableArrayBag)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : ImmutableArrayBag) : IntArray?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.Bag collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : ImmutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.Bag collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : ImmutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.impl.bag.immutable.ImmutableArrayBag&lt;T&gt; copyFrom(com.gs.collections.api.bag.Bag&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; copyFrom(bag : Bag&lt;T&gt;) : ImmutableArrayBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.ImmutableMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.bag.BagMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;?) : ImmutableBagMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.ImmutableMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.bag.BagMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableBagMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newArrayBagWith(T, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newArrayBagWith(element : T?, elementIndex : Int, distinctItemCount : Int) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.impl.bag.immutable.ImmutableArrayBag&lt;T&gt; newBagWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newBagWith(vararg elements : T?) : ImmutableArrayBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(elements : Iterable&lt;out T&gt;) : ImmutableBag&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(element : T?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(elements : Iterable&lt;out T&gt;?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(x0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.Bag reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.Bag select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.Bag selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : ImmutableBag&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.collection.ImmutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag com.gs.collections.api.map.MutableMap&lt;T,java.lang.Integer&gt; toMapOfItemToCount()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMapOfItemToCount() : MutableMap&lt;T, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableArrayBag java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; of(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(element : T?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg elements : T?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(element : T?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg elements : T?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableBagFactoryImpl com.gs.collections.api.bag.ImmutableBag&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.Bag collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : ImmutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.Bag collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : ImmutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(predicate : Predicate&lt;in T&gt;?, function : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.Bag flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.ImmutableMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.bag.BagMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;?) : ImmutableBagMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.ImmutableMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.bag.BagMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableBagMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag java.lang.String makeString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag java.lang.String makeString(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString(separator : String?) : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(elements : Iterable&lt;out T&gt;) : ImmutableBag&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(element : T?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(elements : Iterable&lt;out T&gt;?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(x0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.Bag reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.Bag select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.Bag selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : ImmutableBag&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.collection.ImmutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(a : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.map.MutableMap&lt;NK,NV&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toMap(keyFunction : Function&lt;in T, out NK&gt;?, valueFunction : Function&lt;in T, out NV&gt;?) : MutableMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.map.sorted.MutableSortedMap&lt;NK,NV&gt; toSortedMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toSortedMap(keyFunction : Function&lt;in T, out NK&gt;?, valueFunction : Function&lt;in T, out NV&gt;?) : MutableSortedMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.map.sorted.MutableSortedMap&lt;NK,NV&gt; toSortedMap(java.util.Comparator&lt;? super NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toSortedMap(comparator : Comparator&lt;in NK&gt;?, keyFunction : Function&lt;in T, out NK&gt;?, valueFunction : Function&lt;in T, out NV&gt;?) : MutableSortedMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in T, out V&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableEmptyBag java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag ImmutableHashBag(com.gs.collections.api.bag.Bag&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableHashBag(source : Bag&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag ImmutableHashBag(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableHashBag(source : Iterable&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable, p1 : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable, p1 : String?, p2 : String?, p3 : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(p0 : Function&lt;in T, out V&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(p0 : Function2&lt;in T, in P, out V&gt;?, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg p0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(p0 : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.impl.bag.immutable.ImmutableHashBag&lt;T&gt; newBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newBag() : ImmutableHashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.impl.bag.immutable.ImmutableHashBag&lt;T&gt; newBag(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newBag(source : Iterable&lt;out T&gt;) : ImmutableHashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.impl.bag.immutable.ImmutableHashBag&lt;T&gt; newBagWith(com.gs.collections.api.bag.Bag&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newBagWith(bag : Bag&lt;out T&gt;) : ImmutableHashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.impl.bag.immutable.ImmutableHashBag&lt;T&gt; newBagWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newBagWith(vararg elements : T?) : ImmutableHashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(elements : Iterable&lt;out T&gt;) : ImmutableBag&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(p0 : Predicate&lt;in T&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(p0 : Predicate2&lt;in T, in P&gt;?, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(p0 : Array&lt;out T&gt;) : Array&lt;out T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableHashBag R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag java.lang.Object access$100(com.gs.collections.impl.bag.immutable.ImmutableSingletonBag)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ImmutableSingletonBag) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(predicate : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(predicate : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.Bag collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function) : Bag?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;) : ImmutableBag&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate, x1 : Function?) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.Bag collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate, x1 : Function?) : Bag?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(predicate : Predicate&lt;in T&gt;, function : Function&lt;in T, out V&gt;?) : ImmutableBag&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate, x1 : Function?) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(predicate : Predicate&lt;in T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(predicate : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(predicate : Predicate&lt;in T&gt;, function : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; emptyIfMatchesOrThis(com.gs.collections.api.block.predicate.Predicate&lt;java.lang.Object&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun emptyIfMatchesOrThis(predicate : Predicate&lt;Any?&gt;) : ImmutableBag&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.Bag flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function) : Bag?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;) : ImmutableBag&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, target : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag void forEachWithOccurrences(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithOccurrences(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.ImmutableMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.bag.BagMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function) : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;) : ImmutableBagMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(function : Function&lt;in T, out V&gt;, target : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.ImmutableMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.bag.BagMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableBagMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(injectedValue : IV?, function : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(elements : Iterable&lt;out T&gt;) : ImmutableBag&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.Bag select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate) : Bag?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;) : ImmutableBag&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(predicate : Predicate&lt;in T&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.Bag selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class) : Bag?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;) : ImmutableBag&lt;S&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(predicate : Predicate2&lt;in T, in P&gt;, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.map.MutableMap&lt;T,java.lang.Integer&gt; toMapOfItemToCount()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMapOfItemToCount() : MutableMap&lt;T, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.Bag zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : Bag?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.bag.ImmutableBag&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : ImmutableBag&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.immutable.ImmutableSingletonBag com.gs.collections.api.collection.ImmutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.11 void value(T, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?, count : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.12 void value(T, com.gs.collections.impl.Counter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(item : T?, count : Counter) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.12 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.13 void value(com.gs.collections.impl.Counter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : Counter) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.13 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.14 void safeValue(T, com.gs.collections.impl.Counter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(object : T?, parameter : Counter) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.14 void safeValue(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.1 com.gs.collections.impl.Counter value()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value() : Counter&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.1 java.lang.Object value()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.3 void value(T, com.gs.collections.impl.Counter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : T?, value : Counter) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.3 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.4 void value(T, com.gs.collections.impl.Counter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : T?, value : Counter) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.4 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.5 void value(T, com.gs.collections.impl.Counter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : T?, value : Counter) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.5 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.NCopiesFunction java.util.List&lt;T&gt; valueOf(com.gs.collections.api.tuple.Pair&lt;T,com.gs.collections.impl.Counter&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(each : Pair&lt;T, Counter?&gt;) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag.NCopiesFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableBag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.SynchronizedBag&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : SynchronizedBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableBag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.UnmodifiableBag&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : UnmodifiableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.Bag collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : MutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;E&gt; newBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newBag() : HashBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;E&gt; newBag(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newBag(size : Int) : HashBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;E&gt; newBag(com.gs.collections.api.bag.Bag&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newBag(source : Bag&lt;out E&gt;) : HashBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;E&gt; newBag(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newBag(source : Iterable&lt;out E&gt;) : HashBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;E&gt; newBagWith(E...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newBagWith(vararg elements : E?) : HashBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.partition.PartitionIterable partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.partition.PartitionMutableCollection partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionMutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.partition.bag.PartitionBag partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionBag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.partition.bag.PartitionMutableBag&lt;T&gt; partition(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(predicate : Predicate&lt;in T&gt;?) : PartitionMutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.Bag reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.Bag select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.Bag selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableBag&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.list.MutableList&lt;T&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.map.MutableMap&lt;T,java.lang.Integer&gt; toMapOfItemToCount()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMapOfItemToCount() : MutableMap&lt;T, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableBag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : HashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : HashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : HashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T?) : HashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableBag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.impl.bag.mutable.HashBag&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(iterable : Iterable&lt;out T&gt;?) : HashBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;) : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.HashBag void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.MutableBagFactoryImpl com.gs.collections.api.bag.MutableBag&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.MutableBagFactoryImpl com.gs.collections.api.bag.MutableBag&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg elements : T?) : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag SynchronizedBag(com.gs.collections.api.bag.MutableBag&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedBag(bag : MutableBag&lt;E&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag SynchronizedBag(com.gs.collections.api.bag.MutableBag&lt;E&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedBag(bag : MutableBag&lt;E&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.bag.MutableBag&lt;E&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.bag.MutableBag&lt;E&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.impl.bag.mutable.SynchronizedBag&lt;E&gt; of(B)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, B : MutableBag&lt;E&gt;?&gt; of(bag : B) : SynchronizedBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.bag.MutableBag&lt;E&gt; with(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : E?) : MutableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.bag.MutableBag&lt;E&gt; withAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out E&gt;?) : MutableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.bag.MutableBag&lt;E&gt; without(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : E?) : MutableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.bag.MutableBag&lt;E&gt; withoutAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out E&gt;?) : MutableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;E, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.SynchronizedBag R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;E, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag UnmodifiableBag(com.gs.collections.api.bag.MutableBag&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableBag(mutableBag : MutableBag&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.api.bag.MutableBag&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.api.bag.MutableBag&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.impl.bag.mutable.UnmodifiableBag&lt;E&gt; of(B)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, B : MutableBag&lt;E&gt;?&gt; of(bag : B) : UnmodifiableBag&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.bag.mutable.UnmodifiableBag com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.AscendingCollectionSizeComparator int compare(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(x0 : Any, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.AscendingCollectionSizeComparator int compare(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(c1 : Collection&lt;*&gt;, c2 : Collection&lt;*&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.ByFirstOfPairComparator int compare(com.gs.collections.api.tuple.Pair&lt;T,?&gt;, com.gs.collections.api.tuple.Pair&lt;T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(p1 : Pair&lt;T, *&gt;, p2 : Pair&lt;T, *&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.ByFirstOfPairComparator int compare(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(x0 : Any, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.BySecondOfPairComparator int compare(com.gs.collections.api.tuple.Pair&lt;?,T&gt;, com.gs.collections.api.tuple.Pair&lt;?,T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(p1 : Pair&lt;*, T&gt;, p2 : Pair&lt;*, T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.BySecondOfPairComparator int compare(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(x0 : Any, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.DescendingCollectionSizeComparator int compare(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(x0 : Any, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.DescendingCollectionSizeComparator int compare(java.util.Collection&lt;?&gt;, java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(c1 : Collection&lt;*&gt;, c2 : Collection&lt;*&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.NaturalOrderComparator int compare(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(o1 : T, o2 : T) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.NaturalOrderComparator int compare(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(x0 : Any, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.PowerSetComparator int compare(com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;, com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(setA : SortedSetIterable&lt;T&gt;, setB : SortedSetIterable&lt;T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.PowerSetComparator int compare(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(x0 : Any, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.SafeNullsHighComparator int compare(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(value1 : T?, value2 : T?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators.SafeNullsLowComparator int compare(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compare(value1 : T?, value2 : T?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;java.util.Collection&lt;?&gt;&gt; ascendingCollectionSizeComparator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ascendingCollectionSizeComparator() : SerializableComparator&lt;Collection&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;com.gs.collections.api.tuple.Pair&lt;T,?&gt;&gt; byFirstOfPair(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; byFirstOfPair(comparator : Comparator&lt;in T&gt;?) : SerializableComparator&lt;Pair&lt;T, *&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; byFunction(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; byFunction(function : Function&lt;in T, out V&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; byFunction(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, java.util.Comparator&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; byFunction(function : Function&lt;in T, out V&gt;?, comparator : Comparator&lt;V&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;com.gs.collections.api.tuple.Pair&lt;?,T&gt;&gt; bySecondOfPair(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; bySecondOfPair(comparator : Comparator&lt;in T&gt;?) : SerializableComparator&lt;Pair&lt;*, T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; chain(java.util.Comparator&lt;T&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chain(vararg comparators : Comparator&lt;T&gt;) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;java.util.Collection&lt;?&gt;&gt; descendingCollectionSizeComparator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun descendingCollectionSizeComparator() : SerializableComparator&lt;Collection&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; fromFunctions(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; fromFunctions(one : Function&lt;in T, out V&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; fromFunctions(com.gs.collections.api.block.function.Function&lt;? super T,? extends V1&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V1 : Comparable&lt;in V1&gt;?, V2 : Comparable&lt;in V2&gt;?&gt; fromFunctions(one : Function&lt;in T, out V1&gt;?, two : Function&lt;in T, out V2&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; fromFunctions(com.gs.collections.api.block.function.Function&lt;? super T,? extends V1&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V2&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V3&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V1 : Comparable&lt;in V1&gt;?, V2 : Comparable&lt;in V2&gt;?, V3 : Comparable&lt;in V3&gt;?&gt; fromFunctions(one : Function&lt;in T, out V1&gt;?, two : Function&lt;in T, out V2&gt;?, three : Function&lt;in T, out V3&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; naturalOrder()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; naturalOrder() : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators int nullSafeCompare(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;T&gt;?&gt; nullSafeCompare(value1 : T?, value2 : T?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators boolean nullSafeEquals(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nullSafeEquals(value1 : Any?, value2 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;&gt; powerSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; powerSet() : SerializableComparator&lt;SortedSetIterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; reverse(java.util.Comparator&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reverse(comparator : Comparator&lt;T&gt;) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; reverseNaturalOrder()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reverseNaturalOrder() : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; safeNullsHigh(java.util.Comparator&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; safeNullsHigh(notNullSafeComparator : Comparator&lt;T&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Comparators com.gs.collections.api.block.SerializableComparator&lt;T&gt; safeNullsLow(java.util.Comparator&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; safeNullsLow(notNullSafeComparator : Comparator&lt;T&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.4 com.gs.collections.api.tuple.Pair&lt;V1,V2&gt; valueOf(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(t : T?) : Pair&lt;V1, V2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.4 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.ClassFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.ClassFunction java.lang.Class&lt;?&gt; valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(anObject : Any) : Class&lt;*&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.ClassFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.DoublePassThruFunction double doubleValueOf(java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(each : Double) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.DoublePassThruFunction double doubleValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(x0 : Any) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstNotEmptyCollectionFunction I valueOf(T1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : T1?) : I?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstNotEmptyCollectionFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstNotEmptyStringFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstNotEmptyStringFunction java.lang.String valueOf(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : T?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstNotNullFunction V valueOf(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : T?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstOfPairFunction T valueOf(com.gs.collections.api.tuple.Pair&lt;T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(pair : Pair&lt;T, *&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FirstOfPairFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.FunctionChain com.gs.collections.impl.block.factory.Functions.FunctionChain&lt;T1,T3,T4&gt; chain(com.gs.collections.api.block.function.Function&lt;? super T3,T4&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T4&gt; chain(function : Function&lt;in T3, T4&gt;?) : Functions.FunctionChain&lt;T1, T3, T4&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.IntegerPassThruFunction int intValueOf(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(each : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.IntegerPassThruFunction int intValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.LongPassThruFunction long longValueOf(java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(each : Long) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.LongPassThruFunction long longValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(x0 : Any) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MapKeyFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MapKeyFunction K valueOf(java.util.Map.Entry&lt;K,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(entry : Map.Entry&lt;K, *&gt;) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MapValueFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MapValueFunction V valueOf(java.util.Map.Entry&lt;?,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(entry : Map.Entry&lt;*, V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MathSinFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MathSinFunction java.lang.Double valueOf(java.lang.Number)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(number : Number) : Double?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.MathSinFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SecondOfPairFunction T valueOf(com.gs.collections.api.tuple.Pair&lt;?,T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(pair : Pair&lt;*, T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SecondOfPairFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SizeFunction int intValueOf(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(iterable : Iterable&lt;*&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SizeFunction int intValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SquaredIntegerFunction java.lang.Integer valueOf(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(value : Int) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SquaredIntegerFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.StringToIntegerFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.StringTrimFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.StringTrimFunction java.lang.String valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(s : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.SynchronizedFunction V valueOf(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(each : T) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions.ToStringFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions0 com.gs.collections.api.block.function.Function0&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; newFastList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newFastList() : Function0&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions0 com.gs.collections.api.block.function.Function0&lt;com.gs.collections.api.bag.MutableBag&lt;T&gt;&gt; newHashBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newHashBag() : Function0&lt;MutableBag&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions0 com.gs.collections.api.block.function.Function0&lt;com.gs.collections.api.map.MutableMap&lt;K,V&gt;&gt; newUnifiedMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newUnifiedMap() : Function0&lt;MutableMap&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions0 com.gs.collections.api.block.function.Function0&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; newUnifiedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newUnifiedSet() : Function0&lt;MutableSet&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions0 com.gs.collections.api.block.function.Function0&lt;T&gt; value(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; value(t : T?) : Function0&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions2 com.gs.collections.api.block.function.Function2&lt;T,P,V&gt; fromFunction(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, P&gt; fromFunction(function : Function&lt;in T, out V&gt;?) : Function2&lt;T, P, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;T1&gt; bind(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T2&gt;, com.gs.collections.api.block.function.Function&lt;? super T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; bind(delegate : ObjectIntProcedure&lt;in T2&gt;?, function : Function&lt;in T1, T2&gt;?) : ObjectIntProcedure&lt;T1&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.procedure.Procedure2&lt;T1,T3&gt; bind(com.gs.collections.api.block.procedure.Procedure2&lt;? super T2,T3&gt;, com.gs.collections.api.block.function.Function&lt;? super T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2, T3&gt; bind(delegate : Procedure2&lt;in T2, T3&gt;?, function : Function&lt;in T1, T2&gt;?) : Procedure2&lt;T1, T3&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.procedure.Procedure&lt;T1&gt; bind(com.gs.collections.api.block.procedure.Procedure&lt;? super T2&gt;, com.gs.collections.api.block.function.Function&lt;? super T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; bind(delegate : Procedure&lt;in T2&gt;?, function : Function&lt;in T1, T2&gt;?) : Procedure&lt;T1&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.impl.block.function.CaseFunction&lt;T,V&gt; caseDefault(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?, V&gt; caseDefault(defaultFunction : Function&lt;in T, out V&gt;?) : CaseFunction&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.impl.block.function.CaseFunction&lt;T,V&gt; caseDefault(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?, V&gt; caseDefault(defaultFunction : Function&lt;in T, out V&gt;?, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : CaseFunction&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.impl.block.factory.Functions.FunctionChain&lt;T1,T2,T3&gt; chain(com.gs.collections.api.block.function.Function&lt;T1,T2&gt;, com.gs.collections.api.block.function.Function&lt;? super T2,T3&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2, T3&gt; chain(function1 : Function&lt;T1, T2&gt;?, function2 : Function&lt;in T2, T3&gt;?) : Functions.FunctionChain&lt;T1, T2, T3&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.Class&lt;?&gt;&gt; classForName()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun classForName() : Function&lt;String?, Class&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T1,I&gt; firstNotEmptyCollectionValue(com.gs.collections.api.block.function.Function&lt;T1,I&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2, I : Iterable&lt;T2&gt;?&gt; firstNotEmptyCollectionValue(vararg functions : Function&lt;T1, I&gt;?) : Function&lt;T1, I&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,java.lang.String&gt; firstNotEmptyStringValue(com.gs.collections.api.block.function.Function&lt;T,java.lang.String&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; firstNotEmptyStringValue(vararg functions : Function&lt;T, String?&gt;?) : Function&lt;T, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,V&gt; firstNotNullValue(com.gs.collections.api.block.function.Function&lt;T,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; firstNotNullValue(vararg functions : Function&lt;T, V&gt;?) : Function&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;com.gs.collections.api.tuple.Pair&lt;V1,?&gt;,V1&gt; firstOfPair()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V1&gt; firstOfPair() : Function&lt;Pair&lt;V1, *&gt;?, V1&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Double,java.lang.Double&gt; getDoublePassThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDoublePassThru() : Function&lt;Double?, Double?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,V&gt; getFixedValue(V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; getFixedValue(value : V?) : Function&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Integer,java.lang.Integer&gt; getIntegerPassThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIntegerPassThru() : Function&lt;Int?, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.util.Map.Entry&lt;K,?&gt;,K&gt; getKeyFunction()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; getKeyFunction() : Function&lt;Map.Entry&lt;K, *&gt;?, K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Long,java.lang.Long&gt; getLongPassThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLongPassThru() : Function&lt;Long?, Long?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Number,java.lang.Double&gt; getMathSinFunction()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getMathSinFunction() : Function&lt;Number?, Double?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Number,java.lang.Number&gt; getNumberPassThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getNumberPassThru() : Function&lt;Number?, Number?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,T&gt; getPassThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getPassThru() : Function&lt;T, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Iterable&lt;?&gt;,java.lang.Integer&gt; getSizeOf()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSizeOf() : Function&lt;Iterable&lt;*&gt;?, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.String&gt; getStringPassThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getStringPassThru() : Function&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.Integer&gt; getStringToInteger()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getStringToInteger() : Function&lt;String?, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.String&gt; getStringTrim()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getStringTrim() : Function&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Object,java.lang.Class&lt;?&gt;&gt; getToClass()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getToClass() : Function&lt;Any?, Class&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Object,java.lang.String&gt; getToString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getToString() : Function&lt;Any?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.util.Map.Entry&lt;?,V&gt;,V&gt; getValueFunction()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; getValueFunction() : Function&lt;Map.Entry&lt;*, V&gt;?, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,V&gt; ifElse(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; ifElse(predicate : Predicate&lt;in T&gt;?, trueFunction : Function&lt;in T, out V&gt;?, falseFunction : Function&lt;in T, out V&gt;?) : Function&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,V&gt; ifTrue(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; ifTrue(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : Function&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,com.gs.collections.api.tuple.Pair&lt;V1,V2&gt;&gt; pair(com.gs.collections.api.block.function.Function&lt;T,V1&gt;, com.gs.collections.api.block.function.Function&lt;T,V2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V1, V2&gt; pair(function1 : Function&lt;T, V1&gt;?, function2 : Function&lt;T, V2&gt;?) : Function&lt;T, Pair&lt;V1, V2&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;com.gs.collections.api.tuple.Pair&lt;?,V2&gt;,V2&gt; secondOfPair()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V2&gt; secondOfPair() : Function&lt;Pair&lt;*, V2&gt;?, V2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;java.lang.Integer,java.lang.Integer&gt; squaredInteger()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun squaredInteger() : Function&lt;Int?, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,V&gt; synchronizedEach(com.gs.collections.api.block.function.Function&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; synchronizedEach(function : Function&lt;T, V&gt;?) : Function&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.SerializableComparator&lt;T&gt; toDoubleComparator(com.gs.collections.api.block.function.primitive.DoubleFunction&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toDoubleComparator(function : DoubleFunction&lt;T&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.SerializableComparator&lt;T&gt; toIntComparator(com.gs.collections.api.block.function.primitive.IntFunction&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toIntComparator(function : IntFunction&lt;T&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.SerializableComparator&lt;T&gt; toLongComparator(com.gs.collections.api.block.function.primitive.LongFunction&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toLongComparator(function : LongFunction&lt;T&gt;?) : SerializableComparator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Functions com.gs.collections.api.block.function.Function&lt;T,V&gt; withDefault(com.gs.collections.api.block.function.Function&lt;T,V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; withDefault(function : Function&lt;T, V&gt;?, defaultValue : V?) : Function&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies.1 int computeHashCode(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun computeHashCode(object : T?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies.1 boolean equals(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object1 : T?, object2 : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies.DefaultStrategy int computeHashCode(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun computeHashCode(object : T) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies.DefaultStrategy boolean equals(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object1 : T, object2 : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies com.gs.collections.api.block.HashingStrategy&lt;T&gt; defaultStrategy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; defaultStrategy() : HashingStrategy&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies com.gs.collections.api.block.HashingStrategy&lt;T&gt; fromFunction(com.gs.collections.api.block.function.Function&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; fromFunction(function : Function&lt;T, V&gt;?) : HashingStrategy&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.HashingStrategies com.gs.collections.api.block.HashingStrategy&lt;T&gt; nullSafeHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; nullSafeHashingStrategy(nonNullSafeStrategy : HashingStrategy&lt;T&gt;?) : HashingStrategy&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsEven boolean accept(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(i : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsEven boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsNegative boolean accept(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(i : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsNegative boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsOdd boolean accept(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(i : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsOdd boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsPositive boolean accept(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(i : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsPositive boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsZero boolean accept(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(i : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates.IntegerIsZero boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsEven(com.gs.collections.api.block.function.Function&lt;T,java.lang.Integer&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsEven(function : Function&lt;T, Int?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsNegative(com.gs.collections.api.block.function.Function&lt;T,java.lang.Integer&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsNegative(function : Function&lt;T, Int?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsOdd(com.gs.collections.api.block.function.Function&lt;T,java.lang.Integer&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsOdd(function : Function&lt;T, Int?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsPositive(com.gs.collections.api.block.function.Function&lt;T,java.lang.Integer&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsPositive(function : Function&lt;T, Int?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsZero(com.gs.collections.api.block.function.Function&lt;T,java.lang.Integer&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsZero(function : Function&lt;T, Int?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Integer&gt; isEven()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEven() : Predicates&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Integer&gt; isNegative()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isNegative() : Predicates&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Integer&gt; isOdd()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isOdd() : Predicates&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Integer&gt; isPositive()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isPositive() : Predicates&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.IntegerPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Integer&gt; isZero()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isZero() : Predicates&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsEven boolean accept(java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(l : Long) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsEven boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsNegative boolean accept(java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(l : Long) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsNegative boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsOdd boolean accept(java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(l : Long) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsOdd boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsPositive boolean accept(java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(l : Long) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsPositive boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsZero boolean accept(java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(l : Long) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates.LongIsZero boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsEven(com.gs.collections.api.block.function.Function&lt;T,java.lang.Long&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsEven(function : Function&lt;T, Long?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsNegative(com.gs.collections.api.block.function.Function&lt;T,java.lang.Long&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsNegative(function : Function&lt;T, Long?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsOdd(com.gs.collections.api.block.function.Function&lt;T,java.lang.Long&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsOdd(function : Function&lt;T, Long?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsPositive(com.gs.collections.api.block.function.Function&lt;T,java.lang.Long&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsPositive(function : Function&lt;T, Long?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsZero(com.gs.collections.api.block.function.Function&lt;T,java.lang.Long&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsZero(function : Function&lt;T, Long?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Long&gt; isEven()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEven() : Predicates&lt;Long?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Long&gt; isNegative()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isNegative() : Predicates&lt;Long?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Long&gt; isOdd()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isOdd() : Predicates&lt;Long?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Long&gt; isPositive()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isPositive() : Predicates&lt;Long?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.LongPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Long&gt; isZero()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isZero() : Predicates&lt;Long?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.ObjectIntProcedures com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;T&gt; fromProcedure(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; fromProcedure(procedure : Procedure&lt;in T&gt;?) : ObjectIntProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AbstractIterablePredicate java.lang.String getTypeName()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getTypeName() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AllSatisfy boolean accept(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(iterable : Iterable&lt;T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AllSatisfy boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AlwaysFalse java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AlwaysTrue java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AndIterablePredicate.1 boolean accept(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(aPredicate : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AndIterablePredicate.1 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AndIterablePredicate java.lang.String getTypeName()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getTypeName() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AnySatisfy boolean accept(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(iterable : Iterable&lt;T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AnySatisfy boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.AssignableFromPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenExclusive boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenExclusive boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenInclusive boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenInclusive boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenInclusiveFrom boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenInclusiveFrom boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenInclusiveTo boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.BetweenInclusiveTo boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.GreaterThanOrEqualPredicate boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.GreaterThanOrEqualPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.GreaterThanPredicate boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.GreaterThanPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.IsNull boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.IsNull java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.LessThanOrEqualPredicate boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.LessThanOrEqualPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.LessThanPredicate boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(o : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.LessThanPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.NoneOfIterablePredicate.1 boolean accept(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(aPredicate : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.NoneOfIterablePredicate.1 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.NoneOfIterablePredicate java.lang.String getTypeName()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getTypeName() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.NotNull boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.NotNull java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.OrIterablePredicate.1 boolean accept(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(aPredicate : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.OrIterablePredicate.1 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.OrIterablePredicate java.lang.String getTypeName()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getTypeName() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.SuperclassPredicate boolean accept(java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Class&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.SuperclassPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates.SynchronizedPredicate boolean accept(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : T) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.AlwaysFalse java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.AlwaysTrue java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.Equal boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, compareTo : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.Equal java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.GreaterThan boolean accept(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : T, comparison : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.GreaterThan boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any, x1 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.GreaterThan java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.GreaterThanOrEqual boolean accept(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : T, comparison : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.GreaterThanOrEqual boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any, x1 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.GreaterThanOrEqual java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.In boolean accept(java.lang.Object, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, injectedIterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.In boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any?, x1 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.In java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.IsIdentical java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.IsInstanceOf boolean accept(java.lang.Object, java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, injectedClass : Class&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.IsInstanceOf boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any?, x1 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.IsInstanceOf java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.IsNull boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, notImportant : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.IsNull java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.LessThan boolean accept(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : T, comparison : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.LessThan boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any, x1 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.LessThan java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.LessThanOrEqual boolean accept(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : T, comparison : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.LessThanOrEqual boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any, x1 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.LessThanOrEqual java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotEqual boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, compareTo : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotEqual java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotIdentitical java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotIn boolean accept(java.lang.Object, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, injectedIterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotIn boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any?, x1 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotIn java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotInstanceOf boolean accept(java.lang.Object, java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, injectedClass : Class&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotInstanceOf boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any?, x1 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotInstanceOf java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotNull boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Any?, notImportant : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2.NotNull java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; alwaysFalse()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun alwaysFalse() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; alwaysTrue()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun alwaysTrue() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; and(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun and(op : Predicate2&lt;in T, in P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; and(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; and(left : Predicate2&lt;in T, in P&gt;?, right : Predicate2&lt;in T, in P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,java.lang.Object&gt; attributeEqual(com.gs.collections.api.block.function.Function&lt;T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeEqual(function : Function&lt;T, *&gt;?) : Predicates2&lt;T, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; attributeGreaterThan(com.gs.collections.api.block.function.Function&lt;T,P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P : Comparable&lt;in P&gt;?&gt; attributeGreaterThan(function : Function&lt;T, P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; attributeGreaterThanOrEqualTo(com.gs.collections.api.block.function.Function&lt;T,P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P : Comparable&lt;in P&gt;?&gt; attributeGreaterThanOrEqualTo(function : Function&lt;T, P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,java.lang.Iterable&lt;?&gt;&gt; attributeIn(com.gs.collections.api.block.function.Function&lt;T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIn(function : Function&lt;T, *&gt;?) : Predicates2&lt;T, Iterable&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; attributeLessThan(com.gs.collections.api.block.function.Function&lt;T,P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P : Comparable&lt;in P&gt;?&gt; attributeLessThan(function : Function&lt;T, P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; attributeLessThanOrEqualTo(com.gs.collections.api.block.function.Function&lt;T,P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P : Comparable&lt;in P&gt;?&gt; attributeLessThanOrEqualTo(function : Function&lt;T, P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,java.lang.Object&gt; attributeNotEqual(com.gs.collections.api.block.function.Function&lt;T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeNotEqual(function : Function&lt;T, *&gt;?) : Predicates2&lt;T, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,java.lang.Iterable&lt;?&gt;&gt; attributeNotIn(com.gs.collections.api.block.function.Function&lt;T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeNotIn(function : Function&lt;T, *&gt;?) : Predicates2&lt;T, Iterable&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; equal()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,T&gt; greaterThan()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;T&gt;?&gt; greaterThan() : Predicates2&lt;T, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,T&gt; greaterThanOrEqualTo()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;T&gt;?&gt; greaterThanOrEqualTo() : Predicates2&lt;T, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Iterable&lt;?&gt;&gt; in()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun in() : Predicates2&lt;Any?, Iterable&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Class&lt;?&gt;&gt; instanceOf()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun instanceOf() : Predicates2&lt;Any?, Class&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; isNull()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isNull() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,T&gt; lessThan()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;T&gt;?&gt; lessThan() : Predicates2&lt;T, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,T&gt; lessThanOrEqualTo()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;T&gt;?&gt; lessThanOrEqualTo() : Predicates2&lt;T, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; not(com.gs.collections.api.block.predicate.Predicate2&lt;T,P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; not(predicate : Predicate2&lt;T, P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; notEqual()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notEqual() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Iterable&lt;?&gt;&gt; notIn()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notIn() : Predicates2&lt;Any?, Iterable&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Class&lt;?&gt;&gt; notInstanceOf()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notInstanceOf() : Predicates2&lt;Any?, Class&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; notNull()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notNull() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; notSameAs()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notSameAs() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; or(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun or(op : Predicate2&lt;in T, in P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;T,P&gt; or(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; or(left : Predicate2&lt;in T, in P&gt;?, right : Predicate2&lt;in T, in P&gt;?) : Predicates2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates2 com.gs.collections.impl.block.factory.Predicates2&lt;java.lang.Object,java.lang.Object&gt; sameAs()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sameAs() : Predicates2&lt;Any?, Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; adapt(com.gs.collections.api.block.predicate.Predicate&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; adapt(predicate : Predicate&lt;T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Iterable&lt;T&gt;&gt; allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(predicate : Predicate&lt;in T&gt;?) : Predicates&lt;Iterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; alwaysFalse()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun alwaysFalse() : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; alwaysTrue()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun alwaysTrue() : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; and(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun and(op : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; and(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; and(predicate1 : Predicate&lt;in T&gt;?, predicate2 : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; and(java.lang.Iterable&lt;? extends com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; and(predicates : Iterable&lt;out Predicate&lt;in T&gt;?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; and(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; and(vararg predicates : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Iterable&lt;T&gt;&gt; anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(predicate : Predicate&lt;in T&gt;?) : Predicates&lt;Iterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; assignableFrom(java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun assignableFrom(clazz : Class&lt;*&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeAllSatisfy(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; attributeAllSatisfy(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, predicate : Predicate&lt;in V&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeAnySatisfy(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; attributeAnySatisfy(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, predicate : Predicate&lt;in V&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeBetweenExclusive(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeBetweenExclusive(function : Function&lt;in T, out V&gt;?, from : V, to : V) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeBetweenInclusive(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeBetweenInclusive(function : Function&lt;in T, out V&gt;?, from : V, to : V) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeBetweenInclusiveFrom(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeBetweenInclusiveFrom(function : Function&lt;in T, out V&gt;?, from : V, to : V) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeBetweenInclusiveTo(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeBetweenInclusiveTo(function : Function&lt;in T, out V&gt;?, from : V, to : V) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeEqual(com.gs.collections.api.block.function.Function&lt;? super T,?&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeEqual(function : Function&lt;in T, *&gt;?, object : Any?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeGreaterThan(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeGreaterThan(function : Function&lt;in T, out V&gt;?, object : V?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeGreaterThanOrEqualTo(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeGreaterThanOrEqualTo(function : Function&lt;in T, out V&gt;?, object : V?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIn(com.gs.collections.api.block.function.Function&lt;? super T,?&gt;, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIn(function : Function&lt;in T, *&gt;?, iterable : Iterable&lt;*&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeIsNull(com.gs.collections.api.block.function.Function&lt;? super T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeIsNull(function : Function&lt;in T, *&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeLessThan(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeLessThan(function : Function&lt;in T, out V&gt;?, object : V?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeLessThanOrEqualTo(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;in V&gt;?&gt; attributeLessThanOrEqualTo(function : Function&lt;in T, out V&gt;?, object : V?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeNotEqual(com.gs.collections.api.block.function.Function&lt;? super T,?&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeNotEqual(function : Function&lt;in T, *&gt;?, object : Any?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeNotIn(com.gs.collections.api.block.function.Function&lt;? super T,?&gt;, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeNotIn(function : Function&lt;in T, *&gt;?, iterable : Iterable&lt;*&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributeNotNull(com.gs.collections.api.block.function.Function&lt;? super T,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; attributeNotNull(function : Function&lt;in T, *&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; attributePredicate(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; attributePredicate(function : Function&lt;in T, out V&gt;?, predicate : Predicate&lt;in V&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; betweenExclusive(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; betweenExclusive(from : T, to : T) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; betweenInclusive(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; betweenInclusive(from : T, to : T) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; betweenInclusiveFrom(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; betweenInclusiveFrom(from : T, to : T) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; betweenInclusiveTo(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; betweenInclusiveTo(from : T, to : T) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; equal(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(object : Any?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates void failIfDifferentTypes(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun failIfDifferentTypes(from : Any, to : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; greaterThan(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; greaterThan(object : T?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; greaterThanOrEqualTo(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; greaterThanOrEqualTo(object : T?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; ifFalse(com.gs.collections.api.block.function.Function&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ifFalse(function : Function&lt;in T, Boolean?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; ifTrue(com.gs.collections.api.block.function.Function&lt;? super T,java.lang.Boolean&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ifTrue(function : Function&lt;in T, Boolean?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; in(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun in(iterable : Iterable&lt;*&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; in(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun in(array : Array&lt;out Any?&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; instanceOf(java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun instanceOf(clazz : Class&lt;*&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; isNull()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isNull() : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; lessThan(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; lessThan(object : T?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; lessThanOrEqualTo(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; lessThanOrEqualTo(object : T?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; neither(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; neither(operation1 : Predicate&lt;in T&gt;?, operation2 : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; noneOf(java.lang.Iterable&lt;? extends com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; noneOf(operations : Iterable&lt;out Predicate&lt;in T&gt;?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; noneOf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; noneOf(vararg operations : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Iterable&lt;T&gt;&gt; noneSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; noneSatisfy(predicate : Predicate&lt;in T&gt;?) : Predicates&lt;Iterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; not()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun not() : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; not(com.gs.collections.api.block.predicate.Predicate&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; not(predicate : Predicate&lt;T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; notEqual(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notEqual(object : Any?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; notIn(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notIn(iterable : Iterable&lt;*&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; notIn(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notIn(array : Array&lt;out Any?&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; notInstanceOf(java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notInstanceOf(clazz : Class&lt;*&gt;?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; notNull()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notNull() : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; notSameAs(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notSameAs(object : Any?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; or(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun or(op : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; or(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; or(predicate1 : Predicate&lt;in T&gt;?, predicate2 : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; or(java.lang.Iterable&lt;? extends com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; or(predicates : Iterable&lt;out Predicate&lt;in T&gt;?&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;T&gt; or(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; or(vararg predicates : Predicate&lt;in T&gt;?) : Predicates&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Object&gt; sameAs(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sameAs(object : Any?) : Predicates&lt;Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Class&lt;?&gt;&gt; subClass(java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subClass(aClass : Class&lt;*&gt;?) : Predicates&lt;Class&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.Class&lt;?&gt;&gt; superClass(java.lang.Class&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun superClass(aClass : Class&lt;*&gt;?) : Predicates&lt;Class&lt;*&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Predicates com.gs.collections.api.block.predicate.Predicate&lt;T&gt; synchronizedEach(com.gs.collections.api.block.predicate.Predicate&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; synchronizedEach(predicate : Predicate&lt;T&gt;?) : Predicate&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxDoubleToDouble double doubleValueOf(java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(aDouble : Double) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxDoubleToDouble double doubleValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(x0 : Any) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxFloatToFloat float floatValueOf(java.lang.Float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(aFloat : Float) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxFloatToFloat float floatValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(x0 : Any) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToDouble double doubleValueOf(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(integer : Int) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToDouble double doubleValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(x0 : Any) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToFloat float floatValueOf(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(integer : Int) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToFloat float floatValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(x0 : Any) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToInt int intValueOf(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(integer : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToInt int intValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToLong long longValueOf(java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(integer : Int) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxIntegerToLong long longValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(x0 : Any) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToDouble double doubleValueOf(java.lang.Number)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(number : Number) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToDouble double doubleValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(x0 : Any) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToFloat float floatValueOf(java.lang.Number)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(number : Number) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToFloat float floatValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(x0 : Any) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToInt int intValueOf(java.lang.Number)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(number : Number) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToInt int intValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToLong long longValueOf(java.lang.Number)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(number : Number) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions.UnboxNumberToLong long longValueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(x0 : Any) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.DoubleFunction&lt;java.lang.Double&gt; unboxDoubleToDouble()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxDoubleToDouble() : DoubleFunction&lt;Double?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.FloatFunction&lt;java.lang.Float&gt; unboxFloatToFloat()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxFloatToFloat() : FloatFunction&lt;Float?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.DoubleFunction&lt;java.lang.Integer&gt; unboxIntegerToDouble()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxIntegerToDouble() : DoubleFunction&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.FloatFunction&lt;java.lang.Integer&gt; unboxIntegerToFloat()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxIntegerToFloat() : FloatFunction&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.IntFunction&lt;java.lang.Integer&gt; unboxIntegerToInt()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxIntegerToInt() : IntFunction&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.LongFunction&lt;java.lang.Integer&gt; unboxIntegerToLong()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxIntegerToLong() : LongFunction&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.DoubleFunction&lt;java.lang.Number&gt; unboxNumberToDouble()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxNumberToDouble() : DoubleFunction&lt;Number?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.FloatFunction&lt;java.lang.Number&gt; unboxNumberToFloat()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxNumberToFloat() : FloatFunction&lt;Number?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.IntFunction&lt;java.lang.Number&gt; unboxNumberToInt()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxNumberToInt() : IntFunction&lt;Number?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.PrimitiveFunctions com.gs.collections.api.block.function.primitive.LongFunction&lt;java.lang.Number&gt; unboxNumberToLong()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unboxNumberToLong() : LongFunction&lt;Number?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures.SynchronizedProcedure void value(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures2.AddToCollection void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures2.AddToCollection void value(T, java.util.Collection&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?, target : MutableCollection&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures2 com.gs.collections.api.block.procedure.Procedure2&lt;T,java.util.Collection&lt;T&gt;&gt; addToCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; addToCollection() : Procedure2&lt;T, Collection&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures2 com.gs.collections.api.block.procedure.Procedure2&lt;T,P&gt; fromProcedure(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; fromProcedure(procedure : Procedure&lt;in T&gt;?) : Procedure2&lt;T, P&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; append(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; append(appendable : Appendable?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; bind(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; bind(procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.impl.block.procedure.CaseProcedure&lt;T&gt; caseDefault(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; caseDefault(defaultProcedure : Procedure&lt;in T&gt;?) : CaseProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.impl.block.procedure.CaseProcedure&lt;T&gt; caseDefault(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; caseDefault(defaultProcedure : Procedure&lt;in T&gt;?, predicate : Predicate&lt;in T&gt;?, procedure : Procedure&lt;in T&gt;?) : CaseProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; fromObjectIntProcedure(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; fromObjectIntProcedure(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; fromProcedureWithInt(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; fromProcedureWithInt(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; ifElse(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ifElse(predicate : Predicate&lt;in T&gt;?, trueProcedure : Procedure&lt;in T&gt;?, falseProcedure : Procedure&lt;in T&gt;?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; ifTrue(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ifTrue(predicate : Predicate&lt;in T&gt;?, block : Procedure&lt;in T&gt;?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; println(java.io.PrintStream)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; println(stream : PrintStream?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.Procedures com.gs.collections.api.block.procedure.Procedure&lt;T&gt; synchronizedEach(com.gs.collections.api.block.procedure.Procedure&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; synchronizedEach(procedure : Procedure&lt;T&gt;?) : Procedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.FirstLetterFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.FirstLetterFunction java.lang.Character valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : String?) : Character?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.LengthFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.LengthFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.LengthFunction java.lang.Integer valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(string : String) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.SubStringFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.SubStringFunction java.lang.String valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(string : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.ToLowerCaseFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.ToLowerCaseFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.ToLowerCaseFunction java.lang.String valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.ToUpperCaseFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.ToUpperCaseFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.ToUpperCaseFunction java.lang.String valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.TrimFunction java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.TrimFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions.TrimFunction java.lang.String valueOf(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(string : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.Character&gt; firstLetter()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun firstLetter() : Function&lt;String?, Character?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.Integer&gt; length()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun length() : Function&lt;String?, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.String&gt; subString(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subString(beginIndex : Int, endIndex : Int) : Function&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.Integer&gt; toInteger()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toInteger() : Function&lt;String?, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.String&gt; toLowerCase()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toLowerCase() : Function&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.String&gt; toUpperCase()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toUpperCase() : Function&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringFunctions com.gs.collections.api.block.function.Function&lt;java.lang.String,java.lang.String&gt; trim()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun trim() : Function&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.Empty boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.Empty java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.EndsWith boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.EqualsIgnoreCase boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.GreaterThan boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.GreaterThanOrEqualTo boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasDigits boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasDigits boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasDigits java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLetters boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLetters boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLetters java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLettersAndDigits boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLettersAndDigits boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(string : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLettersAndDigits java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLettersOrDigits boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLettersOrDigits boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLettersOrDigits java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLowercase boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLowercase boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasLowercase java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasSpaces boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasSpaces boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasSpaces java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasUndefined boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasUndefined boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasUndefined java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasUppercase boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasUppercase boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.HasUppercase java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsAlpha boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsAlpha java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsAlphanumeric boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsAlphanumeric boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsAlphanumeric java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsBlank java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsNumeric boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsNumeric boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.IsNumeric java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.LessThan boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.LessThanOrEqualTo boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.MatchesRegex boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.NotBlank java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.NotEmpty boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.NotEmpty java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.Size boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates.StartsWith boolean accept(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(anObject : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; contains(char)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(character : Char) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; contains(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(otherString : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; empty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun empty() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; endsWith(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun endsWith(substring : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; equalsIgnoreCase(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equalsIgnoreCase(otherString : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; greaterThan(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun greaterThan(string : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; greaterThanOrEqualTo(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun greaterThanOrEqualTo(string : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasDigits()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasDigits() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasLetters()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasLetters() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasLettersAndDigits()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasLettersAndDigits() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasLettersOrDigits()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasLettersOrDigits() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasLowerCase()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasLowerCase() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasSpaces()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasSpaces() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasUndefined()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasUndefined() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; hasUpperCase()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hasUpperCase() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; isAlpha()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isAlpha() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; isAlphanumeric()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isAlphanumeric() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; isBlank()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isBlank() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; isNumeric()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isNumeric() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; lessThan(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lessThan(string : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; lessThanOrEqualTo(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lessThanOrEqualTo(string : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; matches(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun matches(regex : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; notBlank()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notBlank() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; notEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notEmpty() : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; size(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun size(size : Int) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.StringPredicates com.gs.collections.impl.block.factory.Predicates&lt;java.lang.String&gt; startsWith(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun startsWith(substring : String?) : Predicates&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.DoublePredicates com.gs.collections.api.block.predicate.primitive.DoublePredicate equal(double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(expected : Double) : DoublePredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.DoublePredicates com.gs.collections.api.block.predicate.primitive.DoublePredicate equal(double, double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(expected : Double, delta : Double) : DoublePredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.DoublePredicates com.gs.collections.api.block.predicate.primitive.DoublePredicate greaterThan(double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun greaterThan(expected : Double) : DoublePredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.DoublePredicates com.gs.collections.api.block.predicate.primitive.DoublePredicate lessThan(double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lessThan(expected : Double) : DoublePredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.FloatPredicates com.gs.collections.api.block.predicate.primitive.FloatPredicate equal(float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(expected : Float) : FloatPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.FloatPredicates com.gs.collections.api.block.predicate.primitive.FloatPredicate equal(float, float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(expected : Float, delta : Float) : FloatPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.FloatPredicates com.gs.collections.api.block.predicate.primitive.FloatPredicate greaterThan(float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun greaterThan(expected : Float) : FloatPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.FloatPredicates com.gs.collections.api.block.predicate.primitive.FloatPredicate lessThan(float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lessThan(expected : Float) : FloatPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.IntPredicates com.gs.collections.api.block.predicate.primitive.IntPredicate equal(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(expected : Int) : IntPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.IntPredicates com.gs.collections.api.block.predicate.primitive.IntPredicate greaterThan(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun greaterThan(expected : Int) : IntPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.IntPredicates com.gs.collections.api.block.predicate.primitive.IntPredicate lessThan(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lessThan(expected : Int) : IntPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.LongPredicates com.gs.collections.api.block.predicate.primitive.LongPredicate equal(long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equal(expected : Long) : LongPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.LongPredicates com.gs.collections.api.block.predicate.primitive.LongPredicate greaterThan(long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun greaterThan(expected : Long) : LongPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.factory.primitive.LongPredicates com.gs.collections.api.block.predicate.primitive.LongPredicate lessThan(long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lessThan(expected : Long) : LongPredicate&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddCollectionFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddCollectionFunction java.util.Collection&lt;T&gt; value(java.util.Collection&lt;T&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(collection : MutableCollection&lt;T&gt;, addElement : T?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddDoubleFunction java.lang.Double value(java.lang.Double, java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Double, argument2 : Double) : Double?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddDoubleFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddDoubleToDoubleFunction double doubleValueOf(double, java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(doubleParameter : Double, objectParameter : Double) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddDoubleToDoubleFunction double doubleValueOf(double, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(x0 : Double, x1 : Any) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddFloatFunction java.lang.Float value(java.lang.Float, java.lang.Float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Float, argument2 : Float) : Float?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddFloatFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerFunction java.lang.Integer value(java.lang.Integer, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Int, argument2 : Int) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToDoubleFunction double doubleValueOf(double, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(doubleParameter : Double, objectParameter : Int) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToDoubleFunction double doubleValueOf(double, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleValueOf(x0 : Double, x1 : Any) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToFloatFunction float floatValueOf(float, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(floatParameter : Float, objectParameter : Int) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToFloatFunction float floatValueOf(float, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatValueOf(x0 : Float, x1 : Any) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToIntFunction int intValueOf(int, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(intParameter : Int, objectParameter : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToIntFunction int intValueOf(int, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intValueOf(x0 : Int, x1 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToLongFunction long longValueOf(long, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(longParameter : Long, objectParameter : Int) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddIntegerToLongFunction long longValueOf(long, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longValueOf(x0 : Long, x1 : Any) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddLongFunction java.lang.Long value(java.lang.Long, java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Long, argument2 : Long) : Long?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddLongFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddStringFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.AddFunction.AddStringFunction java.lang.String value(java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : String?, argument2 : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.CaseFunction com.gs.collections.impl.block.function.CaseFunction&lt;T,V&gt; addCase(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addCase(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : CaseFunction&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.CaseFunction com.gs.collections.impl.block.function.CaseFunction&lt;T,V&gt; setDefault(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun setDefault(function : Function&lt;in T, out V&gt;?) : CaseFunction&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.CaseFunction V valueOf(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(argument : T?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.CaseFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.IfFunction V valueOf(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : T?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxFunction.MaxDoubleFunction java.lang.Double value(java.lang.Double, java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Double?, argument2 : Double?) : Double?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxFunction.MaxDoubleFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxFunction.MaxIntegerFunction java.lang.Integer value(java.lang.Integer, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Int?, argument2 : Int?) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxFunction.MaxIntegerFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxFunction.MaxLongFunction java.lang.Long value(java.lang.Long, java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Long?, argument2 : Long?) : Long?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxFunction.MaxLongFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxSizeFunction.MaxSizeCollectionFunction java.lang.Integer value(java.lang.Integer, java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(previousMax : Int, collection : Collection&lt;*&gt;) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxSizeFunction.MaxSizeCollectionFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxSizeFunction.MaxSizeMapFunction java.lang.Integer value(java.lang.Integer, java.util.Map&lt;?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(previousMax : Int, map : Map&lt;*, *&gt;) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxSizeFunction.MaxSizeMapFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxSizeFunction.MaxSizeStringFunction java.lang.Integer value(java.lang.Integer, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(previousMax : Int, s : String) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MaxSizeFunction.MaxSizeStringFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinFunction.MinDoubleFunction java.lang.Double value(java.lang.Double, java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Double?, argument2 : Double?) : Double?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinFunction.MinDoubleFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinFunction.MinIntegerFunction java.lang.Integer value(java.lang.Integer, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Int?, argument2 : Int?) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinFunction.MinIntegerFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinFunction.MinLongFunction java.lang.Long value(java.lang.Long, java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Long?, argument2 : Long?) : Long?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinFunction.MinLongFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinSizeFunction.MinSizeCollectionFunction java.lang.Integer value(java.lang.Integer, java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(previousMin : Int, collection : Collection&lt;*&gt;) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinSizeFunction.MinSizeCollectionFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinSizeFunction.MinSizeMapFunction java.lang.Integer value(java.lang.Integer, java.util.Map&lt;?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(previousMin : Int, map : Map&lt;*, *&gt;) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinSizeFunction.MinSizeMapFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinSizeFunction.MinSizeStringFunction java.lang.Integer value(java.lang.Integer, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(previousMin : Int, s : String) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MinSizeFunction.MinSizeStringFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MultiplyFunction.MultiplyDoubleFunction java.lang.Double value(java.lang.Double, java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Double, argument2 : Double) : Double?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MultiplyFunction.MultiplyDoubleFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MultiplyFunction.MultiplyIntegerFunction java.lang.Integer value(java.lang.Integer, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Int, argument2 : Int) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MultiplyFunction.MultiplyIntegerFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MultiplyFunction.MultiplyLongFunction java.lang.Long value(java.lang.Long, java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Long, argument2 : Long) : Long?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.MultiplyFunction.MultiplyLongFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.SubtractFunction.SubtractDoubleFunction java.lang.Double value(java.lang.Double, java.lang.Double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Double, argument2 : Double) : Double?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.SubtractFunction.SubtractDoubleFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.SubtractFunction.SubtractIntegerFunction java.lang.Integer value(java.lang.Integer, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Int, argument2 : Int) : Int?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.SubtractFunction.SubtractIntegerFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.SubtractFunction.SubtractLongFunction java.lang.Long value(java.lang.Long, java.lang.Long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argument1 : Long, argument2 : Long) : Long?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.function.SubtractFunction.SubtractLongFunction java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.predicate.MapEntryPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.predicate.MapEntryPredicate boolean accept(java.util.Map.Entry&lt;T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(entry : Map.Entry&lt;T1, T2&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.predicate.PairPredicate boolean accept(com.gs.collections.api.tuple.Pair&lt;T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(pair : Pair&lt;T1, T2&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.predicate.PairPredicate boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.CaseProcedure com.gs.collections.impl.block.procedure.CaseProcedure&lt;T&gt; addCase(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addCase(predicate : Predicate&lt;in T&gt;?, procedure : Procedure&lt;in T&gt;?) : CaseProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.CaseProcedure com.gs.collections.impl.block.procedure.CaseProcedure&lt;T&gt; setDefault(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun setDefault(procedure : Procedure&lt;in T&gt;?) : CaseProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.ChainedProcedure com.gs.collections.impl.block.procedure.ChainedProcedure&lt;E&gt; with(com.gs.collections.api.block.procedure.Procedure&lt;? super E&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; with(procedure1 : Procedure&lt;in E&gt;?, procedure2 : Procedure&lt;in E&gt;?) : ChainedProcedure&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.CollectionAddProcedure com.gs.collections.impl.block.procedure.CollectionAddProcedure&lt;T&gt; on(java.util.Collection&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; on(newCollection : Collection&lt;T&gt;?) : CollectionAddProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.CollectionAddProcedure java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.CollectionRemoveProcedure com.gs.collections.impl.block.procedure.CollectionRemoveProcedure&lt;T&gt; on(java.util.Collection&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; on(newCollection : Collection&lt;T&gt;?) : CollectionRemoveProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.CollectionRemoveProcedure java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.MapEntryToProcedure2 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.MapEntryToProcedure2 void value(java.util.Map.Entry&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(entry : Map.Entry&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.MultimapEachPutProcedure com.gs.collections.api.multimap.MutableMultimap access$000(com.gs.collections.impl.block.procedure.MultimapEachPutProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : MultimapEachPutProcedure) : MutableMultimap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.MultimapEachPutProcedure com.gs.collections.impl.block.procedure.MultimapEachPutProcedure&lt;K,V&gt; on(com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends java.lang.Iterable&lt;K&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; on(multimap : MutableMultimap&lt;K, V&gt;?, keyFunction : Function&lt;in V, out Iterable&lt;K&gt;?&gt;?) : MultimapEachPutProcedure&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.MultimapPutProcedure com.gs.collections.impl.block.procedure.MultimapPutProcedure&lt;K,V&gt; on(com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; on(multimap : MutableMultimap&lt;K, V&gt;?, keyFunction : Function&lt;in V, out K&gt;?) : MultimapPutProcedure&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.ZipWithIndexProcedure com.gs.collections.impl.block.procedure.ZipWithIndexProcedure&lt;TT,RR&gt; create(RR)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;TT, RR : Collection&lt;Pair&lt;TT, Int?&gt;?&gt;?&gt; create(target : RR?) : ZipWithIndexProcedure&lt;TT, RR&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.checked.CheckedProcedure2 void safeValue(T, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(p0 : T?, p1 : P) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.checked.MultimapKeyValuesSerializingProcedure java.io.ObjectOutput access$000(com.gs.collections.impl.block.procedure.checked.MultimapKeyValuesSerializingProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : MultimapKeyValuesSerializingProcedure) : ObjectOutput?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.checked.MultimapKeyValuesSerializingProcedure void safeValue(K, com.gs.collections.api.RichIterable&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(key : K?, iterable : RichIterable&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.block.procedure.checked.MultimapKeyValuesSerializingProcedure void safeValue(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(p0 : Function&lt;in T, out V&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection java.lang.String makeString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection java.lang.String makeString(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString(p0 : String?) : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; newMutable(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newMutable(p0 : Int) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(p0 : Predicate&lt;in T&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection void removeAllFrom(java.lang.Iterable&lt;? extends T&gt;, com.gs.collections.api.collection.MutableCollection&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllFrom(elements : Iterable&lt;out T&gt;, result : MutableCollection&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection E[] toArray(E[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; toArray(array : Array&lt;out E&gt;) : Array&lt;out E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.bag.MutableBag&lt;T&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.map.MutableMap&lt;K,V&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; toMap(keyFunction : Function&lt;in T, out K&gt;?, valueFunction : Function&lt;in T, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in T, out V&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(that : Iterable&lt;S&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.immutable.AbstractImmutableCollection R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean addAll(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(collection : Collection&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(iterable : Iterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;V&gt; collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?) : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, A, R : Collection&lt;A&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter T detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter java.util.Collection&lt;T&gt; getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.partition.PartitionIterable partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(p0 : Predicate?) : PartitionIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.partition.PartitionMutableCollection&lt;T&gt; partition(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(p0 : Predicate&lt;in T&gt;?) : PartitionMutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;T&gt; rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableCollection&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;T&gt; selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.bag.MutableBag&lt;T&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.map.MutableMap&lt;K,V&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; toMap(keyFunction : Function&lt;in T, out K&gt;?, valueFunction : Function&lt;in T, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in T, out V&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;E&gt; wrap(java.util.Collection&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; wrap(collection : Collection&lt;E&gt;?) : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableCollection&lt;Pair&lt;T, S&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(that : Iterable&lt;S&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.RichIterable zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : MutableCollection&lt;Pair&lt;T, Int?&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractCollectionAdapter R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMultiReaderMutableCollection void withReadLockRun(java.lang.Runnable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withReadLockRun(block : Runnable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(iterable : Iterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.collection.MutableCollection&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(p0 : Function&lt;in T, out V&gt;?) : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection T detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectAndRejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.bag.MutableBag&lt;T&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.list.MutableList&lt;T&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.map.MutableMap&lt;K,V&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; toMap(keyFunction : Function&lt;in T, out K&gt;?, valueFunction : Function&lt;in T, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.list.MutableList&lt;T&gt; toSortedList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.list.MutableList&lt;T&gt; toSortedList(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList(p0 : Comparator&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in T, out V&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(that : Iterable&lt;S&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.AbstractMutableCollection R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;E&gt; adapt(java.util.Collection&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; adapt(collection : Collection&lt;E&gt;?) : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.impl.collection.mutable.CollectionAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : CollectionAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.impl.collection.mutable.CollectionAdapter&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : CollectionAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.impl.collection.mutable.CollectionAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;) : CollectionAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.impl.collection.mutable.CollectionAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : CollectionAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.impl.collection.mutable.CollectionAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;) : CollectionAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.list.MutableList&lt;E&gt; wrapList(java.lang.Iterable&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; wrapList(iterable : Iterable&lt;E&gt;) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.CollectionAdapter com.gs.collections.api.set.MutableSet&lt;E&gt; wrapSet(java.lang.Iterable&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; wrapSet(iterable : Iterable&lt;E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection SynchronizedMutableCollection(com.gs.collections.api.collection.MutableCollection&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableCollection(newCollection : MutableCollection&lt;E&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection SynchronizedMutableCollection(com.gs.collections.api.collection.MutableCollection&lt;E&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableCollection(newCollection : MutableCollection&lt;E&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.LazyIterable&lt;E&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; getCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getCollection() : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection java.lang.Object getLock()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLock() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection&lt;E&gt; of(C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, C : Collection&lt;E&gt;?&gt; of(collection : C?) : SynchronizedMutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection&lt;E&gt; of(C, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, C : Collection&lt;E&gt;?&gt; of(collection : C?, lock : Any?) : SynchronizedMutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; toSortedSet(java.util.Comparator&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in E&gt;?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in E, out V&gt;?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; with(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : E?) : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; withAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out E&gt;?) : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; without(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : E?) : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;E&gt; withoutAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out E&gt;?) : MutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection com.gs.collections.api.collection.MutableCollection&lt;com.gs.collections.api.tuple.Pair&lt;E,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : MutableCollection&lt;Pair&lt;E, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;E, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.SynchronizedMutableCollection R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;E, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection UnmodifiableMutableCollection(com.gs.collections.api.collection.MutableCollection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableMutableCollection(mutableCollection : MutableCollection&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.api.collection.MutableCollection&lt;T&gt; getMutableCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getMutableCollection() : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection&lt;E&gt; of(C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, C : Collection&lt;E&gt;?&gt; of(collection : C) : UnmodifiableMutableCollection&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection com.gs.collections.api.collection.MutableCollection&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : MutableCollection&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.collection.mutable.UnmodifiableMutableCollection R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.2 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.2 boolean accept(java.util.Set&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(set : Set&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.3 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.3 void value(java.util.Set&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argumentSet : Set&lt;out E&gt;?, targetSet : R) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.4 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.4 void value(java.util.Set&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argumentSet : Set&lt;out E&gt;?, targetSet : R) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.5 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.5 void value(java.util.Set&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(argumentSet : Set&lt;out E&gt;?, targetSet : R) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.6.1 com.gs.collections.api.set.MutableSet&lt;T&gt; valueOf(com.gs.collections.api.set.MutableSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(innerSet : MutableSet&lt;T&gt;) : MutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.6.1 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.6 com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; value(com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(accumulator : MutableSet&lt;MutableSet&lt;T&gt;?&gt;, element : T?) : MutableSet&lt;MutableSet&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.6 java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.7.1 com.gs.collections.api.tuple.Pair&lt;A,B&gt; valueOf(B)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(second : B?) : Pair&lt;A, B&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.7.1 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.7 com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;A,B&gt;&gt; valueOf(A)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(first : A?) : LazyIterable&lt;Pair&lt;A, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets.7 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.block.procedure.Procedure2&lt;java.util.Set&lt;? extends E&gt;,R&gt; addAllProcedure()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; addAllProcedure() : Procedure2&lt;Set&lt;out E&gt;?, R&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;A,B&gt;&gt; cartesianProduct(java.util.Set&lt;A&gt;, java.util.Set&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A, B&gt; cartesianProduct(set1 : Set&lt;A&gt;?, set2 : Set&lt;B&gt;?) : LazyIterable&lt;Pair&lt;A, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; difference(java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; difference(minuendSet : Set&lt;out E&gt;?, subtrahendSet : Set&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; differenceAll(java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; differenceAll(vararg sets : Set&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R differenceAllInto(R, java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; differenceAllInto(targetSet : R, vararg sets : Set&lt;out E&gt;) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R differenceInto(R, java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; differenceInto(targetSet : R, minuendSet : Set&lt;out E&gt;?, subtrahendSet : Set&lt;out E&gt;?) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets java.util.Comparator&lt;? super E&gt; extractComparator(java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; extractComparator(vararg sets : Set&lt;out E&gt;) : Comparator&lt;in E&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R fillSet(R, com.gs.collections.api.block.procedure.Procedure2&lt;java.util.Set&lt;? extends E&gt;,R&gt;, java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; fillSet(targetSet : R, procedure : Procedure2&lt;Set&lt;out E&gt;?, R&gt;?, vararg sets : Set&lt;out E&gt;) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; intersect(java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; intersect(setA : Set&lt;out E&gt;, setB : Set&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; intersectAll(java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; intersectAll(vararg sets : Set&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R intersectAllInto(R, java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; intersectAllInto(targetSet : R, vararg sets : Set&lt;out E&gt;) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R intersectInto(R, java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; intersectInto(targetSet : R, setA : Set&lt;out E&gt;, setB : Set&lt;out E&gt;) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets boolean isProperSubsetOf(java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; isProperSubsetOf(candidateSubset : Set&lt;out E&gt;, candidateSuperset : Set&lt;out E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets boolean isSubsetOf(java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; isSubsetOf(candidateSubset : Set&lt;out E&gt;, candidateSuperset : Set&lt;out E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; newSet(java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newSet(vararg sets : Set&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; powerSet(java.util.Set&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; powerSet(set : Set&lt;T&gt;) : MutableSet&lt;MutableSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.block.procedure.Procedure2&lt;java.util.Set&lt;? extends E&gt;,R&gt; removeAllProcedure()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; removeAllProcedure() : Procedure2&lt;Set&lt;out E&gt;?, R&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.block.procedure.Procedure2&lt;java.util.Set&lt;? extends E&gt;,R&gt; retainAllProcedure()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; retainAllProcedure() : Procedure2&lt;Set&lt;out E&gt;?, R&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; symmetricDifference(java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; symmetricDifference(setA : Set&lt;out E&gt;?, setB : Set&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R symmetricDifferenceInto(R, java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; symmetricDifferenceInto(targetSet : R, setA : Set&lt;out E&gt;?, setB : Set&lt;out E&gt;?) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; union(java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; union(setA : Set&lt;out E&gt;, setB : Set&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets com.gs.collections.api.set.MutableSet&lt;E&gt; unionAll(java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; unionAll(vararg sets : Set&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R unionAllInto(R, java.util.Set&lt;? extends E&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; unionAllInto(targetSet : R, vararg sets : Set&lt;out E&gt;) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.factory.Sets R unionInto(R, java.util.Set&lt;? extends E&gt;, java.util.Set&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; unionInto(targetSet : R, setA : Set&lt;out E&gt;, setB : Set&lt;out E&gt;) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chunk(size : Int) : LazyIterable&lt;RichIterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable chunk(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chunk(x0 : Int) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.DoubleIterable collectDouble(com.gs.collections.api.block.function.primitive.DoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectDouble(function : DoubleFunction&lt;in T&gt;?) : DoubleIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.FloatIterable collectFloat(com.gs.collections.api.block.function.primitive.FloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectFloat(function : FloatFunction&lt;in T&gt;?) : FloatIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.IntIterable collectInt(com.gs.collections.api.block.function.primitive.IntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectInt(function : IntFunction&lt;in T&gt;?) : IntIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LongIterable collectLong(com.gs.collections.api.block.function.primitive.LongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectLong(function : LongFunction&lt;in T&gt;?) : LongIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;T&gt; concatenate(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun concatenate(iterable : Iterable&lt;T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(source : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;T&gt; drop(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun drop(count : Int) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.multimap.ImmutableMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;?) : ImmutableMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.multimap.ImmutableMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R into(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; into(p0 : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : LazyIterable&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;T&gt; take(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun take(count : Int) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable E[] toArray(E[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; toArray(array : Array&lt;out E&gt;) : Array&lt;out E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.bag.MutableBag&lt;T&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.list.MutableList&lt;T&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.map.MutableMap&lt;NK,NV&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toMap(keyFunction : Function&lt;in T, out NK&gt;?, valueFunction : Function&lt;in T, out NV&gt;?) : MutableMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.map.sorted.MutableSortedMap&lt;NK,NV&gt; toSortedMap(com.gs.collections.api.block.function.Function&lt;? super T,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toSortedMap(keyFunction : Function&lt;in T, out NK&gt;?, valueFunction : Function&lt;in T, out NV&gt;?) : MutableSortedMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.map.sorted.MutableSortedMap&lt;NK,NV&gt; toSortedMap(java.util.Comparator&lt;? super NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toSortedMap(comparator : Comparator&lt;in NK&gt;?, keyFunction : Function&lt;in T, out NK&gt;?, valueFunction : Function&lt;in T, out NV&gt;?) : MutableSortedMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSet(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in T, out V&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;?) : LazyIterable&lt;Pair&lt;T, S&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(that : Iterable&lt;S&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : LazyIterable&lt;Pair&lt;T, Int?&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable com.gs.collections.api.RichIterable zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.AbstractLazyIterable R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.ChunkIterable java.util.Iterator&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;RichIterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CollectIterable java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CollectIterable java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.1 void value(java.lang.Iterable&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(iterable : Iterable&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.1 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.2 void value(java.lang.Iterable&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(iterable : Iterable&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.2 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.3 void value(java.lang.Iterable&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(iterable : Iterable&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.3 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.CompositeIterator CompositeIterator(com.gs.collections.api.list.MutableList&lt;java.lang.Iterable&lt;E&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun CompositeIterator(iterables : MutableList&lt;Iterable&lt;E&gt;?&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable.CompositeIterator CompositeIterator(com.gs.collections.impl.lazy.CompositeIterable, com.gs.collections.api.list.MutableList, com.gs.collections.impl.lazy.CompositeIterable.1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun CompositeIterator(x0 : CompositeIterable?, x1 : MutableList, x2 : CompositeIterable.1?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable java.util.Iterator&lt;E&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.CompositeIterable com.gs.collections.impl.lazy.CompositeIterable&lt;T&gt; with(java.lang.Iterable&lt;T&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg iterables : Iterable&lt;T&gt;) : CompositeIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.DropIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.FlatCollectIterable com.gs.collections.api.block.function.Function access$000(com.gs.collections.impl.lazy.FlatCollectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : FlatCollectIterable) : Function?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.FlatCollectIterable java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.LazyIterable&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.LazyIterable&lt;T&gt; drop(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun drop(count : Int) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.LazyIterable&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter R into(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; into(target : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.LazyIterable&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.LazyIterable&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.LazyIterableAdapter com.gs.collections.api.LazyIterable&lt;T&gt; take(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun take(count : Int) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.RejectIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.ReverseIterable com.gs.collections.impl.lazy.ReverseIterable&lt;T&gt; adapt(com.gs.collections.api.list.ListIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; adapt(listIterable : ListIterable&lt;T&gt;?) : ReverseIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.ReverseIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.SelectInstancesOfIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.SelectIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.TakeIterable java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.TakeIterable java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.ZipIterable java.util.Iterator&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Pair&lt;X, Y&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.ZipWithIndexIterable java.util.Iterator&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Pair&lt;T, Int?&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ChunkIterator ChunkIterator(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ChunkIterator(iterable : Iterable&lt;T&gt;, size : Int)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.CollectIterator CollectIterator(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun CollectIterator(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.DropIterator DropIterator(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun DropIterator(iterable : Iterable&lt;T&gt;, count : Int)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.FlatCollectIterator FlatCollectIterator(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun FlatCollectIterator(iterable : Iterable&lt;T&gt;, newFunction : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.SelectInstancesOfIterator SelectInstancesOfIterator(java.lang.Iterable&lt;?&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SelectInstancesOfIterator(iterable : Iterable&lt;*&gt;, clazz : Class&lt;T&gt;?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.SelectIterator SelectIterator(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SelectIterator(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.TakeIterator TakeIterator(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun TakeIterator(iterable : Iterable&lt;T&gt;, count : Int)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ZipIterator ZipIterator(java.lang.Iterable&lt;X&gt;, java.lang.Iterable&lt;Y&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ZipIterator(xs : Iterable&lt;X&gt;, ys : Iterable&lt;Y&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ZipIterator com.gs.collections.api.tuple.Pair&lt;X,Y&gt; next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Pair&lt;X, Y&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ZipIterator java.lang.Object next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ZipWithIndexIterator ZipWithIndexIterator(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ZipWithIndexIterator(iterable : Iterable&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ZipWithIndexIterator com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt; next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Pair&lt;T, Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.iterator.ZipWithIndexIterator java.lang.Object next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable.DoubleFunctionToProcedure void value(T, com.gs.collections.api.block.procedure.primitive.DoubleProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?, parm : DoubleProcedure) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable.DoubleFunctionToProcedure void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable com.gs.collections.api.LazyIterable access$100(com.gs.collections.impl.lazy.primitive.CollectDoubleIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectDoubleIterable) : LazyIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable com.gs.collections.api.block.function.primitive.DoubleFunction access$200(com.gs.collections.impl.lazy.primitive.CollectDoubleIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : CollectDoubleIterable) : DoubleFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable com.gs.collections.api.RichIterable&lt;V&gt; collect(com.gs.collections.api.block.function.primitive.DoubleToObjectFunction&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : DoubleToObjectFunction&lt;out V&gt;?) : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable com.gs.collections.api.iterator.DoubleIterator doubleIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun doubleIterator() : DoubleIterator&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable double[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : DoubleArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleIterable double[] toSortedArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedArray() : DoubleArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleToObjectIterable com.gs.collections.api.block.function.primitive.DoubleToObjectFunction access$000(com.gs.collections.impl.lazy.primitive.CollectDoubleToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : CollectDoubleToObjectIterable) : DoubleToObjectFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleToObjectIterable com.gs.collections.impl.lazy.primitive.CollectDoubleIterable access$100(com.gs.collections.impl.lazy.primitive.CollectDoubleToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectDoubleToObjectIterable) : CollectDoubleIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectDoubleToObjectIterable java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable.FloatFunctionToProcedure void value(T, com.gs.collections.api.block.procedure.primitive.FloatProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?, parm : FloatProcedure) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable.FloatFunctionToProcedure void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable com.gs.collections.api.LazyIterable access$100(com.gs.collections.impl.lazy.primitive.CollectFloatIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectFloatIterable) : LazyIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable com.gs.collections.api.block.function.primitive.FloatFunction access$200(com.gs.collections.impl.lazy.primitive.CollectFloatIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : CollectFloatIterable) : FloatFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable com.gs.collections.api.RichIterable&lt;V&gt; collect(com.gs.collections.api.block.function.primitive.FloatToObjectFunction&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : FloatToObjectFunction&lt;out V&gt;?) : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable com.gs.collections.api.iterator.FloatIterator floatIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun floatIterator() : FloatIterator&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable float[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : FloatArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatIterable float[] toSortedArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedArray() : FloatArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatToObjectIterable com.gs.collections.api.block.function.primitive.FloatToObjectFunction access$000(com.gs.collections.impl.lazy.primitive.CollectFloatToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : CollectFloatToObjectIterable) : FloatToObjectFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatToObjectIterable com.gs.collections.impl.lazy.primitive.CollectFloatIterable access$100(com.gs.collections.impl.lazy.primitive.CollectFloatToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectFloatToObjectIterable) : CollectFloatIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectFloatToObjectIterable java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable.IntFunctionToProcedure void value(T, com.gs.collections.api.block.procedure.primitive.IntProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?, parm : IntProcedure) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable.IntFunctionToProcedure void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable com.gs.collections.api.LazyIterable access$100(com.gs.collections.impl.lazy.primitive.CollectIntIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectIntIterable) : LazyIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable com.gs.collections.api.block.function.primitive.IntFunction access$200(com.gs.collections.impl.lazy.primitive.CollectIntIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : CollectIntIterable) : IntFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable com.gs.collections.api.LazyIterable&lt;V&gt; collect(com.gs.collections.api.block.function.primitive.IntToObjectFunction&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : IntToObjectFunction&lt;out V&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.primitive.IntToObjectFunction)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : IntToObjectFunction?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable com.gs.collections.api.iterator.IntIterator intIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intIterator() : IntIterator&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable int[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : IntArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntIterable int[] toSortedArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedArray() : IntArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntToObjectIterable com.gs.collections.api.block.function.primitive.IntToObjectFunction access$000(com.gs.collections.impl.lazy.primitive.CollectIntToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : CollectIntToObjectIterable) : IntToObjectFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntToObjectIterable com.gs.collections.impl.lazy.primitive.CollectIntIterable access$100(com.gs.collections.impl.lazy.primitive.CollectIntToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectIntToObjectIterable) : CollectIntIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectIntToObjectIterable java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable.LongFunctionToProcedure void value(T, com.gs.collections.api.block.procedure.primitive.LongProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : T?, parm : LongProcedure) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable.LongFunctionToProcedure void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable com.gs.collections.api.LazyIterable access$100(com.gs.collections.impl.lazy.primitive.CollectLongIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectLongIterable) : LazyIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable com.gs.collections.api.block.function.primitive.LongFunction access$200(com.gs.collections.impl.lazy.primitive.CollectLongIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : CollectLongIterable) : LongFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable com.gs.collections.api.RichIterable&lt;V&gt; collect(com.gs.collections.api.block.function.primitive.LongToObjectFunction&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : LongToObjectFunction&lt;out V&gt;?) : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable com.gs.collections.api.iterator.LongIterator longIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun longIterator() : LongIterator&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable long[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : LongArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongIterable long[] toSortedArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedArray() : LongArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongToObjectIterable com.gs.collections.api.block.function.primitive.LongToObjectFunction access$000(com.gs.collections.impl.lazy.primitive.CollectLongToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : CollectLongToObjectIterable) : LongToObjectFunction?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongToObjectIterable com.gs.collections.impl.lazy.primitive.CollectLongIterable access$100(com.gs.collections.impl.lazy.primitive.CollectLongToObjectIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : CollectLongToObjectIterable) : CollectLongIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.lazy.primitive.CollectLongToObjectIterable java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval.1 java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval.1 java.math.BigInteger value(java.math.BigInteger, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(result : BigInteger, each : Int) : BigInteger?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval int access$100(com.gs.collections.impl.list.Interval)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : Interval) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval int access$200(com.gs.collections.impl.list.Interval)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : Interval) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval int access$300(com.gs.collections.impl.list.Interval)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : Interval) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval by(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun by(newStep : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval R collect(com.gs.collections.api.block.function.Function&lt;? super java.lang.Integer,? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; collect(p0 : Function&lt;in Int?, out T&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval boolean containsAll(int...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(vararg values : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval boolean containsNone(int...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsNone(vararg values : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval evensFromTo(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun evensFromTo(from : Int, to : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval void executeAndCountdown(com.gs.collections.api.block.procedure.Procedure&lt;? super java.lang.Integer&gt;, java.util.concurrent.Executor, java.util.concurrent.CountDownLatch, java.lang.Integer)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun executeAndCountdown(procedure : Procedure&lt;in Int?&gt;?, executor : Executor, latch : CountDownLatch?, integer : Int?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval from(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun from(newFrom : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval fromTo(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun fromTo(from : Int, to : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval fromToBy(int, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun fromToBy(from : Int, to : Int, stepBy : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(object : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval R injectInto(R, com.gs.collections.api.block.function.Function2&lt;? super R,? super java.lang.Integer,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; injectInto(p0 : R?, p1 : Function2&lt;in R, in Int?, out R&gt;) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval boolean intObjectEqual(int, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intObjectEqual(i : Int, object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.util.Iterator&lt;java.lang.Integer&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.util.ListIterator&lt;java.lang.Integer&gt; listIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator() : MutableListIterator&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.util.ListIterator&lt;java.lang.Integer&gt; listIterator(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator(index : Int) : MutableListIterator&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval oddsFromTo(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun oddsFromTo(from : Int, to : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval oneTo(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun oneTo(count : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval oneToBy(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun oneToBy(count : Int, step : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super java.lang.Integer&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Int?&gt;?&gt; reject(p0 : Predicate&lt;in Int?&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval R select(com.gs.collections.api.block.predicate.Predicate&lt;? super java.lang.Integer&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Int?&gt;?&gt; select(p0 : Predicate&lt;in Int?&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.api.LazyIterable take(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun take(x0 : Int) : LazyIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval take(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun take(count : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval to(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun to(newTo : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.lang.Integer[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.lang.Integer[] toArray(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray(from : Int, to : Int) : Array&lt;out Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.api.bag.MutableBag&lt;java.lang.Integer&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval int[] toIntArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toIntArray() : IntArray&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.api.list.MutableList&lt;java.lang.Integer&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval java.lang.Integer[] toReverseArray(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toReverseArray(from : Int, to : Int) : Array&lt;out Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.api.list.MutableList&lt;java.lang.Integer&gt; toReverseList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toReverseList(from : Int, to : Int) : MutableList&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.api.set.MutableSet&lt;java.lang.Integer&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.api.set.MutableSet&lt;java.lang.Integer&gt; toSet(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet(from : Int, to : Int) : MutableSet&lt;Int?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval zero()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zero() : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval zeroTo(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zeroTo(count : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.Interval com.gs.collections.impl.list.Interval zeroToBy(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zeroToBy(count : Int, step : Int) : Interval&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean abstractArrayAdapterEquals(com.gs.collections.impl.list.fixed.AbstractArrayAdapter&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun abstractArrayAdapterEquals(otherList : AbstractArrayAdapter&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(p0 : Iterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, A, R : Collection&lt;A&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter T detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter int lastIndexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lastIndexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean randomAccessListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun randomAccessListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean regularListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun regularListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectAndRejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractArrayAdapter E[] toArray(E[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; toArray(array : Array&lt;out E&gt;) : Array&lt;out E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList.SubList SubList(com.gs.collections.impl.list.mutable.AbstractMutableList&lt;T&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SubList(list : AbstractMutableList&lt;T&gt;, fromIndex : Int, toIndex : Int)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList.SubList boolean addAll(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(p0 : Collection&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList.SubList boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(p0 : Iterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList.SubList boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList.SubList boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList.SubList boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(p0 : Iterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList com.gs.collections.api.list.FixedSizeList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.AbstractMemoryEfficientMutableList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; adapt(E[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; adapt(array : Array&lt;out E&gt;?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArray() : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArray(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArray(source : Iterable&lt;out E&gt;) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?, two : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E, E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?, two : E?, three : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E, E, E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?, two : E?, three : E?, four : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E, E, E, E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?, two : E?, three : E?, four : E?, five : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E, E, E, E, E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?, two : E?, three : E?, four : E?, five : E?, six : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E, E, E, E, E, E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(one : E?, two : E?, three : E?, four : E?, five : E?, six : E?, seven : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWith(E...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWith(vararg elements : E) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;E&gt; newArrayWithItem(java.lang.Iterable&lt;? extends E&gt;, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newArrayWithItem(iterable : Iterable&lt;out E&gt;, itemToAdd : E?) : ArrayAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter void readObject(java.io.ObjectInputStream)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readObject(objectInputStream : ObjectInputStream) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.list.MutableList withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.list.MutableList without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.api.list.MutableList withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.ArrayAdapter void writeObject(java.io.ObjectOutputStream)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeObject(objectOutputStream : ObjectOutputStream) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList com.gs.collections.impl.list.fixed.DoubletonList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : DoubletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList com.gs.collections.impl.list.fixed.TripletonList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : TripletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.DoubletonList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.impl.list.fixed.EmptyList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : EmptyList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList java.util.ListIterator&lt;T&gt; listIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator() : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList java.util.ListIterator&lt;T&gt; listIterator(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator(index : Int) : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.impl.list.fixed.EmptyList&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : EmptyList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.impl.list.fixed.SingletonList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : SingletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.EmptyList com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : MutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.FixedSizeListFactoryImpl com.gs.collections.api.list.FixedSizeList&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : FixedSizeList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList com.gs.collections.impl.list.fixed.QuadrupletonList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : QuadrupletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList com.gs.collections.impl.list.fixed.QuintupletonList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : QuintupletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuadrupletonList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList com.gs.collections.impl.list.fixed.QuintupletonList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : QuintupletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList com.gs.collections.impl.list.fixed.SextupletonList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : SextupletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.QuintupletonList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList com.gs.collections.impl.list.fixed.SextupletonList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : SextupletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList com.gs.collections.impl.list.fixed.ArrayAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : ArrayAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SextupletonList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.impl.list.fixed.SingletonList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : SingletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.impl.list.fixed.SingletonList&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : SingletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList com.gs.collections.impl.list.fixed.DoubletonList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : DoubletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.SingletonList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList com.gs.collections.api.list.FixedSizeList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : FixedSizeList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList com.gs.collections.impl.list.fixed.TripletonList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : TripletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList com.gs.collections.impl.list.fixed.QuadrupletonList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(value : T?) : QuadrupletonList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.fixed.TripletonList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList java.util.List&lt;T&gt; castToList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun castToList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.ImmutableMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;?) : ImmutableListMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.list.ListMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.ImmutableMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableListMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.multimap.list.ListMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(object : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList int lastIndexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lastIndexOf(object : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList java.util.ListIterator&lt;T&gt; listIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator() : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.MutableCollection&lt;T&gt; newMutable(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newMutable(size : Int) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ImmutableList&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(elements : Iterable&lt;out T&gt;) : ImmutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(p0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ImmutableList&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(p0 : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(p0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ImmutableList&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(p0 : Iterable&lt;out T&gt;?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList boolean randomAccessListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun randomAccessListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList boolean regularListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun regularListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.ImmutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ImmutableList&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate&lt;in T&gt;?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ListIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ImmutableList&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate&lt;in T&gt;?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ListIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.collection.ImmutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ImmutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : ImmutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.AbstractImmutableList com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(procedure : Procedure&lt;in T&gt;?, sectionIndex : Int, sectionCount : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean immutableArrayListEquals(com.gs.collections.impl.list.immutable.ImmutableArrayList&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun immutableArrayListEquals(otherList : ImmutableArrayList&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList int lastIndexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lastIndexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList com.gs.collections.impl.list.immutable.ImmutableArrayList&lt;E&gt; newList(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newList(iterable : Iterable&lt;out E&gt;) : ImmutableArrayList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList com.gs.collections.impl.list.immutable.ImmutableArrayList&lt;E&gt; newListWith(E...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newListWith(vararg elements : E) : ImmutableArrayList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList com.gs.collections.api.collection.ImmutableCollection newWith(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWith(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList com.gs.collections.api.list.ImmutableList&lt;T&gt; newWith(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWith(newItem : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean randomAccessListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun randomAccessListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList boolean regularListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun regularListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableArrayList E[] toArray(E[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; toArray(a : Array&lt;out E&gt;) : Array&lt;out E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableDecapletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableDoubletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableDoubletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable, p1 : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(p0 : Function&lt;in T, out V&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(p0 : Function2&lt;in T, in P, out V&gt;?, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(predicate : Predicate&lt;in T&gt;, function : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList java.lang.String makeString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList java.lang.String makeString(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString(separator : String?) : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ImmutableList&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(element : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(x0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ImmutableList&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(elements : Iterable&lt;out T&gt;?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList java.lang.Object readResolve()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readResolve() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.collection.ImmutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ImmutableList&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ListIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(p0 : Predicate&lt;in T&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(p0 : Predicate2&lt;in T, in P&gt;?, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ImmutableList&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ListIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.collection.ImmutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ImmutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : ImmutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableEmptyList R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?, eight : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?, eight : T?, nine : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T, T, T, T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?, eight : T?, nine : T?, ten : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?, eight : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?, eight : T?, nine : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T, T, T, T, T, T, T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?, five : T?, six : T?, seven : T?, eight : T?, nine : T?, ten : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T?) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableListFactoryImpl com.gs.collections.api.list.ImmutableList&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : ImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableNonupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableOctupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableQuadrupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableQuintupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableSeptupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableSextupletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableSingletonList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableSingletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.immutable.ImmutableTripletonList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(p0 : Function&lt;in T, out V&gt;?) : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(p0 : Predicate?, p1 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(p0 : Predicate?, p1 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(p0 : Predicate?, p1 : Function?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(p0 : Predicate&lt;in T&gt;?, p1 : Function&lt;in T, out V&gt;?) : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection collectWith(com.gs.collections.api.block.function.Function2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectWith(p0 : Function2?, p1 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;V&gt; collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V&gt; collectWith(p0 : Function2&lt;in T, in P, out V&gt;?, p1 : P?) : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(p0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(p0 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(p0 : Function?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter java.util.Collection getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter java.util.List&lt;T&gt; getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.partition.PartitionIterable partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(p0 : Predicate?) : PartitionIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.partition.PartitionMutableCollection partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(p0 : Predicate?) : PartitionMutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.partition.list.PartitionList partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(p0 : Predicate?) : PartitionList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(p0 : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection rejectWith(com.gs.collections.api.block.predicate.Predicate2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun rejectWith(p0 : Predicate2?, p1 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; rejectWith(p0 : Predicate2&lt;in T, in P&gt;?, p1 : P?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(p0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(p0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(p0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(p0 : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection selectWith(com.gs.collections.api.block.predicate.Predicate2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectWith(p0 : Predicate2?, p1 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;?, p1 : P?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; toReversed()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toReversed() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractListAdapter com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : MutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList SubList(com.gs.collections.impl.list.mutable.AbstractMutableList&lt;T&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SubList(list : AbstractMutableList&lt;T&gt;, fromIndex : Int, toIndex : Int)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList int access$000(com.gs.collections.impl.list.mutable.AbstractMutableList.SubList)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : AbstractMutableList.SubList) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.list.MutableList access$100(com.gs.collections.impl.list.mutable.AbstractMutableList.SubList)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : AbstractMutableList.SubList) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList int access$200(com.gs.collections.impl.list.mutable.AbstractMutableList.SubList)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : AbstractMutableList.SubList) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList int access$208(com.gs.collections.impl.list.mutable.AbstractMutableList.SubList)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$208(x0 : AbstractMutableList.SubList) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList int access$210(com.gs.collections.impl.list.mutable.AbstractMutableList.SubList)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$210(x0 : AbstractMutableList.SubList) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList boolean addAll(int, java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(index : Int, collection : Collection&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList boolean addAll(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(collection : Collection&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.list.MutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList java.util.ListIterator&lt;T&gt; listIterator(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator(index : Int) : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.list.MutableList&lt;T&gt; toReversed()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toReversed() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList.SubList com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.impl.lazy.ReverseIterable&lt;T&gt; asReversed()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asReversed() : ReverseIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, A, R : Collection&lt;A&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(source : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList void defaultSort(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun defaultSort(p0 : Comparator&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList T detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(o : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList int lastIndexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lastIndexOf(o : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList java.util.ListIterator&lt;T&gt; listIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator() : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList java.util.ListIterator&lt;T&gt; listIterator(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator(index : Int) : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean nonRandomAccessEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nonRandomAccessEquals(that : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean randomAccessEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun randomAccessEquals(that : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectAndRejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; toReversed()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toReversed() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.set.MutableSet&lt;T&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; toSortedList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; toSortedList(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList(p0 : Comparator&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.AbstractMutableList com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;E&gt; adapt(java.util.ArrayList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; adapt(newDelegate : ArrayList&lt;E&gt;?) : ArrayListAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : ArrayListAdapter&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : ArrayListAdapter&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection collectWith(com.gs.collections.api.block.function.Function2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectWith(x0 : Function2?, x1 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList collectWith(com.gs.collections.api.block.function.Function2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectWith(x0 : Function2?, x1 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;A&gt; collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, A&gt; collectWith(function : Function2&lt;in T, in P, out A&gt;?, parameter : P?) : ArrayListAdapter&lt;A&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ArrayListAdapter&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;E&gt; newList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newList() : ArrayListAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;E&gt; newList(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newList(size : Int) : ArrayListAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.partition.PartitionIterable partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.partition.PartitionMutableCollection partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionMutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.partition.list.PartitionList partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection rejectWith(com.gs.collections.api.block.predicate.Predicate2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun rejectWith(x0 : Predicate2?, x1 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList rejectWith(com.gs.collections.api.block.predicate.Predicate2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun rejectWith(x0 : Predicate2?, x1 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection selectWith(com.gs.collections.api.block.predicate.Predicate2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectWith(x0 : Predicate2?, x1 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList selectWith(com.gs.collections.api.block.predicate.Predicate2, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectWith(x0 : Predicate2?, x1 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : ArrayListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.impl.list.mutable.ArrayListAdapter&lt;E&gt; wrap(java.util.ArrayList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; wrap(list : ArrayList&lt;E&gt;?) : ArrayListAdapter&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ArrayListAdapter com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.10 void value(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(object : FastList&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.10 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.1 boolean accept(com.gs.collections.impl.list.mutable.FastList&lt;?&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(list : FastList&lt;*&gt;, toRemove : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.1 boolean accept(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any, x1 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.2 void value(com.gs.collections.impl.list.mutable.FastList&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : FastList&lt;*&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.2 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.3 void value(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(list : FastList&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.3 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.4 void value(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : FastList&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.4 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.5 void value(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(list : FastList&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.5 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.6 boolean accept(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(list : FastList&lt;E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.6 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.7 boolean accept(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(list : FastList&lt;E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.7 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.CompositeIterator CompositeIterator(com.gs.collections.impl.list.mutable.FastList&lt;com.gs.collections.impl.list.mutable.FastList&lt;E&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun CompositeIterator(newLists : FastList&lt;FastList&lt;E&gt;?&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.CompositeIterator CompositeIterator(com.gs.collections.impl.list.mutable.CompositeFastList, com.gs.collections.impl.list.mutable.FastList, com.gs.collections.impl.list.mutable.CompositeFastList.1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun CompositeIterator(x0 : CompositeFastList?, x1 : FastList, x2 : CompositeFastList.1?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure int access$200(com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : CompositeFastList.ProcedureToInnerListObjectIntProcedure) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure int access$208(com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$208(x0 : CompositeFastList.ProcedureToInnerListObjectIntProcedure) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure com.gs.collections.api.block.procedure.ObjectIntProcedure access$300(com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : CompositeFastList.ProcedureToInnerListObjectIntProcedure) : ObjectIntProcedure?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure void value(com.gs.collections.impl.list.mutable.FastList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(list : FastList&lt;E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList.ProcedureToInnerListObjectIntProcedure void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList boolean addAll(java.util.Collection&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(collection : Collection&lt;out E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList void addComposited(java.util.Collection&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addComposited(collection : Collection&lt;out E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList void defaultSort(java.util.Comparator&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun defaultSort(comparator : Comparator&lt;in E&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super E,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in E, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList int lastIndexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lastIndexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList com.gs.collections.api.list.MutableList reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList com.gs.collections.impl.list.mutable.CompositeFastList&lt;E&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : CompositeFastList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.CompositeFastList java.lang.Object[] toArray(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray(array : Array&lt;out Any?&gt;) : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList FastList(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun FastList(source : Collection&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList FastList(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun FastList(array : Array&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean addAll(int, java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(index : Int, source : Collection&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean addAll(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(source : Collection&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void addAllArrayList(java.util.ArrayList&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllArrayList(source : ArrayList&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void addAllArrayListAtIndex(java.util.ArrayList&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllArrayListAtIndex(source : ArrayList&lt;T&gt;, index : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void addAllCollection(java.util.Collection&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllCollection(source : Collection&lt;out T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void addAllCollectionAtIndex(java.util.Collection&lt;? extends T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllCollectionAtIndex(source : Collection&lt;out T&gt;, index : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void addAllFastList(com.gs.collections.impl.list.mutable.FastList&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllFastList(source : FastList&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void addAllFastListAtIndex(com.gs.collections.impl.list.mutable.FastList&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllFastListAtIndex(source : FastList&lt;T&gt;, index : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(procedure : Procedure&lt;in T&gt;?, sectionIndex : Int, sectionCount : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(function : Function2&lt;in T, in P, out V&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(source : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg source : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList java.lang.Object[] copyItemsWithNewCapacity(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyItemsWithNewCapacity(newCapacity : Int) : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList T detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean equals(com.gs.collections.impl.list.mutable.FastList&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : FastList&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(otherList : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean fastListEquals(com.gs.collections.impl.list.mutable.FastList&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun fastListEquals(otherFastList : FastList&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList int indexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun indexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList int lastIndexOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun lastIndexOf(p0 : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList java.lang.IndexOutOfBoundsException newIndexOutOfBoundsException(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newIndexOutOfBoundsException(index : Int) : IndexOutOfBoundsException&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;E&gt; newList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newList() : FastList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;E&gt; newList(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newList(initialCapacity : Int) : FastList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;E&gt; newList(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newList(source : Iterable&lt;out E&gt;) : FastList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;E&gt; newListWith(E...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; newListWith(vararg elements : E) : FastList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean randomAccessListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun randomAccessListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList boolean regularListEquals(java.util.List&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun regularListEquals(otherList : List&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(predicate : Predicate&lt;in T&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectAndRejectWith(predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : FastList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList E[] toArray(E[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; toArray(array : Array&lt;out E&gt;) : Array&lt;out E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList toSortedList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; toSortedList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList() : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.api.list.MutableList toSortedList(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; toSortedList(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList(comparator : Comparator&lt;in T&gt;?) : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;T&gt; withArrayCopy(T[], int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withArrayCopy(elements : Array&lt;out T&gt;?, begin : Int, length : Int) : FastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList com.gs.collections.impl.list.mutable.FastList&lt;E&gt; wrapCopy(E...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; wrapCopy(vararg array : E) : FastList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.FastList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter ListAdapter(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ListAdapter(newDelegate : List&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;E&gt; adapt(java.util.List&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; adapt(list : List&lt;E&gt;) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter java.util.Collection getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter java.util.List&lt;T&gt; getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.partition.PartitionIterable partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.partition.PartitionMutableCollection partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionMutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.partition.list.PartitionList partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.impl.list.mutable.ListAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : ListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.ListAdapter com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList.1 void value(com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : MultiReaderFastList.UntouchableMutableList&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList.1 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList.2 void value(com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableListIterator&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : MultiReaderFastList.UntouchableListIterator&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList.2 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList java.util.ListIterator&lt;T&gt; listIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator() : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList java.util.ListIterator&lt;T&gt; listIterator(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator(index : Int) : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList&lt;T&gt; asReadUntouchable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asReadUntouchable() : MultiReaderFastList.UntouchableMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.impl.list.mutable.MultiReaderFastList.UntouchableMutableList&lt;T&gt; asWriteUntouchable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asWriteUntouchable() : MultiReaderFastList.UntouchableMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.impl.list.mutable.MultiReaderFastList&lt;T&gt; newList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newList() : MultiReaderFastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.impl.list.mutable.MultiReaderFastList&lt;T&gt; newList(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newList(capacity : Int) : MultiReaderFastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.impl.list.mutable.MultiReaderFastList&lt;T&gt; newList(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newList(iterable : Iterable&lt;T&gt;) : MultiReaderFastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.impl.list.mutable.MultiReaderFastList&lt;T&gt; newListWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newListWith(vararg elements : T) : MultiReaderFastList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList void withReadLockAndDelegate(com.gs.collections.api.block.procedure.Procedure&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withReadLockAndDelegate(procedure : Procedure&lt;MutableList&lt;T&gt;?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList void withWriteLockAndDelegate(com.gs.collections.api.block.procedure.Procedure&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withWriteLockAndDelegate(procedure : Procedure&lt;MutableList&lt;T&gt;?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList com.gs.collections.api.list.MutableList&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MultiReaderFastList void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MutableListFactoryImpl com.gs.collections.api.list.MutableList&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MutableListFactoryImpl com.gs.collections.api.list.MutableList&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MutableListFactoryImpl com.gs.collections.api.list.MutableList&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(iterable : Iterable&lt;out T&gt;) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MutableListFactoryImpl com.gs.collections.api.list.MutableList&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MutableListFactoryImpl com.gs.collections.api.list.MutableList&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.MutableListFactoryImpl com.gs.collections.api.list.MutableList&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(iterable : Iterable&lt;out T&gt;) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter RandomAccessListAdapter(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun RandomAccessListAdapter(newDelegate : List&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;E&gt; adapt(java.util.List&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; adapt(list : List&lt;E&gt;) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(p0 : Predicate&lt;in T&gt;, p1 : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter java.util.Collection getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter java.util.List&lt;T&gt; getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.partition.PartitionIterable partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.partition.PartitionMutableCollection partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionMutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.partition.list.PartitionList partition(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(x0 : Predicate?) : PartitionList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun partition(predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList sortThis(java.util.Comparator)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(x0 : Comparator?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; sortThis(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in T&gt;?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;T&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in T, out V&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.impl.list.mutable.RandomAccessListAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : RandomAccessListAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.ListIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : ListIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.RandomAccessListAdapter com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableList&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList SynchronizedMutableList(com.gs.collections.api.list.MutableList&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableList(newCollection : MutableList&lt;E&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList SynchronizedMutableList(com.gs.collections.api.list.MutableList&lt;E&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableList(newCollection : MutableList&lt;E&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.impl.list.mutable.SynchronizedMutableList&lt;E&gt; of(L)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, L : List&lt;E&gt;?&gt; of(list : L) : SynchronizedMutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.impl.list.mutable.SynchronizedMutableList&lt;E&gt; of(L, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, L : List&lt;E&gt;?&gt; of(list : L, lock : Any?) : SynchronizedMutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; reverseThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseThis() : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; sortThis()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis() : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; sortThis(java.util.Comparator&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sortThis(comparator : Comparator&lt;in E&gt;?) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; sortThisBy(com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; sortThisBy(function : Function&lt;in E, out V&gt;?) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; with(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : E?) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; withAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out E&gt;?) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; without(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : E?) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.list.MutableList&lt;E&gt; withoutAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out E&gt;?) : MutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;E, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.SynchronizedMutableList R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;E, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList UnmodifiableMutableList(com.gs.collections.api.list.MutableList&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableMutableList(mutableList : MutableList&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.list.MutableList&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.list.MutableList clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.impl.list.mutable.UnmodifiableMutableList&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnmodifiableMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList java.util.ListIterator&lt;T&gt; listIterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator() : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList java.util.ListIterator&lt;T&gt; listIterator(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun listIterator(index : Int) : MutableListIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.impl.list.mutable.UnmodifiableMutableList&lt;E&gt; of(L)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, L : List&lt;E&gt;?&gt; of(list : L) : UnmodifiableMutableList&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.list.MutableList subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.impl.list.mutable.UnmodifiableMutableList&lt;T&gt; subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(fromIndex : Int, toIndex : Int) : UnmodifiableMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList java.util.List subList(int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subList(x0 : Int, x1 : Int) : MutableList&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.list.mutable.UnmodifiableMutableList com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable V getIfAbsent(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsent(p0 : K, p1 : Function0&lt;out V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable V getIfAbsentWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentWith(p0 : K, p1 : Function&lt;in P, out V&gt;, p2 : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable A ifPresentApply(K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A&gt; ifPresentApply(key : K, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable boolean isAbsent(V, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isAbsent(result : V?, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable boolean keyAndValueEquals(K, V, java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keyAndValueEquals(key : K?, value : V?, map : Map&lt;K, V&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable int keyAndValueHashCode(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keyAndValueHashCode(key : K?, value : V?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.AbstractMapIterable com.gs.collections.api.RichIterable&lt;com.gs.collections.api.tuple.Pair&lt;V,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : RichIterable&lt;Pair&lt;V, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.SynchronizedMapIterable SynchronizedMapIterable(com.gs.collections.api.map.MapIterable&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMapIterable(newMap : MapIterable&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.SynchronizedMapIterable SynchronizedMapIterable(com.gs.collections.api.map.MapIterable&lt;K,V&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMapIterable(newMap : MapIterable&lt;K, V&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.SynchronizedMapIterable com.gs.collections.api.map.MapIterable&lt;K,V&gt; getMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getMap() : MapIterable&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.SynchronizedMapIterable com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.SynchronizedMapIterable com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.FixedSizeMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : FixedSizeMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.FixedSizeMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : FixedSizeMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty(capacity : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.AbstractMemoryEfficientMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(keys : Iterable&lt;out K&gt;) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.impl.map.fixed.DoubletonMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : DoubletonMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.FixedSizeMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : FixedSizeMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : FixedSizeMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; filter(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun filter(predicate : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void forEachKeyValue(com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKeyValue(procedure : Procedure2&lt;in K, in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(procedure : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in V, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(addKey : K?, addValue : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.DoubletonMap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.impl.map.fixed.EmptyMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : EmptyMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.FixedSizeMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : FixedSizeMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.FixedSizeMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : FixedSizeMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(addKey : K?, addValue : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.EmptyMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of() : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; of(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key : K?, value : V?) : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; of(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; of(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with() : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; with(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key : K?, value : V?) : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; with(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.FixedSizeMapFactoryImpl com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; with(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : FixedSizeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.impl.map.fixed.SingletonMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : SingletonMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.FixedSizeMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : FixedSizeMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : FixedSizeMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void forEachKeyValue(com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKeyValue(procedure : Procedure2&lt;in K, in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(procedure : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in V, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(addKey : K?, addValue : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.SingletonMap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.impl.map.fixed.TripletonMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : TripletonMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.FixedSizeMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : FixedSizeMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : FixedSizeMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; filter(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun filter(predicate : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void forEachKeyValue(com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKeyValue(procedure : Procedure2&lt;in K, in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(procedure : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in V, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.FixedSizeMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : FixedSizeMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MutableMap?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(addKey : K?, addValue : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.fixed.TripletonMap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap java.util.Map&lt;K,V&gt; castToMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun castToMap() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.multimap.ImmutableMultimap&lt;VV,V&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super V,? extends VV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;VV&gt; groupBy(function : Function&lt;in V, out VV&gt;?) : ImmutableMultimap&lt;VV, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.multimap.ImmutableMultimap&lt;VV,V&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super V,? extends java.lang.Iterable&lt;VV&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;VV&gt; groupByEach(function : Function&lt;in V, out Iterable&lt;VV&gt;?&gt;?) : ImmutableMultimap&lt;VV, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; newWithAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAllKeyValueArguments(vararg keyValuePairs : Pair&lt;out K, out V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; newWithAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; newWithoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAllKeys(keys : Iterable&lt;out K&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; toMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMap() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.AbstractImmutableMap com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; filter(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun filter(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap void forEachKeyValue(com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKeyValue(procedure : Procedure2&lt;in K, in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(procedure : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in V, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableDoubletonMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap V getIfAbsent(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsent(key : K, function : Function0&lt;out V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap V getIfAbsentWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentWith(key : K, function : Function&lt;in P, out V&gt;, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap A ifPresentApply(K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A&gt; ifPresentApply(key : K, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap java.lang.Object readResolve()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readResolve() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableEmptyMap java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of() : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; of(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key : K?, value : V?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; of(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; of(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; ofMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; ofMap(map : MutableMap&lt;K, V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with() : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; with(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key : K?, value : V?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; with(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; with(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; withMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; withMap(map : MutableMap&lt;K, V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap void forEachKeyValue(com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKeyValue(procedure : Procedure2&lt;in K, in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(procedure : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in V, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableSingletonMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; filter(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun filter(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap void forEachKeyValue(com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKeyValue(procedure : Procedure2&lt;in K, in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(procedure : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in V, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableTripletonMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap ImmutableUnifiedMap(java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableUnifiedMap(delegate : Map&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap ImmutableUnifiedMap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableUnifiedMap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in V&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.immutable.ImmutableUnifiedMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap.ValuesCollectionCommon void copyValuesFromTable(java.lang.Object[], java.lang.Object[], java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyValuesFromTable(table : Array&lt;out Any?&gt;, result : Array&lt;out Any?&gt;?, chainedKey : Any?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap void chainedForEachValue(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachValue(chain : Array&lt;out Any?&gt;, procedure : Procedure&lt;in V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap void chainedForEachValueWith(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; chainedForEachValueWith(chain : Array&lt;out Any?&gt;, procedure : Procedure2&lt;in V, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap int chainedForEachValueWithIndex(java.lang.Object[], com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachValueWithIndex(chain : Array&lt;out Any?&gt;, objectIntProcedure : ObjectIntProcedure&lt;in V&gt;?, index : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : MutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : MutableMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap V getIfAbsentPut(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsentPut(p0 : K, p1 : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap V getIfAbsentPutWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentPutWith(p0 : K, p1 : Function&lt;in P, out V&gt;?, p2 : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap void mapBatchForEach(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun mapBatchForEach(map : Array&lt;out Any?&gt;, procedure : Procedure&lt;in V&gt;?, sectionIndex : Int, sectionCount : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newEmpty(p0 : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2&lt;in K, in V&gt;) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValueArguments(vararg keyValues : Pair&lt;out K, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(key : K?, value : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(keys : Iterable&lt;out K&gt;) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.AbstractMutableMap com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.2 void value(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K, value : V?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry java.lang.Object access$300(com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : ConcurrentHashMap.Entry) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry java.lang.Object access$400(com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$400(x0 : ConcurrentHashMap.Entry) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt; getNext()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getNext() : ConcurrentHashMap.Entry&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.EntryIterator EntryIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun EntryIterator()&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.EntryIterator EntryIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap, com.gs.collections.impl.map.mutable.ConcurrentHashMap.1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun EntryIterator(x0 : ConcurrentHashMap, x1 : ConcurrentHashMap.1?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.EntrySet boolean remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.HashIterator HashIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun HashIterator()&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.HashIterator com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt; nextEntry()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextEntry() : ConcurrentHashMap.Entry&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.KeyIterator KeyIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun KeyIterator()&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.KeyIterator KeyIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap, com.gs.collections.impl.map.mutable.ConcurrentHashMap.1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun KeyIterator(x0 : ConcurrentHashMap, x1 : ConcurrentHashMap.1?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.KeySet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(o : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.KeySet java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.KeySet boolean remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(o : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.ValueIterator ValueIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ValueIterator()&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.ValueIterator ValueIterator(com.gs.collections.impl.map.mutable.ConcurrentHashMap, com.gs.collections.impl.map.mutable.ConcurrentHashMap.1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ValueIterator(x0 : ConcurrentHashMap, x1 : ConcurrentHashMap.1?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap.Values java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void access$1000(com.gs.collections.impl.map.mutable.ConcurrentHashMap, com.gs.collections.api.block.procedure.Procedure, java.util.concurrent.atomic.AtomicReferenceArray, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$1000(x0 : ConcurrentHashMap, x1 : Procedure?, x2 : AtomicReferenceArray?, x3 : Int, x4 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap int access$1100(com.gs.collections.impl.map.mutable.ConcurrentHashMap)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$1100(x0 : ConcurrentHashMap) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.util.concurrent.atomic.AtomicReferenceArray access$1200(com.gs.collections.impl.map.mutable.ConcurrentHashMap)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$1200(x0 : ConcurrentHashMap) : AtomicReferenceArray?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.lang.Object access$1300()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$1300() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry access$1700(com.gs.collections.impl.map.mutable.ConcurrentHashMap, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$1700(x0 : ConcurrentHashMap, x1 : Any) : ConcurrentHashMap.Entry?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void access$500(com.gs.collections.impl.map.mutable.ConcurrentHashMap, java.util.concurrent.atomic.AtomicReferenceArray, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$500(x0 : ConcurrentHashMap, x1 : AtomicReferenceArray?, x2 : Int, x3 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void access$900(com.gs.collections.impl.map.mutable.ConcurrentHashMap, com.gs.collections.api.block.procedure.Procedure2, java.util.concurrent.atomic.AtomicReferenceArray, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$900(x0 : ConcurrentHashMap, x1 : Procedure2?, x2 : AtomicReferenceArray?, x3 : Int, x4 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; collectKeysAndValues(java.util.Collection&lt;E&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; collectKeysAndValues(collection : Collection&lt;E&gt;, keyFunction : Function&lt;in E, out K&gt;?, valueFunction : Function&lt;in E, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap boolean containsKey(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsKey(key : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt; createReplacementChainForRemoval(com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt;, com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createReplacementChainForRemoval(original : ConcurrentHashMap.Entry&lt;K, V&gt;?, toRemove : ConcurrentHashMap.Entry&lt;K, V&gt;?) : ConcurrentHashMap.Entry&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt; getEntry(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getEntry(key : Any) : ConcurrentHashMap.Entry&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V getIfAbsent(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsent(key : K, function : Function0&lt;out V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V getIfAbsentPut(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsentPut(key : K, factory : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V getIfAbsentPut(K, com.gs.collections.api.block.function.Function&lt;? super K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsentPut(key : K, factory : Function&lt;in K, out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V getIfAbsentPutWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentPutWith(key : K, function : Function&lt;in P, out V&gt;?, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V getIfAbsentWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentWith(key : K, function : Function&lt;in P, out V&gt;, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap int hash(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun hash(key : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt; helpWithResize(java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun helpWithResize(currentArray : AtomicReferenceArray&lt;Any?&gt;, index : Int) : AtomicReferenceArray&lt;Any?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt; helpWithResizeWhileCurrentIndex(java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun helpWithResizeWhileCurrentIndex(currentArray : AtomicReferenceArray&lt;Any?&gt;, index : Int) : AtomicReferenceArray&lt;Any?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap A ifPresentApply(K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A&gt; ifPresentApply(key : K, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newEmpty(capacity : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; newMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap() : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; newMap(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(newSize : Int) : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;NK,NV&gt; newMap(java.util.Map&lt;NK,NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; newMap(map : Map&lt;NK, NV&gt;) : ConcurrentHashMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap boolean nullSafeEquals(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nullSafeEquals(v : Any?, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void parallelForEachKeyValue(java.util.List&lt;com.gs.collections.api.block.procedure.Procedure2&lt;K,V&gt;&gt;, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun parallelForEachKeyValue(blocks : List&lt;Procedure2&lt;K, V&gt;?&gt;, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void parallelForEachValue(java.util.List&lt;com.gs.collections.api.block.procedure.Procedure&lt;V&gt;&gt;, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun parallelForEachValue(blocks : List&lt;Procedure&lt;V&gt;?&gt;, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V put(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun put(key : K, value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putAll(map : Map&lt;out K, out V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void putAllInParallel(java.util.Map&lt;K,V&gt;, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putAllInParallel(map : Map&lt;K, V&gt;, chunks : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V putIfAbsent(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putIfAbsent(key : K, value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V putIfAbsentGetIfPresent(K, com.gs.collections.api.block.function.Function2&lt;K,V,K&gt;, com.gs.collections.api.block.function.Function3&lt;P1,P2,K,V&gt;, P1, P2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P1, P2&gt; putIfAbsentGetIfPresent(key : K, keyTransformer : Function2&lt;K, V, K&gt;?, factory : Function3&lt;P1, P2, K, V&gt;?, param1 : P1?, param2 : P2?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(key : Any) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap boolean remove(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(key : Any, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V removeKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeKey(key : K) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void resize(java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun resize(oldTable : AtomicReferenceArray&lt;Any?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void resize(java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun resize(oldTable : AtomicReferenceArray&lt;Any?&gt;, newSize : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V slowGet(java.lang.Object, int, int, java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun slowGet(key : Any?, hash : Int, index : Int, currentArray : AtomicReferenceArray&lt;Any?&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V slowPut(K, V, int, java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun slowPut(key : K?, value : V?, hash : Int, currentArray : AtomicReferenceArray&lt;Any?&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap V slowRemove(java.lang.Object, int, java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun slowRemove(key : Any?, hash : Int, currentArray : AtomicReferenceArray&lt;Any?&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void transfer(java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;, java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun transfer(src : AtomicReferenceArray&lt;Any?&gt;, dest : AtomicReferenceArray&lt;Any?&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void unconditionalCopy(java.util.concurrent.atomic.AtomicReferenceArray&lt;java.lang.Object&gt;, com.gs.collections.impl.map.mutable.ConcurrentHashMap.Entry&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun unconditionalCopy(dest : AtomicReferenceArray&lt;Any?&gt;, toCopyEntry : ConcurrentHashMap.Entry&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap withAllKeyValueArguments(com.gs.collections.api.tuple.Pair[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValueArguments(x0 : Array&lt;out Pair?&gt;?) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; withAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValueArguments(vararg keyValues : Pair&lt;out K, out V&gt;?) : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap withAllKeyValues(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(x0 : Iterable) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; withAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap withKeyValue(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(x0 : Any?, x1 : Any?) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(key : K?, value : V?) : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap withoutAllKeys(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(x0 : Iterable) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; withoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(keys : Iterable&lt;out K&gt;) : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.api.map.MutableMap withoutKey(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(x0 : Any?) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap com.gs.collections.impl.map.mutable.ConcurrentHashMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : ConcurrentHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentHashMap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap.SafeEntrySetAdapter.1 java.lang.Object next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap.SafeEntrySetAdapter.1 java.util.Map.Entry&lt;K,V&gt; next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : MutableMap.MutableEntry&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap.SafeEntrySetAdapter java.util.Set access$100(com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap.SafeEntrySetAdapter)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ConcurrentMutableHashMap.SafeEntrySetAdapter) : MutableSet?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap.SafeEntrySetAdapter java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; collectKeysAndValues(java.util.Collection&lt;E&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; collectKeysAndValues(collection : Collection&lt;E&gt;, keyFunction : Function&lt;in E, out K&gt;?, valueFunction : Function&lt;in E, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap V getIfAbsent(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsent(p0 : K, p1 : Function0&lt;out V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap V getIfAbsentPut(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsentPut(p0 : K, p1 : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap V getIfAbsentPutWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentPutWith(p0 : K, p1 : Function&lt;in P, out V&gt;?, p2 : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap V getIfAbsentWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentWith(p0 : K, p1 : Function&lt;in P, out V&gt;, p2 : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap A ifPresentApply(K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A&gt; ifPresentApply(key : K, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newEmpty(capacity : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;NK,NV&gt; newMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; newMap() : ConcurrentMutableHashMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;NK,NV&gt; newMap(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; newMap(initialCapacity : Int) : ConcurrentMutableHashMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;NK,NV&gt; newMap(int, float, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; newMap(initialCapacity : Int, loadFactor : Float, concurrencyLevel : Int) : ConcurrentMutableHashMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;NK,NV&gt; newMap(java.util.Map&lt;NK,NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; newMap(map : Map&lt;NK, NV&gt;?) : ConcurrentMutableHashMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap withAllKeyValueArguments(com.gs.collections.api.tuple.Pair[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValueArguments(x0 : Array&lt;out Pair?&gt;?) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;K,V&gt; withAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValueArguments(vararg keyValues : Pair&lt;out K, out V&gt;?) : ConcurrentMutableHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap withAllKeyValues(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(x0 : Iterable) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;K,V&gt; withAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : ConcurrentMutableHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap withKeyValue(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(x0 : Any?, x1 : Any?) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(key : K?, value : V?) : ConcurrentMutableHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap withoutAllKeys(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(x0 : Iterable) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;K,V&gt; withoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(keys : Iterable&lt;out K&gt;) : ConcurrentMutableHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.api.map.MutableMap withoutKey(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(x0 : Any?) : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap com.gs.collections.impl.map.mutable.ConcurrentMutableHashMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : ConcurrentMutableHashMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter MapAdapter(java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun MapAdapter(newDelegate : Map&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter com.gs.collections.api.map.MutableMap&lt;K,V&gt; adapt(java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; adapt(map : Map&lt;K, V&gt;) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter com.gs.collections.api.map.MutableMap&lt;K,V&gt; collectKeysAndValues(java.util.Collection&lt;E&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; collectKeysAndValues(collection : Collection&lt;E&gt;, keyFunction : Function&lt;in E, out K&gt;?, valueFunction : Function&lt;in E, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MapAdapter com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newEmpty(capacity : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key : K?, value : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key : K?, value : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.MutableMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap SynchronizedMutableMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableMap(newMap : MutableMap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap SynchronizedMutableMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableMap(newMap : MutableMap&lt;K, V&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.RichIterable&lt;com.gs.collections.api.tuple.Pair&lt;K,V&gt;&gt; keyValuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keyValuesView() : RichIterable&lt;Pair&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.impl.map.mutable.SynchronizedMutableMap&lt;K,V&gt; of(M)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, M : Map&lt;K, V&gt;?&gt; of(map : M) : SynchronizedMutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValueArguments(vararg keyValuePairs : Pair&lt;out K, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withKeyValue(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeyValue(key : K?, value : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAllKeys(keys : Iterable&lt;out K&gt;) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.SynchronizedMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; withoutKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutKey(key : K?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super java.util.Map.Entry&lt;K,V&gt;&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in Map.Entry&lt;K, V&gt;?&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean chainContainsEntry(java.lang.Object[], java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainContainsEntry(chain : Array&lt;out Any?&gt;, key : Any?, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet void chainedForEachEntry(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure&lt;? super java.util.Map.Entry&lt;K,V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachEntry(chain : Array&lt;out Any?&gt;, procedure : Procedure&lt;in Map.Entry&lt;K, V&gt;?&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean containsEntry(java.util.Map.Entry&lt;?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsEntry(entry : Map.Entry&lt;*, *&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super java.util.Map.Entry&lt;K,V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in Map.Entry&lt;K, V&gt;?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet void readObject(java.io.ObjectInputStream)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readObject(in : ObjectInputStream) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(e : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean removeFromChain(java.lang.Object[], java.lang.Object, java.lang.Object, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChain(chain : Array&lt;out Any?&gt;, key : Any?, value : Any?, index : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySet T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(result : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySetIterator java.lang.Object next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySetIterator java.util.Map.Entry&lt;K,V&gt; next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : MutableMap.MutableEntry&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.EntrySetIterator java.util.Map.Entry&lt;K,V&gt; nextFromChain()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextFromChain() : MutableMap.MutableEntry&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in K&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet void chainedAddToSet(java.lang.Object[], com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedAddToSet(chain : Array&lt;out Any?&gt;, replace : UnifiedSet&lt;K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet void putIfFound(java.lang.Object, java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putIfFound(key : Any?, other : MutableMap&lt;K, V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet void putIfFoundFromChain(java.lang.Object[], java.lang.Object, java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putIfFoundFromChain(chain : Array&lt;out Any?&gt;, key : Any?, other : MutableMap&lt;K, V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(result : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySet java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySetIterator K next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.KeySetIterator K nextFromChain()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextFromChain() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.PositionalIterator void removeLastFromChain(java.lang.Object[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLastFromChain(chain : Array&lt;out Any?&gt;, tableIndex : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in V&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection void chainedAddToList(java.lang.Object[], com.gs.collections.impl.list.mutable.FastList&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedAddToList(chain : Array&lt;out Any?&gt;, replace : FastList&lt;V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection boolean remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(result : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.ValuesCollection java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.WeakBoundEntry boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap.WeakBoundEntry V setValue(V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun setValue(value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap UnifiedMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedMap(map : Map&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap UnifiedMap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedMap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.lang.Object access$000(com.gs.collections.impl.map.mutable.UnifiedMap, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : UnifiedMap, x1 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void access$100(com.gs.collections.impl.map.mutable.UnifiedMap, java.lang.Object[], com.gs.collections.api.block.procedure.Procedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : UnifiedMap, x1 : Array&lt;out Any?&gt;, x2 : Procedure?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.lang.Object access$200(com.gs.collections.impl.map.mutable.UnifiedMap, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : UnifiedMap, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void access$400(com.gs.collections.impl.map.mutable.UnifiedMap, java.lang.Object[], int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$400(x0 : UnifiedMap, x1 : Array&lt;out Any?&gt;, x2 : Int, x3 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in V&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap boolean chainContainsKey(java.lang.Object[], java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainContainsKey(chain : Array&lt;out Any?&gt;, key : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap boolean chainedContainsValue(java.lang.Object[], java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedContainsValue(chain : Array&lt;out Any?&gt;, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void chainedForEachEntry(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachEntry(chain : Array&lt;out Any?&gt;, procedure : Procedure2&lt;in K, in V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void chainedForEachKey(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachKey(chain : Array&lt;out Any?&gt;, procedure : Procedure&lt;in K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V chainedGetIfAbsentPut(java.lang.Object, int, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedGetIfAbsentPut(realKey : Any?, index : Int, function : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap int chainedHashCode(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedHashCode(chain : Array&lt;out Any?&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V chainedPut(java.lang.Object, int, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedPut(realKey : Any?, index : Int, value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.api.map.MutableMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; collectKeysAndValues(java.util.Collection&lt;E&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; collectKeysAndValues(collection : Collection&lt;E&gt;, keyFunction : Function&lt;in E, out K&gt;?, valueFunction : Function&lt;in E, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void copyChain(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyChain(chain : Array&lt;out Any?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void copyMap(com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyMap(unifiedMap : UnifiedMap&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.util.Set&lt;? extends java.util.Map.Entry&lt;? extends K,? extends V&gt;&gt; getEntrySetFrom(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getEntrySetFrom(map : Map&lt;out K, out V&gt;) : MutableSet&lt;out Map.Entry&lt;out K, out V&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V getFromChain(java.lang.Object[], java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFromChain(chain : Array&lt;out Any?&gt;, key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V getIfAbsentPut(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsentPut(key : K, function : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap int index(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun index(key : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty(capacity : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap() : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newMap(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(size : Int) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newMap(int, float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(size : Int, loadFactor : Float) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(map : Map&lt;out K, out V&gt;) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newMapWith(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(vararg pairs : Pair&lt;K, V&gt;) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newWithKeysValues(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(key : K?, value : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newWithKeysValues(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newWithKeysValues(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; newWithKeysValues(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap K nonSentinel(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nonSentinel(key : Any?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap boolean nullSafeEquals(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nullSafeEquals(value : Any?, other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void overwriteWithLastElementFromChain(java.lang.Object[], int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun overwriteWithLastElementFromChain(chain : Array&lt;out Any?&gt;, index : Int, i : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V put(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun put(key : K?, value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void putAll(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putAll(map : Map&lt;out K, out V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V removeFromChain(java.lang.Object[], java.lang.Object, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChain(chain : Array&lt;out Any?&gt;, key : Any?, index : Int) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap V removeKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeKey(key : K?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.lang.Object toSentinelIfNull(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSentinelIfNull(key : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; withKeysValues(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key : K?, value : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; withKeysValues(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; withKeysValues(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap com.gs.collections.impl.map.mutable.UnifiedMap&lt;K,V&gt; withKeysValues(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : UnifiedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnifiedMap void writeExternalChain(java.io.ObjectOutput, java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternalChain(out : ObjectOutput?, chain : Array&lt;out Any?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap UnmodifiableMutableMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableMutableMap(map : MutableMap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap com.gs.collections.api.map.MutableMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap boolean isAbsent(V, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isAbsent(result : V?, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap com.gs.collections.impl.map.mutable.UnmodifiableMutableMap&lt;K,V&gt; of(M)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, M : Map&lt;K, V&gt;?&gt; of(map : M) : UnmodifiableMutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.mutable.UnmodifiableMutableMap com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap java.util.SortedMap&lt;K,V&gt; castToSortedMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun castToSortedMap() : SortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : ImmutableSortedMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.SortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : SortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;R,V&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; groupBy(function : Function&lt;in V, out R&gt;?) : ImmutableListMultimap&lt;R, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.multimap.list.ListMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;R,V&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super V,? extends java.lang.Iterable&lt;R&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; groupByEach(function : Function&lt;in V, out Iterable&lt;R&gt;?&gt;?) : ImmutableListMultimap&lt;R, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.multimap.list.ListMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; newWithAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAllKeyValueArguments(vararg keyValuePairs : Pair&lt;out K, out V&gt;) : ImmutableSortedMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; newWithAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : ImmutableSortedMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; newWithoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAllKeys(keys : Iterable&lt;out K&gt;) : ImmutableSortedMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.SortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : SortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.SortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : SortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; toSortedMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedMap() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.AbstractImmutableSortedMap com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : ImmutableSortedMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.sorted.SortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : SortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap java.util.Comparator&lt;? super K&gt; comparator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun comparator() : Comparator&lt;in K&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap V getIfAbsent(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsent(key : K, function : Function0&lt;out V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap V getIfAbsentWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentWith(key : K, function : Function&lt;in P, out V&gt;, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap A ifPresentApply(K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A&gt; ifPresentApply(key : K, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap java.lang.Object readResolve()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readResolve() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.sorted.SortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : SortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap com.gs.collections.api.map.sorted.SortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : SortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableEmptySortedMap java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of() : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; of(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(comparator : Comparator&lt;in K&gt;?) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; ofSortedMap(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; ofSortedMap(map : SortedMap&lt;K, V&gt;) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with() : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; with(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(comparator : Comparator&lt;in K&gt;?) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; withSortedMap(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; withSortedMap(map : SortedMap&lt;K, V&gt;) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableTreeMap java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableTreeMap com.gs.collections.api.map.sorted.ImmutableSortedMap&lt;K,V&gt; newMap(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(sortedMap : SortedMap&lt;K, V&gt;?) : ImmutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.immutable.ImmutableTreeMap java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; collectKeysAndValues(java.util.Collection&lt;E&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; collectKeysAndValues(collection : Collection&lt;E&gt;, keyFunction : Function&lt;in E, out K&gt;?, valueFunction : Function&lt;in E, out V&gt;?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;?) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.list.ListIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.AbstractMutableSortedMap com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key : K?, value : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(comparator : Comparator&lt;in K&gt;?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(java.util.Comparator&lt;? super K&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(comparator : Comparator&lt;in K&gt;?, key : K?, value : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(java.util.Comparator&lt;? super K&gt;, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(java.util.Comparator&lt;? super K&gt;, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; of(java.util.Comparator&lt;? super K&gt;, K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; ofSortedMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; ofSortedMap(map : Map&lt;out K, out V&gt;?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key : K?, value : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(comparator : Comparator&lt;in K&gt;?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(java.util.Comparator&lt;? super K&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(comparator : Comparator&lt;in K&gt;?, key : K?, value : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(java.util.Comparator&lt;? super K&gt;, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(java.util.Comparator&lt;? super K&gt;, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(java.util.Comparator&lt;? super K&gt;, K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.MutableSortedMapFactoryImpl com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; withSortedMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; withSortedMap(map : Map&lt;out K, out V&gt;?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter SortedMapAdapter(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SortedMapAdapter(newDelegate : SortedMap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; adapt(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; adapt(map : SortedMap&lt;K, V&gt;) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.set.MutableSet&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.util.Set entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.util.SortedMap headMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.set.MutableSet&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.util.Set keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(fromKey : K?, toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.util.SortedMap subMap(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(x0 : Any?, x1 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(fromKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.util.SortedMap tailMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.collection.MutableCollection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter java.util.Collection values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SortedMapAdapter com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg pairs : Pair&lt;K, V&gt;) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap SynchronizedSortedMap(com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedSortedMap(newMap : MutableSortedMap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap SynchronizedSortedMap(com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedSortedMap(newMap : MutableSortedMap&lt;K, V&gt;, lock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.set.MutableSet&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.util.Set entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.util.SortedMap headMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.set.MutableSet&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.util.Set keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap&lt;K,V&gt; of(M)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, M : SortedMap&lt;K, V&gt;?&gt; of(map : M) : SynchronizedSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap&lt;K,V&gt; of(M, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, M : SortedMap&lt;K, V&gt;?&gt; of(map : M, lock : Any?) : SynchronizedSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(fromKey : K?, toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(x0 : Any?, x1 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(fromKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.util.SortedMap tailMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.collection.MutableCollection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap java.util.Collection values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.SynchronizedSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; with(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg pairs : Pair&lt;K, V&gt;?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap TreeSortedMap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun TreeSortedMap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.map.sorted.MutableSortedMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.set.MutableSet&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.util.Set entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.util.SortedMap headMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.set.MutableSet&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.util.Set keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap() : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMap(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(comparator : Comparator&lt;in K&gt;?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMap(java.util.Comparator&lt;? super K&gt;, java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(comparator : Comparator&lt;in K&gt;?, map : Map&lt;out K, out V&gt;?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMap(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(map : Map&lt;out K, out V&gt;?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(key : K?, value : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(java.util.Comparator&lt;? super K&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(comparator : Comparator&lt;in K&gt;?, key : K?, value : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(java.util.Comparator&lt;? super K&gt;, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(java.util.Comparator&lt;? super K&gt;, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(java.util.Comparator&lt;? super K&gt;, K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(comparator : Comparator&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(java.util.Comparator&lt;? super K&gt;, com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(comparator : Comparator&lt;in K&gt;?, vararg pairs : Pair&lt;K, V&gt;) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; newMapWith(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(vararg pairs : Pair&lt;K, V&gt;) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(fromKey : K?, toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(x0 : Any?, x1 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(fromKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.util.SortedMap tailMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.collection.MutableCollection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap java.util.Collection values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; with(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(key : K?, value : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; with(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; with(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; with(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.api.map.sorted.MutableSortedMap with(com.gs.collections.api.tuple.Pair[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Array&lt;out Pair?&gt;) : MutableSortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap com.gs.collections.impl.map.sorted.mutable.TreeSortedMap&lt;K,V&gt; with(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg pairs : Pair&lt;K, V&gt;) : TreeSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.TreeSortedMap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableSortedMap UnmodifiableSortedMap(java.util.SortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableSortedMap(delegate : SortedMap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableSortedMap java.util.SortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(toKey : K?) : SortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableSortedMap java.util.SortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(fromKey : K?, toKey : K?) : SortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableSortedMap java.util.SortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(fromKey : K?) : SortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap UnmodifiableTreeMap(com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableTreeMap(map : MutableSortedMap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.set.MutableSet&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.Set entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; headMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.SortedMap headMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap boolean isAbsent(V, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isAbsent(result : V?, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.set.MutableSet&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.Set keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.RichIterable&lt;K&gt; keysView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keysView() : RichIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap&lt;K,V&gt; of(M)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, M : SortedMap&lt;K, V&gt;?&gt; of(map : M) : UnmodifiableTreeMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; subMap(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(fromKey : K?, toKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.SortedMap subMap(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subMap(x0 : Any?, x1 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.map.sorted.MutableSortedMap&lt;K,V&gt; tailMap(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(fromKey : K?) : MutableSortedMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.SortedMap tailMap(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailMap(x0 : Any?) : SortedMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.collection.MutableCollection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap java.util.Collection values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.sorted.mutable.UnmodifiableTreeMap com.gs.collections.api.RichIterable&lt;V&gt; valuesView()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valuesView() : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K2,V2&gt; collect(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K2, V2&gt; collect(p0 : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;) : ImmutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.MapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable collect(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(function : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(x0 : Function2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate2&lt;in K, in V&gt;) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy V getIfAbsent(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsent(key : K, function : Function0&lt;out V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy V getIfAbsentWith(K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; getIfAbsentWith(key : K, function : Function&lt;in P, out V&gt;, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy A ifPresentApply(K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A&gt; ifPresentApply(key : K, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : MapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate2) : UnsortedMapIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEmptyMapWithHashingStrategy java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEntryWithHashingStrategy boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableEntryWithHashingStrategy com.gs.collections.impl.map.strategy.immutable.ImmutableEntryWithHashingStrategy&lt;T1,T2&gt; of(T1, T2, com.gs.collections.api.block.HashingStrategy&lt;? super T1&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; of(key : T1?, value : T2?, hashingStrategy : HashingStrategy&lt;in T1&gt;?) : ImmutableEntryWithHashingStrategy&lt;T1, T2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(hashingStrategy : HashingStrategy&lt;in K&gt;?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; ofMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; ofMap(map : MutableMap&lt;K, V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(hashingStrategy : HashingStrategy&lt;in K&gt;?) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; withMap(com.gs.collections.api.map.MutableMap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; withMap(map : MutableMap&lt;K, V&gt;) : ImmutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy ImmutableUnifiedMapWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableUnifiedMapWithHashingStrategy(hashingStrategy : HashingStrategy&lt;in K&gt;?, vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy ImmutableUnifiedMapWithHashingStrategy(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableUnifiedMapWithHashingStrategy(delegate : UnifiedMapWithHashingStrategy&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in V&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,R&gt; collectValues(com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R&gt; collectValues(p0 : Function2&lt;in K, in V, out R&gt;) : ImmutableMap&lt;K, R&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.MapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable collectValues(com.gs.collections.api.block.function.Function2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectValues(p0 : Function2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; newWithAllKeyValueArguments(com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAllKeyValueArguments(vararg keyValuePairs : Pair&lt;out K, out V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; newWithAllKeyValues(java.lang.Iterable&lt;? extends com.gs.collections.api.tuple.Pair&lt;? extends K,? extends V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAllKeyValues(keyValues : Iterable&lt;out Pair&lt;out K, out V&gt;?&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; newWithoutAllKeys(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAllKeys(keys : Iterable&lt;out K&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; reject(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.MapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable reject(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.ImmutableMap&lt;K,V&gt; select(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2&lt;in K, in V&gt;) : ImmutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.MapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : MapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy com.gs.collections.api.map.UnsortedMapIterable select(com.gs.collections.api.block.predicate.Predicate2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate2) : UnsortedMapIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.immutable.ImmutableUnifiedMapWithHashingStrategy java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(hashingStrategy : HashingStrategy&lt;in K&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(hashingStrategy : HashingStrategy&lt;in K&gt;?, key : K?, value : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; of(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(hashingStrategy : HashingStrategy&lt;in K&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(hashingStrategy : HashingStrategy&lt;in K&gt;?, key : K?, value : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.MutableHashingStrategyMapFactoryImpl com.gs.collections.api.map.MutableMap&lt;K,V&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; with(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super java.util.Map.Entry&lt;K,V&gt;&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in Map.Entry&lt;K, V&gt;?&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean chainContainsEntry(java.lang.Object[], K, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainContainsEntry(chain : Array&lt;out Any?&gt;, key : K?, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet void chainedForEachEntry(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure&lt;? super java.util.Map.Entry&lt;K,V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachEntry(chain : Array&lt;out Any?&gt;, procedure : Procedure&lt;in Map.Entry&lt;K, V&gt;?&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean containsEntry(java.util.Map.Entry&lt;?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsEntry(entry : Map.Entry&lt;*, *&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super java.util.Map.Entry&lt;K,V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in Map.Entry&lt;K, V&gt;?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet java.util.Iterator&lt;java.util.Map.Entry&lt;K,V&gt;&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet void readObject(java.io.ObjectInputStream)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readObject(in : ObjectInputStream) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(e : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean removeFromChain(java.lang.Object[], K, java.lang.Object, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChain(chain : Array&lt;out Any?&gt;, key : K?, value : Any?, index : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySet T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(result : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySetIterator java.lang.Object next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySetIterator java.util.Map.Entry&lt;K,V&gt; next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : MutableMap.MutableEntry&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.EntrySetIterator java.util.Map.Entry&lt;K,V&gt; nextFromChain()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextFromChain() : MutableMap.MutableEntry&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in K&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet void chainedAddToSet(java.lang.Object[], com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedAddToSet(chain : Array&lt;out Any?&gt;, replace : UnifiedSetWithHashingStrategy&lt;K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet void putIfFound(java.lang.Object, java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putIfFound(key : Any?, other : MutableMap&lt;K, V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet void putIfFoundFromChain(java.lang.Object[], K, java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putIfFoundFromChain(chain : Array&lt;out Any?&gt;, key : K?, other : MutableMap&lt;K, V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(result : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySet java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySetIterator K next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.KeySetIterator K nextFromChain()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextFromChain() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.PositionalIterator void removeLastFromChain(java.lang.Object[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLastFromChain(chain : Array&lt;out Any?&gt;, tableIndex : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in V&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection void chainedAddToList(java.lang.Object[], com.gs.collections.impl.list.mutable.FastList&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedAddToList(chain : Array&lt;out Any?&gt;, replace : FastList&lt;V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection java.util.Iterator&lt;V&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection boolean remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(result : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.ValuesCollection java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.WeakBoundEntry boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(obj : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy.WeakBoundEntry V setValue(V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun setValue(value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy UnifiedMapWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedMapWithHashingStrategy(hashingStrategy : HashingStrategy&lt;in K&gt;?, map : Map&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy UnifiedMapWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedMapWithHashingStrategy(hashingStrategy : HashingStrategy&lt;in K&gt;?, vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.lang.Object access$000(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : UnifiedMapWithHashingStrategy, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy boolean access$100(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy, java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : UnifiedMapWithHashingStrategy, x1 : Any?, x2 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.api.block.HashingStrategy access$200(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : UnifiedMapWithHashingStrategy) : HashingStrategy?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void access$300(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy, java.lang.Object[], com.gs.collections.api.block.procedure.Procedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : UnifiedMapWithHashingStrategy, x1 : Array&lt;out Any?&gt;, x2 : Procedure?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void access$500(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy, java.lang.Object[], int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$500(x0 : UnifiedMapWithHashingStrategy, x1 : Array&lt;out Any?&gt;, x2 : Int, x3 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in V&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy boolean chainContainsKey(java.lang.Object[], K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainContainsKey(chain : Array&lt;out Any?&gt;, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy boolean chainedContainsValue(java.lang.Object[], java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedContainsValue(chain : Array&lt;out Any?&gt;, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void chainedForEachEntry(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachEntry(chain : Array&lt;out Any?&gt;, procedure : Procedure2&lt;in K, in V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void chainedForEachKey(java.lang.Object[], com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachKey(chain : Array&lt;out Any?&gt;, procedure : Procedure&lt;in K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V chainedGetIfAbsentPut(K, int, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedGetIfAbsentPut(key : K?, index : Int, function : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy int chainedHashCode(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedHashCode(chain : Array&lt;out Any?&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V chainedPut(K, int, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedPut(key : K?, index : Int, value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.api.map.MutableMap clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableMap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.api.map.MutableMap&lt;K,V&gt; collectKeysAndValues(java.util.Collection&lt;E&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super E,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; collectKeysAndValues(collection : Collection&lt;E&gt;, keyFunction : Function&lt;in E, out K&gt;?, valueFunction : Function&lt;in E, out V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void copyChain(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyChain(chain : Array&lt;out Any?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void copyMap(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyMap(unifiedMap : UnifiedMapWithHashingStrategy&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.util.Set&lt;java.util.Map.Entry&lt;K,V&gt;&gt; entrySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun entrySet() : MutableSet&lt;Map.Entry&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void forEachKey(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachKey(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void forEachValue(com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachValue(p0 : Procedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super V,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in V, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V get(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.util.Set&lt;? extends java.util.Map.Entry&lt;? extends K,? extends V&gt;&gt; getEntrySetFrom(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getEntrySetFrom(map : Map&lt;out K, out V&gt;) : MutableSet&lt;out Map.Entry&lt;out K, out V&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V getFromChain(java.lang.Object[], K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFromChain(chain : Array&lt;out Any?&gt;, key : K?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V getIfAbsentPut(K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getIfAbsentPut(key : K, function : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.util.Set&lt;K&gt; keySet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun keySet() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.api.map.MutableMap&lt;K,V&gt; newEmpty(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty(capacity : Int) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newMap(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(hashingStrategy : HashingStrategy&lt;in K&gt;?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newMap(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(hashingStrategy : HashingStrategy&lt;in K&gt;?, size : Int) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newMap(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, int, float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(hashingStrategy : HashingStrategy&lt;in K&gt;?, size : Int, loadFactor : Float) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newMap(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(hashingStrategy : HashingStrategy&lt;in K&gt;?, map : Map&lt;out K, out V&gt;) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newMap(com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMap(map : UnifiedMapWithHashingStrategy&lt;K, V&gt;) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newMapWith(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMapWith(hashingStrategy : HashingStrategy&lt;in K&gt;?, vararg pairs : Pair&lt;K, V&gt;) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newWithKeysValues(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(hashingStrategy : HashingStrategy&lt;in K&gt;?, key : K?, value : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newWithKeysValues(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newWithKeysValues(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; newWithKeysValues(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newWithKeysValues(hashingStrategy : HashingStrategy&lt;in K&gt;?, key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy K nonSentinel(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nonSentinel(key : Any?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy boolean nullSafeEquals(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nullSafeEquals(value : Any?, other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void overwriteWithLastElementFromChain(java.lang.Object[], int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun overwriteWithLastElementFromChain(chain : Array&lt;out Any?&gt;, index : Int, i : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V put(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun put(key : K?, value : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void putAll(java.util.Map&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putAll(map : Map&lt;out K, out V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V remove(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun remove(key : Any?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V removeFromChain(java.lang.Object[], K, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChain(chain : Array&lt;out Any?&gt;, key : K?, index : Int) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy V removeKey(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeKey(key : K?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.lang.Object toSentinelIfNull(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSentinelIfNull(key : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy java.util.Collection&lt;V&gt; values()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun values() : MutableCollection&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; withKeysValues(K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key : K?, value : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; withKeysValues(K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; withKeysValues(K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy&lt;K,V&gt; withKeysValues(K, V, K, V, K, V, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withKeysValues(key1 : K?, value1 : V?, key2 : K?, value2 : V?, key3 : K?, value3 : V?, key4 : K?, value4 : V?) : UnifiedMapWithHashingStrategy&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.map.strategy.mutable.UnifiedMapWithHashingStrategy void writeExternalChain(java.io.ObjectOutput, java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternalChain(out : ObjectOutput?, chain : Array&lt;out Any?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractImmutableMultimap.1CountProcedure void value(C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(collection : C) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractImmutableMultimap.1CountProcedure void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractImmutableMultimap AbstractImmutableMultimap(com.gs.collections.api.map.MutableMap&lt;K,C&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun AbstractImmutableMultimap(map : MutableMap&lt;K, C&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractImmutableMultimap com.gs.collections.api.multimap.ImmutableMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.10 void value(K, C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, iterable : C) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.10 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.1 com.gs.collections.api.RichIterable&lt;?&gt; valueOf(com.gs.collections.impl.multimap.AbstractMultimap&lt;?,?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(multimap : AbstractMultimap&lt;*, *, *&gt;) : RichIterable&lt;*&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.1 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.2 boolean accept(C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(collection : C) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.2 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.3 com.gs.collections.api.RichIterable&lt;V&gt; valueOf(C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(multiValue : C) : RichIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.3 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.4 void value(K, C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, value : C) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.4 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.5 com.gs.collections.api.tuple.Pair&lt;K,com.gs.collections.api.RichIterable&lt;V&gt;&gt; valueOf(com.gs.collections.api.tuple.Pair&lt;K,C&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(pair : Pair&lt;K, C&gt;) : Pair&lt;K, RichIterable&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.5 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.6 java.lang.Iterable&lt;com.gs.collections.api.tuple.Pair&lt;K,V&gt;&gt; valueOf(com.gs.collections.api.tuple.Pair&lt;K,com.gs.collections.api.RichIterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(pair : Pair&lt;K, RichIterable&lt;V&gt;?&gt;) : MutableIterable&lt;Pair&lt;K, V&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.6 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.7 void value(C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(collection : C) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.7 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.9 void value(K, C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, collection : C) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.9 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.KeyValuePairFunction com.gs.collections.api.tuple.Pair&lt;K,V&gt; valueOf(V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(value : V?) : Pair&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap.KeyValuePairFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap C createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : C&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap com.gs.collections.api.block.function.Function&lt;com.gs.collections.impl.multimap.AbstractMultimap&lt;K,V,C&gt;,C&gt; createCollectionBlock()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollectionBlock() : Function&lt;AbstractMultimap&lt;K, V, C&gt;?, C&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMultimap com.gs.collections.api.map.MutableMap&lt;K,R&gt; toMap(com.gs.collections.api.block.function.Function0&lt;R&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;V&gt;?&gt; toMap(collectionFactory : Function0&lt;R&gt;?) : MutableMap&lt;K, R&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap.1 void value(K, C)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, collection : C) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap.1 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap.1PutProcedure boolean access$000(com.gs.collections.impl.multimap.AbstractMutableMultimap.1PutProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : AbstractMutableMultimap.1PutProcedure) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap.1PutProcedure void value(com.gs.collections.api.tuple.Pair&lt;KK,com.gs.collections.api.RichIterable&lt;VV&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : Pair&lt;KK, RichIterable&lt;VV&gt;?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap.1PutProcedure void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap.2PutProcedure boolean access$100(com.gs.collections.impl.multimap.AbstractMutableMultimap.2PutProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : AbstractMutableMultimap.2PutProcedure) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap AbstractMutableMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun AbstractMutableMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap com.gs.collections.api.map.MutableMap&lt;K,C&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, C&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap com.gs.collections.api.map.MutableMap&lt;K,C&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(p0 : Int) : MutableMap&lt;K, C&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap boolean putAll(com.gs.collections.api.multimap.Multimap&lt;KK,VV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;KK : K, VV : V&gt; putAll(multimap : Multimap&lt;KK, VV&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap boolean putAllAbstractMutableMultimap(com.gs.collections.impl.multimap.AbstractMutableMultimap&lt;KK,VV,com.gs.collections.api.collection.MutableCollection&lt;VV&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;KK : K, VV : V&gt; putAllAbstractMutableMultimap(other : AbstractMutableMultimap&lt;KK, VV, MutableCollection&lt;VV&gt;?&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap boolean putAllNotEmpty(K, java.lang.Iterable&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putAllNotEmpty(key : K?, values : Iterable&lt;out V&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap boolean putAllPairs(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun putAllPairs(vararg pairs : Pair&lt;K, V&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap boolean putAllReadOnlyMultimap(com.gs.collections.api.multimap.Multimap&lt;KK,VV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;KK : K, VV : V&gt; putAllReadOnlyMultimap(multimap : Multimap&lt;KK, VV&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap void readValuesFrom(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readValuesFrom(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractMutableMultimap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractSynchronizedPutMultimap com.gs.collections.api.map.MutableMap&lt;K,C&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, C&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.AbstractSynchronizedPutMultimap com.gs.collections.api.map.MutableMap&lt;K,C&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(keyCount : Int) : MutableMap&lt;K, C&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.ImmutableMultimapSerializationProxy com.gs.collections.impl.multimap.AbstractMutableMultimap&lt;K,V,?&gt; createEmptyMutableMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createEmptyMutableMultimap() : AbstractMutableMultimap&lt;K, V, *&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.ImmutableMultimapSerializationProxy void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.ImmutableMultimapSerializationProxy void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap.1 void value(K, com.gs.collections.api.bag.MutableBag&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, bag : MutableBag&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap.1 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap.2 void safeValue(K, com.gs.collections.api.bag.MutableBag&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(key : K?, bag : MutableBag&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap.2 void safeValue(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap HashBagMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun HashBagMultimap(multimap : Multimap&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap HashBagMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun HashBagMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.bag.MutableBag&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.bag.MutableBag&lt;V&gt;&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, MutableBag&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.bag.MutableBag&lt;V&gt;&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(keyCount : Int) : MutableMap&lt;K, MutableBag&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.bag.BagMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.bag.MutableBagMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableBagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.impl.multimap.bag.HashBagMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : HashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.impl.multimap.bag.HashBagMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : HashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.impl.multimap.bag.HashBagMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;) : HashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.impl.multimap.bag.HashBagMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : HashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap com.gs.collections.api.multimap.bag.MutableBagMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.HashBagMultimap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl.ImmutableBagMultimapSerializationProxy.1 void safeValue(K, com.gs.collections.api.bag.ImmutableBag&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(key : K?, bag : ImmutableBag&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl.ImmutableBagMultimapSerializationProxy.1 void safeValue(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun safeValue(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl.ImmutableBagMultimapSerializationProxy void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl.ImmutableBagMultimapSerializationProxy void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl ImmutableBagMultimapImpl(com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.bag.ImmutableBag&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableBagMultimapImpl(map : MutableMap&lt;K, ImmutableBag&lt;V&gt;?&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.bag.BagMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl com.gs.collections.api.multimap.bag.MutableBagMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.ImmutableBagMultimapImpl java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap.1 void value(com.gs.collections.api.tuple.Pair&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(pair : Pair&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap.1 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap.2 void value(K, com.gs.collections.api.bag.MutableBag&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, bag : MutableBag&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap.2 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap SynchronizedPutHashBagMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedPutHashBagMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.bag.MutableBag&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.bag.BagMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : BagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.bag.MutableBagMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableBagMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SynchronizedPutHashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : SynchronizedPutHashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap&lt;K,V&gt; newMultimap(int, float, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(initialCapacity : Int, loadFactor : Float, concurrencyLevel : Int) : SynchronizedPutHashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;?) : SynchronizedPutHashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : SynchronizedPutHashBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.bag.ImmutableBagMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.bag.SynchronizedPutHashBagMultimap com.gs.collections.api.multimap.bag.MutableBagMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableBagMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap.1 void value(K, com.gs.collections.api.list.MutableList&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, list : MutableList&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap.1 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap FastListMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun FastListMultimap(multimap : Multimap&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap FastListMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun FastListMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.list.MutableList&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.list.MutableList&lt;V&gt;&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, MutableList&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.list.MutableList&lt;V&gt;&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(keyCount : Int) : MutableMap&lt;K, MutableList&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.list.ListMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.list.MutableListMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.impl.multimap.list.FastListMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : FastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.impl.multimap.list.FastListMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : FastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.impl.multimap.list.FastListMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;) : FastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.impl.multimap.list.FastListMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : FastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.FastListMultimap com.gs.collections.api.multimap.list.MutableListMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl.ImmutableListMultimapSerializationProxy com.gs.collections.impl.multimap.AbstractMutableMultimap&lt;K,V,com.gs.collections.api.list.MutableList&lt;V&gt;&gt; createEmptyMutableMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createEmptyMutableMultimap() : AbstractMutableMultimap&lt;K, V, MutableList&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl ImmutableListMultimapImpl(com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.list.ImmutableList&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableListMultimapImpl(map : MutableMap&lt;K, ImmutableList&lt;V&gt;?&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.list.ListMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl com.gs.collections.api.multimap.list.MutableListMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.ImmutableListMultimapImpl java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap.1 void value(com.gs.collections.api.tuple.Pair&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(pair : Pair&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap.1 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap.2 void value(K, com.gs.collections.api.list.MutableList&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, list : MutableList&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap.2 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap SynchronizedPutFastListMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedPutFastListMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.list.MutableList&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.list.ListMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.list.MutableListMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableListMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SynchronizedPutFastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : SynchronizedPutFastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap&lt;K,V&gt; newMultimap(int, float, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(initiaCapacity : Int, loadFactor : Float, concurrencyLevel : Int) : SynchronizedPutFastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;?) : SynchronizedPutFastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : SynchronizedPutFastListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.list.ImmutableListMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.list.SynchronizedPutFastListMultimap com.gs.collections.api.multimap.list.MutableListMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableListMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl.ImmutableSetMultimapSerializationProxy com.gs.collections.impl.multimap.AbstractMutableMultimap&lt;K,V,com.gs.collections.api.set.MutableSet&lt;V&gt;&gt; createEmptyMutableMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createEmptyMutableMultimap() : AbstractMutableMultimap&lt;K, V, MutableSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl ImmutableSetMultimapImpl(com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.ImmutableSet&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableSetMultimapImpl(map : MutableMap&lt;K, ImmutableSet&lt;V&gt;?&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.set.SetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl com.gs.collections.api.multimap.set.MutableSetMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.ImmutableSetMultimapImpl java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap.1 void value(com.gs.collections.api.tuple.Pair&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(pair : Pair&lt;K, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap.1 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap.2 void value(K, com.gs.collections.api.set.MutableSet&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, set : MutableSet&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap.2 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap SynchronizedPutUnifiedSetMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedPutUnifiedSetMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.set.MutableSet&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableSet&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.set.MutableSetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.set.SetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SynchronizedPutUnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : SynchronizedPutUnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap&lt;K,V&gt; newMultimap(int, float, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(initiaCapacity : Int, loadFactor : Float, concurrencyLevel : Int) : SynchronizedPutUnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;?) : SynchronizedPutUnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : SynchronizedPutUnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.SynchronizedPutUnifiedSetMultimap com.gs.collections.api.multimap.set.MutableSetMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap.1 void value(K, com.gs.collections.api.set.MutableSet&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, set : MutableSet&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap.1 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap UnifiedSetMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetMultimap(multimap : Multimap&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap UnifiedSetMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.set.MutableSet&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableSet&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.MutableSet&lt;V&gt;&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, MutableSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.MutableSet&lt;V&gt;&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(keyCount : Int) : MutableMap&lt;K, MutableSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.set.MutableSetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.set.SetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.impl.multimap.set.UnifiedSetMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : UnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.impl.multimap.set.UnifiedSetMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : UnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.impl.multimap.set.UnifiedSetMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;) : UnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.impl.multimap.set.UnifiedSetMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : UnifiedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.UnifiedSetMultimap com.gs.collections.api.multimap.set.MutableSetMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl.ImmutableSortedSetMultimapSerializationProxy com.gs.collections.impl.multimap.AbstractMutableMultimap&lt;K,V,com.gs.collections.api.set.sorted.MutableSortedSet&lt;V&gt;&gt; createEmptyMutableMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createEmptyMutableMultimap() : AbstractMutableMultimap&lt;K, V, MutableSortedSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl.ImmutableSortedSetMultimapSerializationProxy void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl.ImmutableSortedSetMultimapSerializationProxy void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl ImmutableSortedSetMultimapImpl(com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableSortedSetMultimapImpl(map : MutableMap&lt;K, ImmutableSortedSet&lt;V&gt;?&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl ImmutableSortedSetMultimapImpl(com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;V&gt;&gt;, java.util.Comparator&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ImmutableSortedSetMultimapImpl(map : MutableMap&lt;K, ImmutableSortedSet&lt;V&gt;?&gt;, comparator : Comparator&lt;in V&gt;?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl java.util.Comparator&lt;? super V&gt; comparator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun comparator() : Comparator&lt;in V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.sortedset.ImmutableSortedSetMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : ImmutableSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.sortedset.SortedSetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SortedSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.sortedset.ImmutableSortedSetMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl com.gs.collections.api.multimap.sortedset.MutableSortedSetMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.ImmutableSortedSetMultimapImpl java.lang.Object writeReplace()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeReplace() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap.1 void value(K, com.gs.collections.api.set.sorted.MutableSortedSet&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, set : MutableSortedSet&lt;V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap.1 void value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap TreeSortedSetMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun TreeSortedSetMultimap(multimap : Multimap&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap TreeSortedSetMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun TreeSortedSetMultimap(vararg pairs : Pair&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.set.sorted.MutableSortedSet&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : MutableSortedSet&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.sorted.MutableSortedSet&lt;V&gt;&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, MutableSortedSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.sorted.MutableSortedSet&lt;V&gt;&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(keyCount : Int) : MutableMap&lt;K, MutableSortedSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.sortedset.MutableSortedSetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSortedSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.sortedset.SortedSetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SortedSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : TreeSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap&lt;K,V&gt; newMultimap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap() : TreeSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : Multimap&lt;out K, out V&gt;) : TreeSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap&lt;K,V&gt; newMultimap(java.util.Comparator&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(comparator : Comparator&lt;in V&gt;?) : TreeSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(vararg pairs : Pair&lt;K, V&gt;) : TreeSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.sortedset.ImmutableSortedSetMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap com.gs.collections.api.multimap.sortedset.MutableSortedSetMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableSortedSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.sorted.TreeSortedSetMultimap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap.1 java.lang.Object value(K, com.gs.collections.api.set.MutableSet&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K?, set : MutableSet&lt;V&gt;) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap.1 java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap UnifiedSetWithHashingStrategyMultimap(com.gs.collections.api.block.HashingStrategy&lt;? super V&gt;, com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetWithHashingStrategyMultimap(hashingStrategy : HashingStrategy&lt;in V&gt;?, multimap : Multimap&lt;out K, out V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap UnifiedSetWithHashingStrategyMultimap(com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetWithHashingStrategyMultimap(multimap : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.RichIterable createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;V&gt; createCollection()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createCollection() : UnifiedSetWithHashingStrategy&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.MutableSet&lt;V&gt;&gt; createMap()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMap() : MutableMap&lt;K, MutableSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.map.MutableMap&lt;K,com.gs.collections.api.set.MutableSet&lt;V&gt;&gt; createMapWithKeyCount(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createMapWithKeyCount(keyCount : Int) : MutableMap&lt;K, MutableSet&lt;V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.Multimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.MutableMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.set.MutableSetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.set.SetMultimap newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : SetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.block.HashingStrategy&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(hashingStrategy : HashingStrategy&lt;in V&gt;?) : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.block.HashingStrategy&lt;? super V&gt;, com.gs.collections.api.multimap.Multimap&lt;? extends K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(hashingStrategy : HashingStrategy&lt;in V&gt;?, multimap : Multimap&lt;out K, out V&gt;) : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt; newMultimap(com.gs.collections.api.block.HashingStrategy&lt;? super V&gt;, com.gs.collections.api.tuple.Pair&lt;K,V&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(hashingStrategy : HashingStrategy&lt;in V&gt;?, vararg pairs : Pair&lt;K, V&gt;?) : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt; newMultimap(com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; newMultimap(multimap : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;) : UnifiedSetWithHashingStrategyMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.ImmutableMultimap toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;K,V&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.MutableMultimap toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap com.gs.collections.api.multimap.set.MutableSetMultimap&lt;K,V&gt; toMutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toMutable() : MutableSetMultimap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.multimap.set.strategy.UnifiedSetWithHashingStrategyMultimap void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.AbstractPredicateBasedCombiner java.util.Collection&lt;T&gt; createResultForCollection(java.lang.Iterable&lt;?&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createResultForCollection(sourceCollection : Iterable&lt;*&gt;?, initialCapacity : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.AbstractPredicateBasedCombiner java.util.Collection&lt;T&gt; initializeResult(java.lang.Iterable&lt;?&gt;, java.util.Collection&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun initializeResult(sourceCollection : Iterable&lt;*&gt;?, targetCollection : Collection&lt;T&gt;?, initialCapacity : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.AbstractProcedureCombiner void combineAll(java.lang.Iterable&lt;BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineAll(thingsToCombine : Iterable&lt;BT&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.AbstractTransformerBasedCombiner java.util.Collection&lt;V&gt; createResultForCollection(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createResultForCollection(sourceCollection : Iterable&lt;T&gt;?, initialCapacity : Int) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.AbstractTransformerBasedCombiner java.util.Collection&lt;V&gt; initializeResult(java.lang.Iterable&lt;T&gt;, java.util.Collection&lt;V&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun initializeResult(sourceIterable : Iterable&lt;T&gt;?, targetCollection : Collection&lt;V&gt;?, initialCapacity : Int) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ArrayProcedureFJTaskRunner.ProcedureExtractor BT valueOf(com.gs.collections.impl.parallel.ArrayProcedureFJTask&lt;T,BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : ArrayProcedureFJTask&lt;T, BT&gt;) : BT?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ArrayProcedureFJTaskRunner.ProcedureExtractor java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ArrayProcedureFJTaskRunner void createAndExecuteTasks(java.util.concurrent.Executor, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createAndExecuteTasks(executor : Executor?, procedureFactory : ProcedureFactory&lt;BT&gt;?, array : Array&lt;out T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ArrayProcedureFJTaskRunner void executeAndCombine(java.util.concurrent.Executor, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun executeAndCombine(executor : Executor?, procedureFactory : ProcedureFactory&lt;BT&gt;?, array : Array&lt;out T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.BatchIterable void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super E&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in E&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.BatchIterable void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in E&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.BatchIterableProcedureFJTaskRunner.ProcedureExtractor BT valueOf(com.gs.collections.impl.parallel.BatchIterableProcedureFJTask&lt;T,BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : BatchIterableProcedureFJTask&lt;T, BT&gt;) : BT?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.BatchIterableProcedureFJTaskRunner.ProcedureExtractor java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectIfProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.CollectIfProcedure&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : CollectIfProcedure&lt;T, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectIfProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectIfProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectIfProcedureFactory com.gs.collections.impl.block.procedure.CollectIfProcedure&lt;T,V&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : CollectIfProcedure&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.CollectProcedure&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedure : CollectProcedure&lt;T, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectProcedureFactory com.gs.collections.impl.block.procedure.CollectProcedure&lt;T,V&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : CollectProcedure&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CollectionsThreadFactory java.lang.Thread newThread(java.lang.Runnable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newThread(r : Runnable?) : Thread&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.Combiner void combineAll(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineAll(p0 : Iterable&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.Combiner void combineOne(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(p0 : T) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.Combiners com.gs.collections.impl.parallel.Combiner&lt;T&gt; passThru()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; passThru() : Combiner&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CountCombiner void combineOne(com.gs.collections.impl.block.procedure.CountProcedure&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedure : CountProcedure&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CountCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CountProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.CountProcedureFactory com.gs.collections.impl.block.procedure.CountProcedure&lt;T&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : CountProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectIfProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.FastListCollectIfProcedure&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : FastListCollectIfProcedure&lt;T, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectIfProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectIfProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectIfProcedureFactory com.gs.collections.impl.block.procedure.FastListCollectIfProcedure&lt;T,V&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : FastListCollectIfProcedure&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.FastListCollectProcedure&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedure : FastListCollectProcedure&lt;T, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListCollectProcedureFactory com.gs.collections.impl.block.procedure.FastListCollectProcedure&lt;T,V&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : FastListCollectProcedure&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListRejectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.FastListRejectProcedure&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : FastListRejectProcedure&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListRejectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListRejectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListRejectProcedureFactory com.gs.collections.impl.block.procedure.FastListRejectProcedure&lt;T&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : FastListRejectProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListSelectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.FastListSelectProcedure&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : FastListSelectProcedure&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListSelectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListSelectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FastListSelectProcedureFactory com.gs.collections.impl.block.procedure.FastListSelectProcedure&lt;T&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : FastListSelectProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FlatCollectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.FlatCollectProcedure&lt;T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : FlatCollectProcedure&lt;T, V&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FlatCollectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FlatCollectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.FlatCollectProcedureFactory com.gs.collections.impl.block.procedure.FlatCollectProcedure&lt;T,V&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : FlatCollectProcedure&lt;T, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner.ObjectIntProcedureExtractor BT valueOf(com.gs.collections.impl.parallel.ObjectIntProcedureFJTask&lt;T,BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : ObjectIntProcedureFJTask&lt;T, BT&gt;) : BT?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner.ObjectIntProcedureExtractor java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner ObjectIntProcedureFJTaskRunner(com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ObjectIntProcedureFJTaskRunner(newCombiner : Combiner&lt;BT&gt;, taskCount : Int)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner java.util.concurrent.CountDownLatch buildCountDownLatch(com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;BT&gt; buildCountDownLatch(newCombiner : Combiner&lt;BT&gt;, taskCount : Int) : CountDownLatch?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner java.util.concurrent.ArrayBlockingQueue&lt;BT&gt; buildQueue(com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;BT&gt; buildQueue(newCombiner : Combiner&lt;BT&gt;, taskCount : Int) : ArrayBlockingQueue&lt;BT&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner void createAndExecuteTasks(java.util.concurrent.Executor, com.gs.collections.impl.parallel.ObjectIntProcedureFactory&lt;BT&gt;, java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createAndExecuteTasks(executor : Executor?, procedureFactory : ObjectIntProcedureFactory&lt;BT&gt;?, list : List&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ObjectIntProcedureFJTaskRunner void executeAndCombine(java.util.concurrent.Executor, com.gs.collections.impl.parallel.ObjectIntProcedureFactory&lt;BT&gt;, java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun executeAndCombine(executor : Executor?, procedureFactory : ObjectIntProcedureFactory&lt;BT&gt;?, list : List&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelArrayIterate void combineSingleProcedure(com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, BT)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; combineSingleProcedure(combiner : Combiner&lt;BT&gt;, procedure : BT?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelArrayIterate void forEach(T[], com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEach(array : Array&lt;out T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate int calculateTaskCount(com.gs.collections.impl.parallel.BatchIterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; calculateTaskCount(batchIterable : BatchIterable&lt;T&gt;, batchSize : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate int calculateTaskCount(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; calculateTaskCount(iterable : Iterable&lt;T&gt;, batchSize : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;V&gt; collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, V&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;, R, int, java.util.concurrent.Executor, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, V&gt;?, target : R?, batchSize : Int, executor : Executor?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;, R, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, V&gt;?, target : R?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;V&gt; collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, V&gt;?, allowReorderedResult : Boolean) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;V&gt; collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, V&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;, R, int, java.util.concurrent.Executor, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, V&gt;?, target : R?, batchSize : Int, executor : Executor?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;, R, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, V&gt;?, target : R?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;V&gt; collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,V&gt;, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, V&gt;?, allowReorderedResult : Boolean) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate int count(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate int count(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, batchSize : Int, executor : Executor?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;V&gt; flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,java.util.Collection&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, Collection&lt;V&gt;?&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,java.util.Collection&lt;V&gt;&gt;, R, int, java.util.concurrent.Executor, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, Collection&lt;V&gt;?&gt;?, target : R?, batchSize : Int, executor : Executor?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,java.util.Collection&lt;V&gt;&gt;, R, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, Collection&lt;V&gt;?&gt;?, target : R?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;V&gt; flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,java.util.Collection&lt;V&gt;&gt;, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, Collection&lt;V&gt;?&gt;?, allowReorderedResult : Boolean) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterable : Iterable&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterable : Iterable&lt;T&gt;, procedure : Procedure&lt;in T&gt;?, batchSize : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterable : Iterable&lt;T&gt;, procedure : Procedure&lt;in T&gt;?, batchSize : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, BT, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEach(iterable : Iterable&lt;T&gt;, procedure : BT?, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEach(iterable : Iterable&lt;T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEach(iterable : Iterable&lt;T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?, batchSize : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEach(iterable : Iterable&lt;T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?, batchSize : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEach(iterable : Iterable&lt;T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEachInBatchWithExecutor(com.gs.collections.impl.parallel.BatchIterable&lt;T&gt;, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEachInBatchWithExecutor(set : BatchIterable&lt;T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?, minForkSize : Int, taskCount : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEachInListOnExecutor(java.util.List&lt;T&gt;, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : Procedure&lt;in T&gt;?&gt; forEachInListOnExecutor(list : List&lt;T&gt;, procedureFactory : ProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?, minForkSize : Int, taskCount : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEachWithIndex(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(iterable : Iterable&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEachWithIndex(java.lang.Iterable&lt;T&gt;, BT, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : ObjectIntProcedure&lt;in T&gt;?&gt; forEachWithIndex(iterable : Iterable&lt;T&gt;, procedure : BT?, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEachWithIndex(java.lang.Iterable&lt;T&gt;, com.gs.collections.impl.parallel.ObjectIntProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : ObjectIntProcedure&lt;in T&gt;?&gt; forEachWithIndex(iterable : Iterable&lt;T&gt;, procedureFactory : ObjectIntProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;?, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate void forEachWithIndexInListOnExecutor(java.util.List&lt;T&gt;, com.gs.collections.impl.parallel.ObjectIntProcedureFactory&lt;BT&gt;, com.gs.collections.impl.parallel.Combiner&lt;BT&gt;, int, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, BT : ObjectIntProcedure&lt;in T&gt;?&gt; forEachWithIndexInListOnExecutor(list : List&lt;T&gt;, procedureFactory : ObjectIntProcedureFactory&lt;BT&gt;?, combiner : Combiner&lt;BT&gt;, minForkSize : Int, taskCount : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt; groupBy(java.lang.Iterable&lt;V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; groupBy(iterable : Iterable&lt;V&gt;, function : Function&lt;in V, out K&gt;?) : MutableMultimap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt; groupBy(java.lang.Iterable&lt;V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; groupBy(iterable : Iterable&lt;V&gt;, function : Function&lt;in V, out K&gt;?, batchSize : Int) : MutableMultimap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt; groupBy(java.lang.Iterable&lt;V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; groupBy(iterable : Iterable&lt;V&gt;, function : Function&lt;in V, out K&gt;?, batchSize : Int, executor : Executor?) : MutableMultimap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt; groupBy(java.lang.Iterable&lt;V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : MutableMultimap&lt;K, V&gt;?&gt; groupBy(iterable : Iterable&lt;V&gt;, function : Function&lt;in V, out K&gt;?, concurrentMultimap : R?) : MutableMultimap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt; groupBy(java.lang.Iterable&lt;V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;, R, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : MutableMultimap&lt;K, V&gt;?&gt; groupBy(iterable : Iterable&lt;V&gt;, function : Function&lt;in V, out K&gt;?, concurrentMultimap : R?, batchSize : Int) : MutableMultimap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate com.gs.collections.api.multimap.MutableMultimap&lt;K,V&gt; groupBy(java.lang.Iterable&lt;V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends K&gt;, R, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : MutableMultimap&lt;K, V&gt;?&gt; groupBy(iterable : Iterable&lt;V&gt;, function : Function&lt;in V, out K&gt;?, concurrentMultimap : R?, batchSize : Int, executor : Executor?) : MutableMultimap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.concurrent.ExecutorService newPooledExecutor(int, java.lang.String, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newPooledExecutor(newPoolSize : Int, poolName : String?, useDaemonThreads : Boolean) : ExecutorService&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.concurrent.ExecutorService newPooledExecutor(java.lang.String, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newPooledExecutor(poolName : String?, useDaemonThreads : Boolean) : ExecutorService&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;T&gt; reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R, int, java.util.concurrent.Executor, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, target : R?, batchSize : Int, executor : Executor?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, target : R?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;T&gt; reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, allowReorderedResult : Boolean) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;T&gt; select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R, int, java.util.concurrent.Executor, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, target : R?, batchSize : Int, executor : Executor?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate R select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, target : R?, allowReorderedResult : Boolean) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelIterate java.util.Collection&lt;T&gt; select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, allowReorderedResult : Boolean) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelMapIterate.PairProcedure void value(com.gs.collections.api.tuple.Pair&lt;T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(pair : Pair&lt;T1, T2&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelMapIterate.PairProcedure void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelMapIterate void forEachKeyValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachKeyValue(map : Map&lt;K, V&gt;, procedure2 : Procedure2&lt;in K, in V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelMapIterate void forEachKeyValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachKeyValue(map : Map&lt;K, V&gt;, procedure : Procedure2&lt;in K, in V&gt;?, minForkSize : Int, taskCount : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelMapIterate void forEachKeyValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;, int, int, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachKeyValue(map : Map&lt;K, V&gt;, procedure : Procedure2&lt;in K, in V&gt;?, minForkSize : Int, taskCount : Int, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ParallelMapIterate void forEachKeyValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;, java.util.concurrent.Executor)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachKeyValue(map : Map&lt;K, V&gt;, procedure : Procedure2&lt;in K, in V&gt;?, executor : Executor?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.PassThruCombiner void combineAll(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineAll(p0 : Iterable&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.PassThruCombiner void combineOne(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(p0 : T) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ProcedureFJTaskRunner.ProcedureExtractor BT valueOf(com.gs.collections.impl.parallel.ProcedureFJTask&lt;T,BT&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(object : ProcedureFJTask&lt;T, BT&gt;) : BT?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ProcedureFJTaskRunner.ProcedureExtractor java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ProcedureFJTaskRunner void createAndExecuteTasks(java.util.concurrent.Executor, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun createAndExecuteTasks(executor : Executor?, procedureFactory : ProcedureFactory&lt;BT&gt;?, list : List&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ProcedureFJTaskRunner void executeAndCombine(java.util.concurrent.Executor, com.gs.collections.impl.parallel.ProcedureFactory&lt;BT&gt;, java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun executeAndCombine(executor : Executor?, procedureFactory : ProcedureFactory&lt;BT&gt;?, list : List&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.ProcedureFactory T create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : T&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.RejectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.RejectProcedure&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : RejectProcedure&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.RejectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.RejectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.RejectProcedureFactory com.gs.collections.impl.block.procedure.RejectProcedure&lt;T&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : RejectProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.SelectProcedureCombiner void combineOne(com.gs.collections.impl.block.procedure.SelectProcedure&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(procedureCombine : SelectProcedure&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.SelectProcedureCombiner void combineOne(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun combineOne(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.SelectProcedureFactory com.gs.collections.api.block.procedure.Procedure create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : Procedure&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.parallel.SelectProcedureFactory com.gs.collections.impl.block.procedure.SelectProcedure&lt;T&gt; create()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun create() : SelectProcedure&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.AbstractPartitionMutableCollection P partition(com.gs.collections.api.RichIterable&lt;T&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P : PartitionMutableCollection&lt;T&gt;?&gt; partition(iterable : RichIterable&lt;T&gt;, partitionMutableCollection : P?) : P?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.RichIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.bag.Bag getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.collection.MutableCollection getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.RichIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.bag.Bag getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : Bag&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.bag.MutableBag&lt;T&gt; getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.collection.MutableCollection getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.partition.bag.PartitionMutableBag&lt;V&gt; of(com.gs.collections.api.bag.Bag&lt;V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; of(bag : Bag&lt;V&gt;, predicate : Predicate&lt;in V&gt;?) : PartitionMutableBag&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.partition.PartitionImmutableCollection toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionHashBag com.gs.collections.api.partition.bag.PartitionImmutableBag&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableBag&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.bag.PartitionImmutableBagImpl PartitionImmutableBagImpl(com.gs.collections.impl.partition.bag.PartitionHashBag&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun PartitionImmutableBagImpl(partitionHashBag : PartitionHashBag&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.RichIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.collection.MutableCollection getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.list.ListIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.list.MutableList&lt;T&gt; getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.RichIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.collection.MutableCollection getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.list.ListIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : ListIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.list.MutableList&lt;T&gt; getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.partition.PartitionImmutableCollection toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionFastList com.gs.collections.api.partition.list.PartitionImmutableList&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.list.PartitionImmutableListImpl PartitionImmutableListImpl(com.gs.collections.impl.partition.list.PartitionFastList&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun PartitionImmutableListImpl(partitionFastList : PartitionFastList&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.AbstractPartitionMutableSet com.gs.collections.api.partition.PartitionImmutableCollection toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.AbstractPartitionMutableSet com.gs.collections.api.partition.set.PartitionImmutableSet&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionImmutableSetImpl PartitionImmutableSetImpl(com.gs.collections.impl.partition.set.AbstractPartitionMutableSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun PartitionImmutableSetImpl(partitionUnifiedSet : AbstractPartitionMutableSet&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.RichIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.collection.MutableCollection getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.set.SetIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.set.UnsortedSetIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.RichIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.collection.MutableCollection getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.set.SetIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.PartitionUnifiedSet com.gs.collections.api.set.UnsortedSetIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionImmutableSortedSetImpl PartitionImmutableSortedSetImpl(com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun PartitionImmutableSortedSetImpl(partitionTreeSortedSet : PartitionTreeSortedSet&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.RichIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.collection.MutableCollection getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.set.SetIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.RichIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.collection.MutableCollection getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.set.SetIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.partition.set.sorted.PartitionMutableSortedSet&lt;V&gt; of(com.gs.collections.api.set.sorted.SortedSetIterable&lt;V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; of(sortedSetIterable : SortedSetIterable&lt;V&gt;, predicate : Predicate&lt;in V&gt;?) : PartitionMutableSortedSet&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.partition.PartitionImmutableCollection toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.sorted.PartitionTreeSortedSet com.gs.collections.api.partition.set.sorted.PartitionImmutableSortedSet&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy PartitionUnifiedSetWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun PartitionUnifiedSetWithHashingStrategy(hashingStrategy : HashingStrategy&lt;in T&gt;, predicate : Predicate&lt;in T&gt;?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.RichIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;T&gt; getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.RichIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;T&gt; getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.set.strategy.PartitionUnifiedSetWithHashingStrategy com.gs.collections.api.partition.set.PartitionMutableSet&lt;T&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, com.gs.collections.api.RichIterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(hashingStrategy : HashingStrategy&lt;in T&gt;, iterable : RichIterable&lt;T&gt;?, predicate : Predicate&lt;in T&gt;?) : PartitionMutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.RichIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.stack.MutableStack&lt;T&gt; getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.stack.StackIterable getRejected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getRejected() : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.RichIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.stack.MutableStack&lt;T&gt; getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.stack.StackIterable getSelected()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getSelected() : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.partition.stack.PartitionMutableStack&lt;V&gt; of(com.gs.collections.api.RichIterable&lt;V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; of(iterable : RichIterable&lt;V&gt;, predicate : Predicate&lt;in V&gt;?) : PartitionMutableStack&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack P partition(com.gs.collections.api.RichIterable&lt;T&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P : PartitionMutableStack&lt;T&gt;?&gt; partition(iterable : RichIterable&lt;T&gt;, partitionMutableStack : P?) : P?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionArrayStack com.gs.collections.api.partition.stack.PartitionImmutableStack&lt;T&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : PartitionImmutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.partition.stack.PartitionImmutableStackImpl PartitionImmutableStackImpl(com.gs.collections.impl.partition.stack.PartitionArrayStack&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun PartitionImmutableStackImpl(partitionArrayStack : PartitionArrayStack&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.AbstractMemoryEfficientMutableSet boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(p0 : Iterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.AbstractMemoryEfficientMutableSet int nullSafeHashCode(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nullSafeHashCode(element : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.AbstractMemoryEfficientMutableSet boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.AbstractMemoryEfficientMutableSet boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(p0 : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet java.lang.Object access$100(com.gs.collections.impl.set.fixed.DoubletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : DoubletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet java.lang.Object access$200(com.gs.collections.impl.set.fixed.DoubletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : DoubletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet com.gs.collections.impl.set.fixed.DoubletonSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : DoubletonSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.DoubletonSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.impl.set.fixed.EmptySet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : EmptySet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : MutableSet&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.set.SetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet com.gs.collections.api.set.UnsortedSetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.EmptySet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; of(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; of(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; of(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; of(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.FixedSizeSet&lt;T&gt; with(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?) : FixedSizeSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.FixedSizeSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet java.lang.Object access$000(com.gs.collections.impl.set.fixed.QuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : QuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet java.lang.Object access$100(com.gs.collections.impl.set.fixed.QuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : QuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet java.lang.Object access$200(com.gs.collections.impl.set.fixed.QuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : QuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet java.lang.Object access$300(com.gs.collections.impl.set.fixed.QuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : QuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet com.gs.collections.impl.set.fixed.QuadrupletonSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : QuadrupletonSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.QuadrupletonSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet java.lang.Object access$100(com.gs.collections.impl.set.fixed.SingletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : SingletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet com.gs.collections.impl.set.fixed.SingletonSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : SingletonSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.SingletonSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet java.lang.Object access$100(com.gs.collections.impl.set.fixed.TripletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : TripletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet java.lang.Object access$200(com.gs.collections.impl.set.fixed.TripletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : TripletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet java.lang.Object access$300(com.gs.collections.impl.set.fixed.TripletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : TripletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet com.gs.collections.impl.set.fixed.TripletonSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : TripletonSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.fixed.TripletonSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;T, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet java.util.Set&lt;T&gt; castToSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun castToSet() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.ImmutableMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;?) : ImmutableSetMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.set.SetMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : SetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.ImmutableMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.set.ImmutableSetMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableSetMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.multimap.set.SetMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : SetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; intersectInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.MutableCollection&lt;T&gt; newMutable(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newMutable(size : Int) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(x0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(elements : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(p0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(p0 : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(p0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(p0 : Iterable&lt;out T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet int nullSafeHashCode(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nullSafeHashCode(element : Any?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.ImmutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate&lt;in T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.SetIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.UnsortedSetIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(p0 : Predicate?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate&lt;in T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.SetIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.UnsortedSetIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(p0 : Predicate?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.UnsortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; unionInto(set : SetIterable&lt;out T&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.collection.ImmutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.ImmutableSet&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : ImmutableSet&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.SetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.AbstractImmutableSet com.gs.collections.api.set.UnsortedSetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet java.lang.Object access$100(com.gs.collections.impl.set.immutable.ImmutableDoubletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ImmutableDoubletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet java.lang.Object access$200(com.gs.collections.impl.set.immutable.ImmutableDoubletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : ImmutableDoubletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableDoubletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet boolean allSatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet boolean anySatisfy(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(p0 : Predicate&lt;in T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(p0 : Appendable, p1 : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collect(p0 : Function&lt;in T, out V&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; collectIf(p0 : Predicate&lt;in T&gt;, p1 : Function&lt;in T, out V&gt;?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R collectWith(com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, V, R : Collection&lt;V&gt;?&gt; collectWith(p0 : Function2&lt;in T, in P, out V&gt;?, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet int count(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(p0 : Predicate&lt;in T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet T detect(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet T detectIfNone(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function0&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(predicate : Predicate&lt;in T&gt;, function : Function0&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V, R : Collection&lt;V&gt;?&gt; flatCollect(p0 : Function&lt;in T, out Iterable&lt;V&gt;?&gt;, p1 : R) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet IV injectInto(IV, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV&gt; injectInto(p0 : IV?, p1 : Function2&lt;in IV, in T, out IV&gt;) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet java.lang.String makeString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet java.lang.String makeString(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun makeString(separator : String?) : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(element : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(x0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(elements : Iterable&lt;out T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet java.lang.Object readResolve()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readResolve() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.collection.ImmutableCollection reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.ImmutableSet&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.SetIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.UnsortedSetIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; reject(p0 : Predicate&lt;in T&gt;?, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R rejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; rejectWith(p0 : Predicate2&lt;in T, in P&gt;?, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.collection.ImmutableCollection select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.ImmutableSet&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.SetIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.UnsortedSetIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; select(p0 : Predicate&lt;in T&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R selectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P, R : Collection&lt;T&gt;?&gt; selectWith(p0 : Predicate2&lt;in T, in P&gt;, p1 : P?, p2 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet java.lang.String toString()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toString() : String&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.collection.ImmutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.ImmutableSet&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : ImmutableSet&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.SetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet com.gs.collections.api.set.UnsortedSetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableEmptySet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet java.lang.Object access$000(com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : ImmutableQuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet java.lang.Object access$100(com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ImmutableQuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet java.lang.Object access$200(com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : ImmutableQuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet java.lang.Object access$300(com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : ImmutableQuadrupletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableQuadrupletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(one : T?, two : T?, three : T?, four : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(T, T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(one : T?, two : T?, three : T?, four : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet java.lang.Object access$100(com.gs.collections.impl.set.immutable.ImmutableSingletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ImmutableSingletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableSingletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet java.lang.Object access$100(com.gs.collections.impl.set.immutable.ImmutableTripletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : ImmutableTripletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet java.lang.Object access$200(com.gs.collections.impl.set.immutable.ImmutableTripletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : ImmutableTripletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet java.lang.Object access$300(com.gs.collections.impl.set.immutable.ImmutableTripletonSet)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : ImmutableTripletonSet) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(procedure : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(procedure : Procedure2&lt;in T, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(objectIntProcedure : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableTripletonSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in T&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newSet(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(iterable : Iterable&lt;T&gt;) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.immutable.ImmutableUnifiedSet com.gs.collections.api.set.ImmutableSet&lt;T&gt; newSetWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(vararg elements : T) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;T, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(subtrahendSet : SetIterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.SetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.UnsortedSetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(set : SetIterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.SetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.UnsortedSetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; intersectInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;K&gt; newEmptySameSize()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newEmptySameSize() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableSet&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.SetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.UnsortedSetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(setB : SetIterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.SetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.UnsortedSetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.UnsortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; unionInto(set : SetIterable&lt;out T&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(p0 : Iterable&lt;S&gt;) : MutableSet&lt;Pair&lt;T, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.SetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.AbstractMutableSet com.gs.collections.api.set.UnsortedSetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet.1 void value(com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableIterator&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(each : MultiReaderUnifiedSet.UntouchableIterator&lt;T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet.1 void value(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet&lt;T&gt; asReadUntouchable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asReadUntouchable() : MultiReaderUnifiedSet.UntouchableMutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet.UntouchableMutableSet&lt;T&gt; asWriteUntouchable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asWriteUntouchable() : MultiReaderUnifiedSet.UntouchableMutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet&lt;T&gt; newSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet() : MultiReaderUnifiedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet&lt;T&gt; newSet(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(capacity : Int) : MultiReaderUnifiedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet&lt;T&gt; newSet(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(iterable : Iterable&lt;T&gt;) : MultiReaderUnifiedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet&lt;T&gt; newSetWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(vararg elements : T) : MultiReaderUnifiedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet void withReadLockAndDelegate(com.gs.collections.api.block.procedure.Procedure&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withReadLockAndDelegate(procedure : Procedure&lt;MutableSet&lt;T&gt;?&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet com.gs.collections.api.set.MutableSet&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MultiReaderUnifiedSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MutableSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MutableSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MutableSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MutableSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MutableSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.MutableSetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter SetAdapter(java.util.Set&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SetAdapter(newDelegate : Set&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;E&gt; adapt(java.util.Set&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; adapt(set : Set&lt;E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;T, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(subtrahendSet : SetIterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.SetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.UnsortedSetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter java.util.Collection getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter java.util.Set&lt;T&gt; getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(set : SetIterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.SetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.UnsortedSetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; intersectInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableSet&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.SetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.UnsortedSetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(setB : SetIterable&lt;out T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.SetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.UnsortedSetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet&lt;T&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.UnsortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; unionInto(set : SetIterable&lt;out T&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.set.MutableSet withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.impl.set.mutable.SetAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;) : SetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SetAdapter com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet SynchronizedMutableSet(com.gs.collections.api.set.MutableSet&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableSet(set : MutableSet&lt;E&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet SynchronizedMutableSet(com.gs.collections.api.set.MutableSet&lt;E&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedMutableSet(set : MutableSet&lt;E&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.impl.set.mutable.SynchronizedMutableSet&lt;E&gt; of(S)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, S : Set&lt;E&gt;?&gt; of(set : S) : SynchronizedMutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.impl.set.mutable.SynchronizedMutableSet&lt;E&gt; of(S, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, S : Set&lt;E&gt;?&gt; of(set : S, lock : Any?) : SynchronizedMutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; with(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : E?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; withAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; without(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : E?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.set.MutableSet&lt;E&gt; withoutAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;E, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.SynchronizedMutableSet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;E, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$000(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : UnifiedSet.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$002(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$002(x0 : UnifiedSet.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$100(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : UnifiedSet.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$102(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$102(x0 : UnifiedSet.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$200(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : UnifiedSet.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$202(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$202(x0 : UnifiedSet.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$300(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : UnifiedSet.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object access$302(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$302(x0 : UnifiedSet.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket copy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copy() : UnifiedSet.ChainedBucket&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object get(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(i : Int) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object removeLast(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLast(cur : Int) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket java.lang.Object removeLast(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLast(oldBucket : UnifiedSet.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket void removeLongChain(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLongChain(oldBucket : UnifiedSet.ChainedBucket, i : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.PositionalIterator K next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.PositionalIterator K nextFromChain()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextFromChain() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet.PositionalIterator void removeLastFromChain(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLastFromChain(bucket : UnifiedSet.ChainedBucket, tableIndex : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet UnifiedSet(com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSet(set : UnifiedSet&lt;K&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet UnifiedSet(java.util.Collection&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSet(collection : Collection&lt;out K&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object access$500(com.gs.collections.impl.set.mutable.UnifiedSet, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$500(x0 : UnifiedSet, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void addIfFoundFromChain(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object, com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addIfFoundFromChain(bucket : UnifiedSet.ChainedBucket, key : Any?, other : UnifiedSet&lt;K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.LazyIterable&lt;K&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;K&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;K&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in K&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;K,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;K, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean chainContains(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainContains(bucket : UnifiedSet.ChainedBucket, key : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void chainedForEach(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEach(bucket : UnifiedSet.ChainedBucket, procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void chainedForEachWith(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; chainedForEachWith(bucket : UnifiedSet.ChainedBucket, procedure : Procedure2&lt;in K, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet int chainedForEachWithIndex(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super K&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachWithIndex(bucket : UnifiedSet.ChainedBucket, procedure : ObjectIntProcedure&lt;in K&gt;, count : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object chainedGet(java.lang.Object, com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedGet(realKey : Any?, bucket : UnifiedSet.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet int chainedHashCode(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedHashCode(bucket : UnifiedSet.ChainedBucket) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet int copyBucketToArray(java.lang.Object[], com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyBucketToArray(result : Array&lt;out Any?&gt;, bucket : UnifiedSet.ChainedBucket, count : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean copyChain(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyChain(bucket : UnifiedSet.ChainedBucket) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean copySet(com.gs.collections.impl.set.mutable.UnifiedSet&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copySet(unifiedset : UnifiedSet&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K detect(com.gs.collections.api.block.predicate.Predicate&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in K&gt;?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in K, in P&gt;?, parameter : P?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;K&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(subtrahendSet : SetIterable&lt;out K&gt;?) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.SetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.UnsortedSetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out K&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K get(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : K?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet int index(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun index(key : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;K&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(set : SetIterable&lt;out K&gt;?) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.SetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.UnsortedSetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; intersectInto(set : SetIterable&lt;out K&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out K&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out K&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; newSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet() : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; newSet(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(size : Int) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; newSet(int, float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(size : Int, loadFactor : Float) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; newSet(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(source : Iterable&lt;out K&gt;) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; newSetWith(K...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSetWith(vararg elements : K) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K nonSentinel(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nonSentinel(element : Any?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K put(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun put(key : K?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean removeDeepChain(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeDeepChain(oldBucket : UnifiedSet.ChainedBucket, key : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object removeDeepChainForPool(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeDeepChainForPool(oldBucket : UnifiedSet.ChainedBucket, key : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean removeFromChain(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChain(bucket : UnifiedSet.ChainedBucket, key : Any?, index : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object removeFromChainForPool(com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket, java.lang.Object, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChainForPool(bucket : UnifiedSet.ChainedBucket, key : Any?, index : Int) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet K removeFromPool(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromPool(key : K?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean retainAllFromNonSet(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllFromNonSet(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;K&gt;&gt; selectAndRejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectAndRejectWith(predicate : Predicate2&lt;in K, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;K&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.SetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.UnsortedSetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : UnifiedSet&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;K&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(setB : SetIterable&lt;out K&gt;?) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.SetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.UnsortedSetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out K&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(array : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.bag.MutableBag&lt;K&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.list.MutableList&lt;K&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.map.MutableMap&lt;NK,NV&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super K,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super K,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toMap(keyFunction : Function&lt;in K, out NK&gt;?, valueFunction : Function&lt;in K, out NV&gt;?) : MutableMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet java.lang.Object toSentinelIfNull(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSentinelIfNull(key : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.list.MutableList&lt;K&gt; toSortedList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList() : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.list.MutableList&lt;K&gt; toSortedList(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList(comparator : Comparator&lt;in K&gt;?) : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.list.MutableList&lt;K&gt; toSortedListBy(com.gs.collections.api.block.function.Function&lt;? super K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedListBy(function : Function&lt;in K, out V&gt;?) : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;K&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;K&gt; toSortedSet(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in K&gt;?) : MutableSortedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;K&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in K, out V&gt;?) : MutableSortedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;K&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out K&gt;) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.UnsortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; unionInto(set : SetIterable&lt;out K&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; with(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : K?) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; with(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : K?, element2 : K?) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; with(K, K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : K?, element2 : K?, element3 : K?) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; with(K...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : K?) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; withAll(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(iterable : Iterable&lt;out K&gt;?) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; without(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : K?) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; withoutAll(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out K&gt;) : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet void writeExternalChain(java.io.ObjectOutput, com.gs.collections.impl.set.mutable.UnifiedSet.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternalChain(out : ObjectOutput, bucket : UnifiedSet.ChainedBucket) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.tuple.Pair&lt;K,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableSet&lt;Pair&lt;K, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.SetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet com.gs.collections.api.set.UnsortedSetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnifiedSet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;K, S&gt;?&gt;?&gt; zip(that : Iterable&lt;S&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet UnmodifiableMutableSet(com.gs.collections.api.set.MutableSet&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableMutableSet(mutableSet : MutableSet&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.set.MutableSet&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.impl.set.mutable.UnmodifiableMutableSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnmodifiableMutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.impl.set.mutable.UnmodifiableMutableSet&lt;E&gt; of(S)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, S : Set&lt;E&gt;?&gt; of(set : S) : UnmodifiableMutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.mutable.UnmodifiableMutableSet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;T, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet java.util.SortedSet&lt;T&gt; castToSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun castToSortedSet() : SortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.ImmutableMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.Multimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.sortedset.ImmutableSortedSetMultimap&lt;V,T&gt; groupBy(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupBy(function : Function&lt;in T, out V&gt;?) : ImmutableSortedSetMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.sortedset.SortedSetMultimap groupBy(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupBy(x0 : Function?) : SortedSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.ImmutableMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : ImmutableMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.Multimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : Multimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.sortedset.ImmutableSortedSetMultimap&lt;V,T&gt; groupByEach(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; groupByEach(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ImmutableSortedSetMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.multimap.sortedset.SortedSetMultimap groupByEach(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun groupByEach(x0 : Function?) : SortedSetMultimap&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; intersectInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.collection.MutableCollection&lt;T&gt; newMutable(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newMutable(size : Int) : MutableCollection&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(p0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(p0 : T?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(p0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(p0 : Iterable&lt;out T&gt;?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet com.gs.collections.api.set.sorted.SortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.AbstractImmutableSortedSet R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; unionInto(set : SetIterable&lt;out T&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet java.util.Comparator&lt;? super T&gt; comparator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun comparator() : Comparator&lt;in T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet int compareTo(com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(o : SortedSetIterable&lt;T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet int compareTo(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(element : T?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(x0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(elements : Iterable&lt;out T&gt;?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet java.lang.Object readResolve()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readResolve() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableEmptySortedSet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; of(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(comparator : Comparator&lt;in T&gt;?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; of(java.util.Comparator&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(comparator : Comparator&lt;in T&gt;?, vararg items : T?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; ofAll(java.util.Comparator&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(comparator : Comparator&lt;in T&gt;?, items : Iterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; ofSortedSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofSortedSet(set : SortedSet&lt;T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; with(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(comparator : Comparator&lt;in T&gt;?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; with(java.util.Comparator&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(comparator : Comparator&lt;in T&gt;?, vararg items : T?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T?) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; withAll(java.util.Comparator&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(comparator : Comparator&lt;in T&gt;?, items : Iterable&lt;out T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; withSortedSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withSortedSet(set : SortedSet&lt;T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet int compareTo(com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(o : SortedSetIterable&lt;T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet int compareTo(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(set : SortedSet&lt;T&gt;) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newSetWith(java.util.Comparator&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(comparator : Comparator&lt;in T&gt;?, vararg elements : T) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.immutable.ImmutableTreeSet com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; newSetWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(vararg elements : T) : ImmutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; of(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; of(java.util.Comparator&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(comparator : Comparator&lt;in T&gt;?, vararg items : T) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg items : T) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(items : Iterable&lt;out T&gt;) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; ofAll(java.util.Comparator&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(comparator : Comparator&lt;in T&gt;?, items : Iterable&lt;out T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; with(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(comparator : Comparator&lt;in T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; with(java.util.Comparator&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(comparator : Comparator&lt;in T&gt;?, vararg items : T) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg items : T) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(items : Iterable&lt;out T&gt;) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.MutableSortedSetFactoryImpl com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; withAll(java.util.Comparator&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(comparator : Comparator&lt;in T&gt;?, items : Iterable&lt;out T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter SortedSetAdapter(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SortedSetAdapter(newDelegate : SortedSet&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; adapt(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; adapt(set : SortedSet&lt;T&gt;) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;T, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter int compareTo(com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(o : SortedSetIterable&lt;T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter int compareTo(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(p0 : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.SetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(subtrahendSet : SetIterable&lt;out T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.SortedSetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter java.util.Collection getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter java.util.SortedSet&lt;T&gt; getDelegate()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDelegate() : SortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; headSet(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headSet(toElement : T?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter java.util.SortedSet headSet(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headSet(x0 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.SetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(set : SetIterable&lt;out T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.SortedSetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; intersectInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.SetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : MutableSortedSet&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.SortedSetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; subSet(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subSet(fromElement : T?, toElement : T?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter java.util.SortedSet subSet(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subSet(x0 : Any?, x1 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.SetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(setB : SetIterable&lt;out T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.SortedSetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; tailSet(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailSet(fromElement : T?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter java.util.SortedSet tailSet(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailSet(x0 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out T&gt;) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.SortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; unionInto(set : SetIterable&lt;out T&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.set.sorted.MutableSortedSet withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;) : SortedSetAdapter&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SortedSetAdapter com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet SynchronizedSortedSet(com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedSortedSet(set : MutableSortedSet&lt;E&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet SynchronizedSortedSet(com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedSortedSet(set : MutableSortedSet&lt;E&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; headSet(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headSet(toElement : E?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet java.util.SortedSet headSet(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headSet(x0 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet&lt;E&gt; of(S)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, S : SortedSet&lt;E&gt;?&gt; of(set : S) : SynchronizedSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; of(S, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, S : SortedSet&lt;E&gt;?&gt; of(set : S, lock : Any?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; subSet(E, E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subSet(fromElement : E?, toElement : E?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet java.util.SortedSet subSet(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subSet(x0 : Any?, x1 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; tailSet(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailSet(fromElement : E?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet java.util.SortedSet tailSet(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailSet(x0 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; with(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : E?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; withAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out E&gt;?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; without(E)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : E?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;E&gt; withoutAll(java.lang.Iterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out E&gt;?) : MutableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;E, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.SynchronizedSortedSet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;E, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;T, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet int compareTo(com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(otherSet : SortedSetIterable&lt;T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet int compareTo(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.SetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(subtrahendSet : SetIterable&lt;out T&gt;?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; headSet(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headSet(toElement : T?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet java.util.SortedSet headSet(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun headSet(x0 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.SetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(set : SetIterable&lt;out T&gt;?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; intersectInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet() : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newSet(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(source : Iterable&lt;out T&gt;) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newSet(java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(comparator : Comparator&lt;in T&gt;?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newSet(java.util.Comparator&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(comparator : Comparator&lt;in T&gt;?, iterable : Iterable&lt;out T&gt;?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newSetWith(java.util.Comparator&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(comparator : Comparator&lt;in T&gt;?, vararg elements : T) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; newSetWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(vararg elements : T) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.SetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : TreeSortedSet&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; subSet(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subSet(fromElement : T?, toElement : T?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet java.util.SortedSet subSet(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun subSet(x0 : Any?, x1 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.SetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(setB : SetIterable&lt;out T&gt;?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out T&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; tailSet(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailSet(fromElement : T?) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet java.util.SortedSet tailSet(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tailSet(x0 : Any?) : SortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.SortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out T&gt;) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;T&gt;?&gt; unionInto(set : SetIterable&lt;out T&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; with(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : T?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; with(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; with(T, T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : T?, element2 : T?, element3 : T?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : T) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(elements : Iterable&lt;out T&gt;?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; without(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : T?) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.api.set.sorted.MutableSortedSet withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet com.gs.collections.impl.set.sorted.mutable.TreeSortedSet&lt;T&gt; withoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out T&gt;) : TreeSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.TreeSortedSet void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet UnmodifiableSortedSet(com.gs.collections.api.set.sorted.MutableSortedSet&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableSortedSet(sortedSet : MutableSortedSet&lt;out T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.set.sorted.MutableSortedSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSortedSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet&lt;T&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnmodifiableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet&lt;E&gt; of(S)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, S : SortedSet&lt;E&gt;?&gt; of(set : S) : UnmodifiableSortedSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(p0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.sorted.mutable.UnmodifiableSortedSet R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(other : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy void forEachWith(com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; forEachWith(p0 : Procedure2&lt;in T, in P&gt;, p1 : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy void forEachWithIndex(com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEachWithIndex(p0 : ObjectIntProcedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy com.gs.collections.api.collection.ImmutableCollection newWithAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable) : ImmutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithAll(p0 : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy com.gs.collections.api.collection.ImmutableCollection newWithout(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(x0 : Any?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithout(T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithout(element : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy com.gs.collections.api.collection.ImmutableCollection newWithoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(x0 : Iterable?) : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy com.gs.collections.api.set.ImmutableSet&lt;T&gt; newWithoutAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newWithoutAll(elements : Iterable&lt;out T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;T, S&gt;?&gt;?&gt; zip(p0 : Iterable&lt;S&gt;, p1 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableEmptySetWithHashingStrategy R zipWithIndex(R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(p0 : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableHashingStrategySetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(hashingStrategy : HashingStrategy&lt;in T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableHashingStrategySetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(hashingStrategy : HashingStrategy&lt;in T&gt;?, vararg items : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableHashingStrategySetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; ofAll(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(hashingStrategy : HashingStrategy&lt;in T&gt;?, items : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableHashingStrategySetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(hashingStrategy : HashingStrategy&lt;in T&gt;?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableHashingStrategySetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(hashingStrategy : HashingStrategy&lt;in T&gt;?, vararg items : T?) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableHashingStrategySetFactoryImpl com.gs.collections.api.set.ImmutableSet&lt;T&gt; withAll(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(hashingStrategy : HashingStrategy&lt;in T&gt;?, items : Iterable&lt;out T&gt;) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in T&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy boolean contains(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(p0 : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in T&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy T getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy com.gs.collections.api.set.ImmutableSet&lt;T&gt; newSet(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSet(hashingStrategy : HashingStrategy&lt;in T&gt;?, iterable : Iterable&lt;T&gt;) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.immutable.ImmutableUnifiedSetWithHashingStrategy com.gs.collections.api.set.ImmutableSet&lt;T&gt; newSetWith(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newSetWith(hashingStrategy : HashingStrategy&lt;in T&gt;?, vararg elements : T) : ImmutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.MutableHashingStrategySetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(hashingStrategy : HashingStrategy&lt;in T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.MutableHashingStrategySetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; of(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(hashingStrategy : HashingStrategy&lt;in T&gt;?, vararg items : T) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.MutableHashingStrategySetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; ofAll(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(hashingStrategy : HashingStrategy&lt;in T&gt;?, items : Iterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.MutableHashingStrategySetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(hashingStrategy : HashingStrategy&lt;in T&gt;?) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.MutableHashingStrategySetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; with(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(hashingStrategy : HashingStrategy&lt;in T&gt;?, vararg items : T) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.MutableHashingStrategySetFactoryImpl com.gs.collections.api.set.MutableSet&lt;T&gt; withAll(com.gs.collections.api.block.HashingStrategy&lt;? super T&gt;, java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(hashingStrategy : HashingStrategy&lt;in T&gt;?, items : Iterable&lt;out T&gt;) : MutableSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$000(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$000(x0 : UnifiedSetWithHashingStrategy.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$002(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$002(x0 : UnifiedSetWithHashingStrategy.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$100(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$100(x0 : UnifiedSetWithHashingStrategy.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$102(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$102(x0 : UnifiedSetWithHashingStrategy.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$200(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$200(x0 : UnifiedSetWithHashingStrategy.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$202(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$202(x0 : UnifiedSetWithHashingStrategy.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$300(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$300(x0 : UnifiedSetWithHashingStrategy.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object access$302(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$302(x0 : UnifiedSetWithHashingStrategy.ChainedBucket, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket copy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copy() : UnifiedSetWithHashingStrategy.ChainedBucket&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object get(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(i : Int) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object removeLast(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLast(cur : Int) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket java.lang.Object removeLast(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLast(oldBucket : UnifiedSetWithHashingStrategy.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket void removeLongChain(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLongChain(oldBucket : UnifiedSetWithHashingStrategy.ChainedBucket, i : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.PositionalIterator K next()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun next() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.PositionalIterator K nextFromChain()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nextFromChain() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.PositionalIterator void removeLastFromChain(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeLastFromChain(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, tableIndex : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy UnifiedSetWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetWithHashingStrategy(p0 : HashingStrategy&lt;in K&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy UnifiedSetWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetWithHashingStrategy(hashingStrategy : HashingStrategy&lt;in K&gt;?, set : UnifiedSetWithHashingStrategy&lt;K&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy UnifiedSetWithHashingStrategy(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, java.util.Collection&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnifiedSetWithHashingStrategy(hashingStrategy : HashingStrategy&lt;in K&gt;?, collection : Collection&lt;out K&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object access$500(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun access$500(x0 : UnifiedSetWithHashingStrategy, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean addAll(java.util.Collection&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAll(collection : Collection&lt;out K&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean addAllIterable(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addAllIterable(iterable : Iterable&lt;out K&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void addIfFoundFromChain(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, K, com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun addIfFoundFromChain(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, key : K?, other : UnifiedSetWithHashingStrategy&lt;K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void appendString(java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void appendString(java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun appendString(appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.LazyIterable&lt;K&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;K&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;K&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void batchForEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;, int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun batchForEach(p0 : Procedure&lt;in K&gt;?, p1 : Int, p2 : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;K,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;B&gt; cartesianProduct(set : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;K, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean chainContains(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainContains(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void chainedForEach(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEach(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, procedure : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void chainedForEachWith(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; chainedForEachWith(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, procedure : Procedure2&lt;in K, in P&gt;, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy int chainedForEachWithIndex(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super K&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedForEachWithIndex(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, procedure : ObjectIntProcedure&lt;in K&gt;, count : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object chainedGet(K, com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedGet(key : K?, bucket : UnifiedSetWithHashingStrategy.ChainedBucket) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy int chainedHashCode(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun chainedHashCode(bucket : UnifiedSetWithHashingStrategy.ChainedBucket) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object clone()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun clone() : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean containsAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllIterable(source : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy int copyBucketToArray(java.lang.Object[], com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyBucketToArray(result : Array&lt;out Any?&gt;, bucket : UnifiedSetWithHashingStrategy.ChainedBucket, count : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean copyChain(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copyChain(bucket : UnifiedSetWithHashingStrategy.ChainedBucket) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean copySet(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun copySet(unifiedset : UnifiedSetWithHashingStrategy&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K detect(com.gs.collections.api.block.predicate.Predicate&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(predicate : Predicate&lt;in K&gt;?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K detectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; detectWith(predicate : Predicate2&lt;in K, in P&gt;?, parameter : P?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;K&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(subtrahendSet : SetIterable&lt;out K&gt;?) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable difference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun difference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; differenceInto(subtrahendSet : SetIterable&lt;out K&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean existsAndEqual(java.lang.Object, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun existsAndEqual(object1 : Any?, object2 : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void forEach(com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(p0 : Procedure&lt;in K&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K get(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun get(key : K?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K getLast()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLast() : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;K&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(set : SetIterable&lt;out K&gt;?) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable intersect(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun intersect(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; intersectInto(set : SetIterable&lt;out K&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isProperSubsetOf(candidateSuperset : SetIterable&lt;out K&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isSubsetOf(candidateSuperset : SetIterable&lt;out K&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.util.Iterator&lt;K&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newEmpty()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newEmpty() : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newSet(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(hashingStrategy : HashingStrategy&lt;in K&gt;) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newSet(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(hashingStrategy : HashingStrategy&lt;in K&gt;?, size : Int) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newSet(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, int, float)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(hashingStrategy : HashingStrategy&lt;in K&gt;?, size : Int, loadFactor : Float) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newSet(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(hashingStrategy : HashingStrategy&lt;in K&gt;?, source : Iterable&lt;out K&gt;) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newSet(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSet(set : UnifiedSetWithHashingStrategy&lt;K&gt;) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; newSetWith(com.gs.collections.api.block.HashingStrategy&lt;? super K&gt;, K...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; newSetWith(hashingStrategy : HashingStrategy&lt;in K&gt;?, vararg elements : K) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K nonSentinel(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun nonSentinel(element : Any?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K put(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun put(key : K?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean removeAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean removeAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean removeDeepChain(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeDeepChain(oldBucket : UnifiedSetWithHashingStrategy.ChainedBucket, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object removeDeepChainForPool(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeDeepChainForPool(oldBucket : UnifiedSetWithHashingStrategy.ChainedBucket, key : K?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean removeFromChain(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, K, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChain(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, key : K?, index : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object removeFromChainForPool(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket, K, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromChainForPool(bucket : UnifiedSetWithHashingStrategy.ChainedBucket, key : K?, index : Int) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy K removeFromPool(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeFromPool(key : K?) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean retainAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAll(collection : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean retainAllFromNonSet(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllFromNonSet(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy boolean retainAllIterable(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun retainAllIterable(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;K&gt;&gt; selectAndRejectWith(com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;P&gt; selectAndRejectWith(predicate : Predicate2&lt;in K, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;K&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : UnifiedSetWithHashingStrategy&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;K&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(setB : SetIterable&lt;out K&gt;?) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable symmetricDifference(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun symmetricDifference(x0 : SetIterable?) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; symmetricDifferenceInto(set : SetIterable&lt;out K&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object[] toArray()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toArray() : Array&lt;out Any?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy T[] toArray(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(array : Array&lt;out T&gt;) : Array&lt;out T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.bag.MutableBag&lt;K&gt; toBag()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toBag() : MutableBag&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.ImmutableCollection toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.ImmutableSet&lt;K&gt; toImmutable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toImmutable() : ImmutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.list.MutableList&lt;K&gt; toList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toList() : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.map.MutableMap&lt;NK,NV&gt; toMap(com.gs.collections.api.block.function.Function&lt;? super K,? extends NK&gt;, com.gs.collections.api.block.function.Function&lt;? super K,? extends NV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;NK, NV&gt; toMap(keyFunction : Function&lt;in K, out NK&gt;?, valueFunction : Function&lt;in K, out NV&gt;?) : MutableMap&lt;NK, NV&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy java.lang.Object toSentinelIfNull(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSentinelIfNull(key : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.mutable.UnifiedSet&lt;K&gt; toSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet() : UnifiedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.list.MutableList&lt;K&gt; toSortedList()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList() : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.list.MutableList&lt;K&gt; toSortedList(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedList(comparator : Comparator&lt;in K&gt;?) : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.list.MutableList&lt;K&gt; toSortedListBy(com.gs.collections.api.block.function.Function&lt;? super K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedListBy(function : Function&lt;in K, out V&gt;?) : MutableList&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.sorted.MutableSortedSet&lt;K&gt; toSortedSet()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet() : MutableSortedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.sorted.MutableSortedSet&lt;K&gt; toSortedSet(java.util.Comparator&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSortedSet(comparator : Comparator&lt;in K&gt;?) : MutableSortedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.sorted.MutableSortedSet&lt;K&gt; toSortedSetBy(com.gs.collections.api.block.function.Function&lt;? super K,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V : Comparable&lt;in V&gt;?&gt; toSortedSetBy(function : Function&lt;in K, out V&gt;?) : MutableSortedSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;K&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(set : SetIterable&lt;out K&gt;) : MutableSet&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : SetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable union(com.gs.collections.api.set.SetIterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun union(x0 : SetIterable) : UnsortedSetIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends K&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Set&lt;K&gt;?&gt; unionInto(set : SetIterable&lt;out K&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet with(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(x0 : Any?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; with(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element : K?) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; with(K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : K?, element2 : K?) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; with(K, K, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(element1 : K?, element2 : K?, element3 : K?) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; with(K...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun with(vararg elements : K?) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet withAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(x0 : Iterable) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; withAll(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withAll(iterable : Iterable&lt;out K&gt;) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet without(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(x0 : Any?) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; without(K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun without(element : K?) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableCollection&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet withoutAll(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(x0 : Iterable) : MutableSet&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;K&gt; withoutAll(java.lang.Iterable&lt;? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun withoutAll(elements : Iterable&lt;out K&gt;) : UnifiedSetWithHashingStrategy&lt;K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy void writeExternalChain(java.io.ObjectOutput, com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy.ChainedBucket)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternalChain(out : ObjectOutput, bucket : UnifiedSetWithHashingStrategy.ChainedBucket) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : RichIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.collection.MutableCollection zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : MutableCollection?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.tuple.Pair&lt;K,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;) : MutableSet&lt;Pair&lt;K, S&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.SetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : SetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy com.gs.collections.api.set.UnsortedSetIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable) : UnsortedSetIterable?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy R zip(java.lang.Iterable&lt;S&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S, R : Collection&lt;Pair&lt;K, S&gt;?&gt;?&gt; zip(that : Iterable&lt;S&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack ArrayStack(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ArrayStack(items : Iterable&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack ArrayStack(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun ArrayStack(vararg items : T)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.LazyIterable&lt;T&gt; asLazy()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLazy() : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable collect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(x0 : Function?) : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;V&gt; collect(com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collect(function : Function&lt;in T, out V&gt;?) : ArrayStack&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable collectIf(com.gs.collections.api.block.predicate.Predicate, com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collectIf(x0 : Predicate?, x1 : Function?) : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;V&gt; collectIf(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; collectIf(predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : ArrayStack&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack boolean containsAll(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAll(source : Collection&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack boolean containsAllArguments(java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun containsAllArguments(vararg elements : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable flatCollect(com.gs.collections.api.block.function.Function)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun flatCollect(x0 : Function?) : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;V&gt; flatCollect(com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; flatCollect(function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : ArrayStack&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack T getFirst()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirst() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; newStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newStack() : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; newStack(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newStack(items : Iterable&lt;out T&gt;) : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; newStackFromTopToBottom(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newStackFromTopToBottom(items : Iterable&lt;out T&gt;) : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; newStackFromTopToBottom(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newStackFromTopToBottom(vararg items : T) : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; newStackWith(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newStackWith(vararg items : T) : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack T peek()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun peek() : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.list.ListIterable&lt;T&gt; peek(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun peek(count : Int) : ListIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.list.ListIterable&lt;T&gt; pop(int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun pop(count : Int) : ListIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack R pop(int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;R : Collection&lt;T&gt;?&gt; pop(count : Int, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack void readExternal(java.io.ObjectInput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun readExternal(in : ObjectInput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable reject(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(x0 : Predicate?) : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; reject(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(predicate : Predicate&lt;in T&gt;?) : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable select(com.gs.collections.api.block.predicate.Predicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(x0 : Predicate?) : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;T&gt; select(com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(predicate : Predicate&lt;in T&gt;?) : ArrayStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable selectInstancesOf(java.lang.Class)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun selectInstancesOf(x0 : Class?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;S&gt; selectInstancesOf(java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; selectInstancesOf(clazz : Class&lt;S&gt;?) : ArrayStack&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack&lt;T&gt; toStack()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toStack() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack void writeExternal(java.io.ObjectOutput)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun writeExternal(out : ObjectOutput) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable?) : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable?) : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable zip(java.lang.Iterable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zip(x0 : Iterable?) : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;com.gs.collections.api.tuple.Pair&lt;T,S&gt;&gt; zip(java.lang.Iterable&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;S&gt; zip(that : Iterable&lt;S&gt;?) : ArrayStack&lt;Pair&lt;T, S&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.RichIterable zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : RichIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.MutableStack zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : MutableStack&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.api.stack.StackIterable zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : StackIterable&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.ArrayStack com.gs.collections.impl.stack.mutable.ArrayStack&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun zipWithIndex() : ArrayStack&lt;Pair&lt;T, Int?&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; of()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; of(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; of(vararg elements : T) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; ofAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAll(elements : Iterable&lt;out T&gt;) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; ofAllReversed(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofAllReversed(items : Iterable&lt;out T&gt;) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; ofReversed(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; ofReversed(vararg elements : T) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; with()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; with(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; with(vararg elements : T) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; withAll(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAll(elements : Iterable&lt;out T&gt;) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; withAllReversed(java.lang.Iterable&lt;? extends T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withAllReversed(items : Iterable&lt;out T&gt;) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.MutableStackFactoryImpl com.gs.collections.api.stack.MutableStack&lt;T&gt; withReversed(T...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; withReversed(vararg elements : T) : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.SynchronizedStack SynchronizedStack(com.gs.collections.api.stack.MutableStack&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedStack(newStack : MutableStack&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.SynchronizedStack SynchronizedStack(com.gs.collections.api.stack.MutableStack&lt;T&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun SynchronizedStack(newStack : MutableStack&lt;T&gt;, newLock : Any?)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.SynchronizedStack com.gs.collections.api.stack.MutableStack&lt;T&gt; asSynchronized()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asSynchronized() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.SynchronizedStack java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.SynchronizedStack com.gs.collections.impl.stack.mutable.SynchronizedStack&lt;T&gt; of(S)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, S : MutableStack&lt;T&gt;?&gt; of(stack : S) : SynchronizedStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.UnmodifiableStack UnmodifiableStack(com.gs.collections.api.stack.MutableStack&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun UnmodifiableStack(mutableStack : MutableStack&lt;T&gt;)&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.UnmodifiableStack com.gs.collections.api.stack.MutableStack&lt;T&gt; asUnmodifiable()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUnmodifiable() : MutableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.UnmodifiableStack java.util.Iterator&lt;T&gt; iterator()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun iterator() : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.stack.mutable.UnmodifiableStack com.gs.collections.impl.stack.mutable.UnmodifiableStack&lt;T&gt; of(S)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, S : MutableStack&lt;T&gt;?&gt; of(stack : S) : UnmodifiableStack&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry.KeyFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry.KeyFunction K valueOf(java.util.Map.Entry&lt;K,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(entry : Map.Entry&lt;K, *&gt;) : K?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry.PairFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry.PairFunction com.gs.collections.api.tuple.Pair&lt;K,V&gt; valueOf(java.util.Map.Entry&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(entry : Map.Entry&lt;K, V&gt;) : Pair&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry.ValueFunction java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry.ValueFunction V valueOf(java.util.Map.Entry&lt;?,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(entry : Map.Entry&lt;*, V&gt;) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry com.gs.collections.api.block.function.Function&lt;java.util.Map.Entry&lt;K,?&gt;,K&gt; getKeyFunction()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K&gt; getKeyFunction() : Function&lt;Map.Entry&lt;K, *&gt;?, K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry com.gs.collections.api.block.function.Function&lt;java.util.Map.Entry&lt;K,V&gt;,com.gs.collections.api.tuple.Pair&lt;K,V&gt;&gt; getPairFunction()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; getPairFunction() : Function&lt;Map.Entry&lt;K, V&gt;?, Pair&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.AbstractImmutableEntry com.gs.collections.api.block.function.Function&lt;java.util.Map.Entry&lt;?,V&gt;,V&gt; getValueFunction()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;V&gt; getValueFunction() : Function&lt;Map.Entry&lt;*, V&gt;?, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.ImmutableEntry boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(object : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.ImmutableEntry com.gs.collections.impl.tuple.ImmutableEntry&lt;T1,T2&gt; of(T1, T2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; of(key : T1?, value : T2?) : ImmutableEntry&lt;T1, T2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.PairImpl int compareTo(com.gs.collections.api.tuple.Pair&lt;T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(other : Pair&lt;T1, T2&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.PairImpl int compareTo(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun compareTo(x0 : Any) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.PairImpl boolean equals(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun equals(o : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.PairImpl void put(java.util.Map&lt;T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun put(map : MutableMap&lt;T1, T2&gt;) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.PairImpl java.util.Map.Entry&lt;T1,T2&gt; toEntry()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toEntry() : MutableMap.MutableEntry&lt;T1, T2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.Tuples com.gs.collections.api.tuple.Pair&lt;T1,T2&gt; pair(T1, T2)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; pair(one : T1?, two : T2?) : Pair&lt;T1, T2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.Tuples com.gs.collections.api.tuple.Pair&lt;K,V&gt; pairFrom(java.util.Map.Entry&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; pairFrom(entry : Map.Entry&lt;K, V&gt;) : Pair&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.tuple.Tuples com.gs.collections.api.tuple.Twin&lt;T&gt; twin(T, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; twin(one : T?, two : T?) : Twin&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R addAllTo(T[], R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; addAllTo(objectArray : Array&lt;out T&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean allSatisfy(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean allSatisfyWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; allSatisfyWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean anySatisfy(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean anySatisfyWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; anySatisfyWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void appendString(T[], java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(array : Array&lt;out T&gt;, appendable : Appendable) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void appendString(T[], java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(array : Array&lt;out T&gt;, appendable : Appendable, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void appendString(T[], java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(array : Array&lt;out T&gt;, appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.RichIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(T[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(array : Array&lt;out T&gt;, size : Int) : RichIterable&lt;RichIterable&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;A&gt; collect(T[], com.gs.collections.api.block.function.Function&lt;? super T,A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collect(objectArray : Array&lt;out T&gt;, function : Function&lt;in T, A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R collect(T[], com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collect(objectArray : Array&lt;out T&gt;, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;A&gt; collectIf(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collectIf(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R collectIf(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collectIf(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;A&gt; collectWith(T[], com.gs.collections.api.block.function.Function2&lt;? super T,P,A&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A&gt; collectWith(objectArray : Array&lt;out T&gt;, function : Function2&lt;in T, P, A&gt;?, parameter : P?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R collectWith(T[], com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(objectArray : Array&lt;out T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean contains(double[], double)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(doubleArray : DoubleArray, value : Double) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean contains(int[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(intArray : IntArray, value : Int) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean contains(long[], long)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(longArray : LongArray, value : Long) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean contains(T[], T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; contains(objectArray : Array&lt;out T&gt;, value : T?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T detect(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T detectIfNone(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIfNone(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate int detectIndex(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate int detectIndexWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectIndexWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T detectWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T detectWithIfNone(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,P&gt;, P, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectWithIfNone(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, P&gt;?, parameter : P?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; drop(T[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(array : Array&lt;out T&gt;, count : Int) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R drop(T[], int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; drop(array : Array&lt;out T&gt;, count : Int, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void forEach(T[], int, int, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(objectArray : Array&lt;out T&gt;, from : Int, to : Int, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void forEach(T[], com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(objectArray : Array&lt;out T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void forEachInBoth(T1[], T2[], com.gs.collections.api.block.procedure.Procedure2&lt;T1,T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; forEachInBoth(objectArray1 : Array&lt;out T1&gt;?, objectArray2 : Array&lt;out T2&gt;?, procedure : Procedure2&lt;T1, T2&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void forEachWith(T[], com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(objectArray : Array&lt;out T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void forEachWithIndex(T[], int, int, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(objectArray : Array&lt;out T&gt;, from : Int, to : Int, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void forEachWithIndex(T[], com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(objectArray : Array&lt;out T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T getFirst(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getFirst(objectArray : Array&lt;out T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T getLast(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getLast(objectArray : Array&lt;out T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupBy(T[], com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(array : Array&lt;out T&gt;, function : Function&lt;in T, out V&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R groupBy(T[], com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(array : Array&lt;out T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupByEach(T[], com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupByEach(array : Array&lt;out T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R groupByEach(T[], com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(array : Array&lt;out T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate int indexOf(T[], T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; indexOf(objectArray : Array&lt;out T&gt;, elem : T?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate double injectInto(double, T[], com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, objectArray : Array&lt;out T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate int injectInto(int, T[], com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, objectArray : Array&lt;out T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate long injectInto(long, T[], com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, objectArray : Array&lt;out T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate IV injectInto(IV, T[], com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, objectArray : Array&lt;out T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate IV injectIntoWith(IV, T[], com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectValue : IV?, objectArray : Array&lt;out T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean isEmpty(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEmpty(array : Array&lt;out Any?&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate java.lang.String makeString(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; makeString(array : Array&lt;out T&gt;) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate java.lang.String makeString(T[], java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; makeString(array : Array&lt;out T&gt;, separator : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate java.lang.String makeString(T[], java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; makeString(array : Array&lt;out T&gt;, start : String?, separator : String?, end : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T max(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(array : Array&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T max(T[], java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(array : Array&lt;out T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T min(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(array : Array&lt;out T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate T min(T[], java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(array : Array&lt;out T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate boolean notEmpty(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notEmpty(array : Array&lt;out Any?&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; reject(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R reject(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; rejectWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; rejectWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, P&gt;?, parameter : P?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R rejectWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; select(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R select(T[], com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(objectArray : Array&lt;out T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; selectAndRejectWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectInstancesOf(java.lang.Object[], java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; selectInstancesOf(objectArray : Array&lt;out Any?&gt;, clazz : Class&lt;T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; selectWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, P&gt;?, parameter : P?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R selectWith(T[], com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(objectArray : Array&lt;out T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate int size(java.lang.Object[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun size(array : Array&lt;out Any?&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void sort(T[], int, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sort(array : Array&lt;out T&gt;?, size : Int, comparator : Comparator&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate void swapWithPrevious(T[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; swapWithPrevious(array : Array&lt;out T&gt;, index : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;T&gt; take(T[], int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(array : Array&lt;out T&gt;, count : Int) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R take(T[], int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; take(array : Array&lt;out T&gt;, count : Int, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; toMap(V[], com.gs.collections.api.block.function.Function&lt;? super V,K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; toMap(objectArray : Array&lt;out V&gt;, keyFunction : Function&lt;in V, K&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; zip(X[], Y[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y&gt; zip(xs : Array&lt;out X&gt;, ys : Array&lt;out Y&gt;) : MutableList&lt;Pair&lt;X, Y&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R zip(X[], Y[], R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(xs : Array&lt;out X&gt;, ys : Array&lt;out Y&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(array : Array&lt;out T&gt;) : MutableList&lt;Pair&lt;T, Int?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayIterate R zipWithIndex(T[], R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(array : Array&lt;out T&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate boolean allSatisfy(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate boolean allSatisfyWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; allSatisfyWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate boolean anySatisfy(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate boolean anySatisfyWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; anySatisfyWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;A&gt; collect(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collect(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out A&gt;?) : ArrayList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R collect(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collect(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;A&gt; collectIf(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collectIf(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?) : ArrayList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R collectIf(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collectIf(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;A&gt; collectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A&gt; collectWith(list : ArrayList&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?) : ArrayList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R collectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(list : ArrayList&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate int count(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate int countWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; countWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate T detect(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate T detectIfNone(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIfNone(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate int detectIndex(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate int detectIndexWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectIndexWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate T detectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate T detectWithIfNone(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectWithIfNone(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; drop(java.util.ArrayList&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(list : ArrayList&lt;T&gt;, count : Int) : ArrayList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R drop(java.util.ArrayList&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; drop(list : ArrayList&lt;T&gt;, count : Int, targetList : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;A&gt; flatCollect(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; flatCollect(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?) : ArrayList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R flatCollect(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; flatCollect(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate void forEach(java.util.ArrayList&lt;T&gt;, int, int, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(list : ArrayList&lt;T&gt;, from : Int, to : Int, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate void forEach(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(list : ArrayList&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate void forEachWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(list : ArrayList&lt;T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate void forEachWithIndex(java.util.ArrayList&lt;T&gt;, int, int, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(list : ArrayList&lt;T&gt;, from : Int, to : Int, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate void forEachWithIndex(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(list : ArrayList&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupBy(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R groupBy(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupByEach(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupByEach(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R groupByEach(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(list : ArrayList&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate double injectInto(double, java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, list : ArrayList&lt;T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate float injectInto(float, java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatObjectToFloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Float, list : ArrayList&lt;T&gt;, function : FloatObjectToFloatFunction&lt;in T&gt;?) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate int injectInto(int, java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, list : ArrayList&lt;T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate long injectInto(long, java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, list : ArrayList&lt;T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate IV injectInto(IV, java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, list : ArrayList&lt;T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate IV injectIntoWith(IV, java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectedValue : IV?, list : ArrayList&lt;T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; reject(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : ArrayList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R reject(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; rejectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; rejectWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : ArrayList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R rejectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, injectedValue : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; removeIf(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : ArrayList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; removeIfWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; removeIfWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : ArrayList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate void reverseForEach(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reverseForEach(list : ArrayList&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; select(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : ArrayList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R select(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(list : ArrayList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; selectAndRejectWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectInstancesOf(java.util.ArrayList&lt;?&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; selectInstancesOf(list : ArrayList&lt;*&gt;, clazz : Class&lt;T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; selectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : ArrayList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R selectWith(java.util.ArrayList&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(list : ArrayList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; sortThis(java.util.ArrayList&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; sortThis(list : ArrayList&lt;T&gt;) : ArrayList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; sortThis(java.util.ArrayList&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sortThis(list : ArrayList&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : ArrayList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate java.util.ArrayList&lt;T&gt; take(java.util.ArrayList&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(list : ArrayList&lt;T&gt;, count : Int) : ArrayList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R take(java.util.ArrayList&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; take(list : ArrayList&lt;T&gt;, count : Int, targetList : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; zip(java.util.ArrayList&lt;X&gt;, java.lang.Iterable&lt;Y&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y&gt; zip(xs : ArrayList&lt;X&gt;, ys : Iterable&lt;Y&gt;) : MutableList&lt;Pair&lt;X, Y&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R zip(java.util.ArrayList&lt;X&gt;, java.lang.Iterable&lt;Y&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(xs : ArrayList&lt;X&gt;, ys : Iterable&lt;Y&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(java.util.ArrayList&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(list : ArrayList&lt;T&gt;) : MutableList&lt;Pair&lt;T, Int?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ArrayListIterate R zipWithIndex(java.util.ArrayList&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(list : ArrayList&lt;T&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean addAllIterable(java.lang.Iterable&lt;? extends T&gt;, java.util.Collection&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; addAllIterable(iterable : Iterable&lt;out T&gt;, targetCollection : MutableCollection&lt;T&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R addAllTo(java.lang.Iterable&lt;? extends T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; addAllTo(iterable : Iterable&lt;out T&gt;, targetCollection : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate M addToMap(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, M)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, K, V, M : Map&lt;K, V&gt;?&gt; addToMap(iterable : Iterable&lt;T&gt;, keyFunction : Function&lt;in T, out K&gt;?, valueFunction : Function&lt;in T, out V&gt;?, map : M?) : M?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate M addToMap(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;, M)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, K, V, M : Map&lt;K, V&gt;?&gt; addToMap(iterable : Iterable&lt;T&gt;, keyFunction : Function&lt;in T, out K&gt;?, map : M?) : M?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean allSatisfy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean allSatisfyWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; allSatisfyWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean anySatisfy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean anySatisfyWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; anySatisfyWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate void appendString(java.lang.Iterable&lt;T&gt;, java.lang.Appendable)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(iterable : Iterable&lt;T&gt;, appendable : Appendable?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate void appendString(java.lang.Iterable&lt;T&gt;, java.lang.Appendable, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(iterable : Iterable&lt;T&gt;, appendable : Appendable?, separator : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate void appendString(java.lang.Iterable&lt;T&gt;, java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(iterable : Iterable&lt;T&gt;, appendable : Appendable?, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.RichIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(iterable : Iterable&lt;T&gt;, size : Int) : RichIterable&lt;RichIterable&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;V&gt; collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;V&gt; collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;A&gt; collectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A&gt; collectWith(iterable : Iterable&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?) : MutableCollection&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R collectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(iterable : Iterable&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean contains(java.lang.Iterable&lt;?&gt;, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun contains(iterable : Iterable&lt;*&gt;, value : Any?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate int count(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate int countWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; countWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T detect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T detectIfNone(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIfNone(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate int detectIndex(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate int detectIndexWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectIndexWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T detectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T detectWithIfNone(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectWithIfNone(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; drop(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(iterable : Iterable&lt;T&gt;, count : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;V&gt; flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; flatten(java.lang.Iterable&lt;? extends java.lang.Iterable&lt;T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; flatten(iterable : Iterable&lt;out Iterable&lt;T&gt;?&gt;) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R flatten(java.lang.Iterable&lt;? extends java.lang.Iterable&lt;T&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; flatten(iterable : Iterable&lt;out Iterable&lt;T&gt;?&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterable : Iterable&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate void forEachWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(iterable : Iterable&lt;T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate void forEachWithIndex(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(iterable : Iterable&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T getFirst(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getFirst(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T getLast(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getLast(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T getOnly(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getOnly(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.multimap.MutableMultimap&lt;V,T&gt; groupBy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : MutableMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R groupBy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?, targetMultimap : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.multimap.MutableMultimap&lt;V,T&gt; groupByEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupByEach(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : MutableMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R groupByEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate double injectInto(double, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, iterable : Iterable&lt;T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate float injectInto(float, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatObjectToFloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Float, iterable : Iterable&lt;T&gt;, function : FloatObjectToFloatFunction&lt;in T&gt;?) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate int injectInto(int, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, iterable : Iterable&lt;T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate long injectInto(long, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, iterable : Iterable&lt;T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate IV injectInto(IV, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, iterable : Iterable&lt;T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate IV injectIntoWith(IV, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectValue : IV?, iterable : Iterable&lt;T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate boolean isEmpty(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEmpty(iterable : Iterable&lt;*&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.lang.String makeString(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; makeString(iterable : Iterable&lt;T&gt;) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.lang.String makeString(java.lang.Iterable&lt;T&gt;, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; makeString(iterable : Iterable&lt;T&gt;, separator : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.lang.String makeString(java.lang.Iterable&lt;T&gt;, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; makeString(iterable : Iterable&lt;T&gt;, start : String?, separator : String?, end : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T max(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T max(java.lang.Iterable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(iterable : Iterable&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T min(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T min(java.lang.Iterable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(iterable : Iterable&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.partition.PartitionIterable&lt;T&gt; partition(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionIterable&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; rejectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; rejectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R rejectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; removeIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(iterable : MutableIterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; removeIfWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; removeIfWith(iterable : MutableIterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectAndRejectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Twin&lt;MutableList&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; selectInstancesOf(java.lang.Iterable&lt;?&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; selectInstancesOf(iterable : Iterable&lt;*&gt;, clazz : Class&lt;T&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; selectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, parameter : IV?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R selectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate int sizeOf(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun sizeOf(iterable : Iterable&lt;*&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate L sortThis(L)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?, L : List&lt;T&gt;?&gt; sortThis(list : L) : L&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate L sortThis(L, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, L : List&lt;T&gt;?&gt; sortThis(list : L, predicate : Predicate2&lt;in T, in T&gt;?) : L&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate L sortThis(L, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, L : List&lt;T&gt;?&gt; sortThis(list : L, comparator : Comparator&lt;in T&gt;?) : L&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate L sortThisBy(L, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V : Comparable&lt;V&gt;?, L : List&lt;T&gt;?&gt; sortThisBy(list : L, function : Function&lt;in T, out V&gt;?) : L&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate double sumOfDouble(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfDouble(iterable : Iterable&lt;T&gt;, function : DoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate double sumOfFloat(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfFloat(iterable : Iterable&lt;T&gt;, function : FloatFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate long sumOfInt(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfInt(iterable : Iterable&lt;T&gt;, function : IntFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate long sumOfLong(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfLong(iterable : Iterable&lt;T&gt;, function : LongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;T&gt; take(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(iterable : Iterable&lt;T&gt;, count : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.lang.Object[] toArray(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(iterable : Iterable&lt;T&gt;) : Array&lt;out Any?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate T[] toArray(java.lang.Iterable&lt;? extends T&gt;, T[])'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(iterable : Iterable&lt;out T&gt;, target : Array&lt;out T&gt;?) : Array&lt;out T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.map.MutableMap&lt;K,T&gt; toMap(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, K&gt; toMap(iterable : Iterable&lt;T&gt;, keyFunction : Function&lt;in T, out K&gt;?) : MutableMap&lt;K, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; toMap(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends K&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, K, V&gt; toMap(iterable : Iterable&lt;T&gt;, keyFunction : Function&lt;in T, out K&gt;?, valueFunction : Function&lt;in T, out V&gt;?) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.list.MutableList&lt;T&gt; toSortedList(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Comparable&lt;in T&gt;?&gt; toSortedList(iterable : Iterable&lt;T&gt;) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate com.gs.collections.api.list.MutableList&lt;T&gt; toSortedList(java.lang.Iterable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toSortedList(iterable : Iterable&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; zip(java.lang.Iterable&lt;X&gt;, java.lang.Iterable&lt;Y&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y&gt; zip(xs : Iterable&lt;X&gt;, ys : Iterable&lt;Y&gt;?) : MutableCollection&lt;Pair&lt;X, Y&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R zip(java.lang.Iterable&lt;X&gt;, java.lang.Iterable&lt;Y&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(xs : Iterable&lt;X&gt;, ys : Iterable&lt;Y&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate java.util.Collection&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(iterable : Iterable&lt;T&gt;) : MutableCollection&lt;Pair&lt;T, Int?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.Iterate R zipWithIndex(java.lang.Iterable&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(iterable : Iterable&lt;T&gt;, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; adapt(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; adapt(iterable : Iterable&lt;T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(iterable : Iterable&lt;T&gt;?, size : Int) : LazyIterable&lt;RichIterable&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;V&gt; collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collect(iterable : Iterable&lt;T&gt;?, function : Function&lt;in T, out V&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; concatenate(java.lang.Iterable&lt;T&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; concatenate(vararg iterables : Iterable&lt;T&gt;) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; drop(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(iterable : Iterable&lt;T&gt;?, count : Int) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;V&gt; flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; flatCollect(iterable : Iterable&lt;T&gt;?, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : LazyIterable&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(iterable : Iterable&lt;T&gt;?, predicate : Predicate&lt;in T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(iterable : Iterable&lt;T&gt;?, predicate : Predicate&lt;in T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; selectInstancesOf(java.lang.Iterable&lt;?&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; selectInstancesOf(iterable : Iterable&lt;*&gt;?, clazz : Class&lt;T&gt;?) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;T&gt; take(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(iterable : Iterable&lt;T&gt;?, count : Int) : LazyIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;A,B&gt;&gt; zip(java.lang.Iterable&lt;A&gt;, java.lang.Iterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A, B&gt; zip(as : Iterable&lt;A&gt;?, bs : Iterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;A, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.LazyIterate com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(iterable : Iterable&lt;T&gt;?) : LazyIterable&lt;Pair&lt;T, Int?&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate boolean allSatisfy(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate boolean allSatisfyWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; allSatisfyWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate boolean anySatisfy(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate boolean anySatisfyWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; anySatisfyWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void appendString(java.util.List&lt;T&gt;, java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(list : List&lt;T&gt;, appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.RichIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(java.util.List&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(list : List&lt;T&gt;, size : Int) : RichIterable&lt;RichIterable&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;A&gt; collect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collect(list : List&lt;T&gt;, function : Function&lt;in T, out A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R collect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collect(list : List&lt;T&gt;, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;A&gt; collectIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collectIf(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R collectIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collectIf(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;A&gt; collectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A&gt; collectWith(list : List&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R collectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(list : List&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate int count(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate int countWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; countWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T detect(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T detectIfNone(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIfNone(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate int detectIndex(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate int detectIndexWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; detectIndexWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T detectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T detectWithIfNone(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectWithIfNone(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?, ifNone : T?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;T&gt; drop(java.util.List&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(list : List&lt;T&gt;, count : Int) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R drop(java.util.List&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; drop(list : List&lt;T&gt;, count : Int, targetList : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;A&gt; flatCollect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; flatCollect(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R flatCollect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; flatCollect(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void forEach(java.util.List&lt;T&gt;, int, int, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(list : List&lt;T&gt;, from : Int, to : Int, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void forEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(list : List&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void forEachInBoth(java.util.List&lt;T1&gt;, java.util.List&lt;T2&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T1,? super T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; forEachInBoth(list1 : List&lt;T1&gt;?, list2 : List&lt;T2&gt;?, procedure : Procedure2&lt;in T1, in T2&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void forEachWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(list : List&lt;T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void forEachWithIndex(java.util.List&lt;T&gt;, int, int, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(list : List&lt;T&gt;, from : Int, to : Int, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void forEachWithIndex(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(list : List&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T getFirst(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getFirst(collection : List&lt;T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T getLast(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getLast(collection : List&lt;T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupBy(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(list : List&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R groupBy(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(list : List&lt;T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupByEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupByEach(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R groupByEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate double injectInto(double, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, list : List&lt;T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate float injectInto(float, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatObjectToFloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Float, list : List&lt;T&gt;, function : FloatObjectToFloatFunction&lt;in T&gt;?) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate int injectInto(int, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, list : List&lt;T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate long injectInto(long, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, list : List&lt;T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate IV injectInto(IV, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, list : List&lt;T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate IV injectIntoWith(IV, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectedValue : IV?, list : List&lt;T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T max(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(list : List&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T max(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(list : List&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T min(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(list : List&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate T min(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(list : List&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;T&gt; reject(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R reject(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;T&gt; rejectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; rejectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R rejectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate java.util.List&lt;T&gt; removeIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(list : MutableList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate java.util.List&lt;T&gt; removeIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(list : MutableList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, procedure : Procedure&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate java.util.List&lt;T&gt; removeIfWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; removeIfWith(list : MutableList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void reverseForEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reverseForEach(list : List&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;T&gt; select(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R select(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectAndRejectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;S&gt; selectInstancesOf(java.util.List&lt;T&gt;, java.lang.Class&lt;S&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, S&gt; selectInstancesOf(list : List&lt;T&gt;, clazz : Class&lt;S&gt;?) : MutableList&lt;S&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R selectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate double sumOfDouble(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfDouble(list : List&lt;T&gt;, function : DoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate double sumOfFloat(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfFloat(list : List&lt;T&gt;, function : FloatFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate long sumOfInt(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfInt(list : List&lt;T&gt;, function : IntFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate long sumOfLong(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfLong(list : List&lt;T&gt;, function : LongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;T&gt; take(java.util.List&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(list : List&lt;T&gt;, count : Int) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R take(java.util.List&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; take(list : List&lt;T&gt;, count : Int, targetList : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate void toArray(java.util.List&lt;T&gt;, T[], int, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; toArray(list : List&lt;T&gt;?, target : Array&lt;out T&gt;?, startIndex : Int, sourceSize : Int) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; zip(java.util.List&lt;X&gt;, java.lang.Iterable&lt;Y&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y&gt; zip(list : List&lt;X&gt;, iterable : Iterable&lt;Y&gt;) : MutableList&lt;Pair&lt;X, Y&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R zip(java.util.List&lt;X&gt;, java.lang.Iterable&lt;Y&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(list : List&lt;X&gt;, iterable : Iterable&lt;Y&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(list : List&lt;T&gt;) : MutableList&lt;Pair&lt;T, Int?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.ListIterate R zipWithIndex(java.util.List&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(list : List&lt;T&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate.8 com.gs.collections.api.tuple.Pair&lt;K2,V2&gt; value(K1, V1)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(key : K1?, value : V1?) : Pair&lt;K2, V2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate.8 java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any?, x1 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate.9 boolean accept(com.gs.collections.api.tuple.Pair&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(each : Pair&lt;K, V&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate.9 boolean accept(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun accept(x0 : Any) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate java.util.Collection&lt;K&gt; addAllKeysTo(java.util.Map&lt;K,V&gt;, java.util.Collection&lt;K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; addAllKeysTo(map : Map&lt;K, V&gt;, targetCollection : Collection&lt;K&gt;?) : MutableCollection&lt;K&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate java.util.Collection&lt;V&gt; addAllValuesTo(java.util.Map&lt;K,V&gt;, java.util.Collection&lt;V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; addAllValuesTo(map : Map&lt;K, V&gt;, targetCollection : Collection&lt;V&gt;?) : MutableCollection&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate boolean allSatisfy(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; allSatisfy(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate boolean anySatisfy(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; anySatisfy(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K2,V2&gt; collect(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function2&lt;? super K,? super V,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, K2, V2&gt; collect(map : Map&lt;K, V&gt;, function : Function2&lt;in K, in V, Pair&lt;K2, V2&gt;?&gt;?) : MutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R collect(java.util.Map&lt;K1,V1&gt;, com.gs.collections.api.block.function.Function2&lt;? super K1,? super V1,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K1, V1, K2, V2, R : Map&lt;K2, V2&gt;?&gt; collect(map : Map&lt;K1, V1&gt;, function : Function2&lt;in K1, in V1, Pair&lt;K2, V2&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.list.MutableList&lt;A&gt; collect(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, A&gt; collect(map : Map&lt;K, V&gt;, function : Function&lt;in V, out A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K2,V2&gt; collect(java.util.Map&lt;K1,V1&gt;, com.gs.collections.api.block.function.Function&lt;? super K1,? extends K2&gt;, com.gs.collections.api.block.function.Function&lt;? super V1,? extends V2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K1, V1, K2, V2&gt; collect(map : Map&lt;K1, V1&gt;, keyFunction : Function&lt;in K1, out K2&gt;?, valueFunction : Function&lt;in V1, out V2&gt;?) : MutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K2,V2&gt; collect(java.util.Map&lt;K1,V1&gt;, com.gs.collections.api.block.function.Function&lt;? super K1,? extends K2&gt;, com.gs.collections.api.block.function.Function&lt;? super V1,? extends V2&gt;, java.util.Map&lt;K2,V2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K1, V1, K2, V2&gt; collect(map : Map&lt;K1, V1&gt;, keyFunction : Function&lt;in K1, out K2&gt;?, valueFunction : Function&lt;in V1, out V2&gt;?, target : Map&lt;K2, V2&gt;) : MutableMap&lt;K2, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R collect(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, A, R : Collection&lt;A&gt;?&gt; collect(map : Map&lt;K, V&gt;, function : Function&lt;in V, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K2,V2&gt; collectIf(java.util.Map&lt;K1,V1&gt;, com.gs.collections.api.block.function.Function2&lt;? super K1,? super V1,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K1,? super V1&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K1, V1, K2, V2&gt; collectIf(map : Map&lt;K1, V1&gt;, function : Function2&lt;in K1, in V1, Pair&lt;K2, V2&gt;?&gt;?, predicate : Predicate2&lt;in K1, in V1&gt;?) : MutableMap&lt;K2, V2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K2,V2&gt; collectIf(java.util.Map&lt;K1,V1&gt;, com.gs.collections.api.block.function.Function2&lt;? super K1,? super V1,com.gs.collections.api.tuple.Pair&lt;K2,V2&gt;&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K1,? super V1&gt;, java.util.Map&lt;K2,V2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K1, V1, K2, V2&gt; collectIf(map : Map&lt;K1, V1&gt;, function : Function2&lt;in K1, in V1, Pair&lt;K2, V2&gt;?&gt;?, predicate : Predicate2&lt;in K1, in V1&gt;?, target : Map&lt;K2, V2&gt;) : MutableMap&lt;K2, V2&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K,V2&gt; collectValues(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends V2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, V2&gt; collectValues(map : Map&lt;K, V&gt;, function : Function2&lt;in K, in V, out V2&gt;?) : MutableMap&lt;K, V2&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R collectValues(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function2&lt;? super K,? super V,? extends V2&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, V2, R : Map&lt;K, V2&gt;?&gt; collectValues(map : Map&lt;K, V&gt;, function : Function2&lt;in K, in V, out V2&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate int count(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; count(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.tuple.Pair&lt;K,V&gt; detect(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; detect(map : Map&lt;K, V&gt;, predicate : Predicate2&lt;in K, in V&gt;?) : Pair&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V detect(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; detect(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V detectIfNone(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; detectIfNone(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?, ifNone : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate void forEachKey(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachKey(map : Map&lt;K, V&gt;, procedure : Procedure&lt;in K&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate void forEachKeyValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachKeyValue(map : Map&lt;K, V&gt;, procedure : Procedure2&lt;in K, in V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate void forEachValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; forEachValue(map : Map&lt;K, V&gt;, procedure : Procedure&lt;in V&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V getIfAbsent(java.util.Map&lt;K,V&gt;, K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; getIfAbsent(map : Map&lt;K, V&gt;, key : K?, instanceBlock : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V getIfAbsentDefault(java.util.Map&lt;K,V&gt;, K, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; getIfAbsentDefault(map : Map&lt;K, V&gt;, key : K?, defaultValue : V?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V getIfAbsentPut(java.util.Map&lt;K,V&gt;, K, com.gs.collections.api.block.function.Function0&lt;? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; getIfAbsentPut(map : MutableMap&lt;K, V&gt;, key : K?, instanceBlock : Function0&lt;out V&gt;?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V getIfAbsentPutWith(java.util.Map&lt;K,V&gt;, K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, P&gt; getIfAbsentPutWith(map : MutableMap&lt;K, V&gt;, key : K?, function : Function&lt;in P, out V&gt;?, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate V getIfAbsentWith(java.util.Map&lt;K,V&gt;, K, com.gs.collections.api.block.function.Function&lt;? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, P&gt; getIfAbsentWith(map : Map&lt;K, V&gt;, key : K?, function : Function&lt;in P, out V&gt;?, parameter : P?) : V?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate A ifPresentApply(java.util.Map&lt;K,V&gt;, K, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, A&gt; ifPresentApply(map : Map&lt;K, V&gt;, key : K?, function : Function&lt;in V, out A&gt;?) : A?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate IV injectInto(IV, java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super V,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, IV&gt; injectInto(injectValue : IV?, map : Map&lt;K, V&gt;, function : Function2&lt;in IV, in V, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate IV injectIntoIf(IV, java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super V,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;IV, K, V&gt; injectIntoIf(initialValue : IV?, map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?, function : Function2&lt;in IV, in V, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate boolean isAbsent(V, java.util.Map&lt;K,V&gt;, K)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; isAbsent(result : V?, map : Map&lt;K, V&gt;?, key : K?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate boolean isEmpty(java.util.Map&lt;?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEmpty(map : Map&lt;*, *&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate boolean notEmpty(java.util.Map&lt;?,?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notEmpty(map : Map&lt;*, *&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate int occurrencesOf(java.util.Map&lt;K,V&gt;, V)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; occurrencesOf(map : Map&lt;K, V&gt;, object : V?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate int occurrencesOfAttribute(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.function.Function&lt;? super V,? extends A&gt;, A)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, A&gt; occurrencesOfAttribute(map : Map&lt;K, V&gt;, function : Function&lt;in V, out A&gt;?, object : A?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.list.MutableList&lt;V&gt; reject(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; reject(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : MutableList&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R reject(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : Collection&lt;V&gt;?&gt; reject(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; rejectMapOnEntry(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; rejectMapOnEntry(map : Map&lt;K, V&gt;, predicate : Predicate2&lt;in K, in V&gt;?) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R rejectMapOnEntry(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : Map&lt;K, V&gt;?&gt; rejectMapOnEntry(map : Map&lt;K, V&gt;, predicate : Predicate2&lt;in K, in V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;V,K&gt; reverseMapping(java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; reverseMapping(map : Map&lt;K, V&gt;) : MutableMap&lt;V, K&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.list.MutableList&lt;V&gt; select(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; select(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : MutableList&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R select(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : Collection&lt;V&gt;?&gt; select(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; selectMapOnEntry(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; selectMapOnEntry(map : Map&lt;K, V&gt;, predicate : Predicate2&lt;in K, in V&gt;?) : MutableMap&lt;K, V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate R selectMapOnEntry(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super K,? super V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V, R : Map&lt;K, V&gt;?&gt; selectMapOnEntry(map : Map&lt;K, V&gt;, predicate : Predicate2&lt;in K, in V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; selectMapOnKey(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super K&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; selectMapOnKey(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in K&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; selectMapOnValue(java.util.Map&lt;K,V&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; selectMapOnValue(map : Map&lt;K, V&gt;, predicate : Predicate&lt;in V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;K,V&gt;&gt; toListOfPairs(java.util.Map&lt;K,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; toListOfPairs(map : Map&lt;K, V&gt;) : MutableList&lt;Pair&lt;K, V&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.MapIterate com.gs.collections.api.list.MutableList&lt;V&gt; toSortedList(java.util.Map&lt;K,V&gt;, java.util.Comparator&lt;? super V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; toSortedList(map : Map&lt;K, V&gt;, comparator : Comparator&lt;in V&gt;?) : MutableList&lt;V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate boolean allSatisfy(java.lang.String, com.gs.collections.impl.block.predicate.CodePointPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(string : String, predicate : CodePointPredicate?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate boolean allSatisfy(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun allSatisfy(string : String, predicate : CharPredicate?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate boolean anySatisfy(java.lang.String, com.gs.collections.impl.block.predicate.CodePointPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(string : String, predicate : CodePointPredicate?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate boolean anySatisfy(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun anySatisfy(string : String, predicate : CharPredicate?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.set.MutableSet&lt;java.lang.Character&gt; asLowercaseSet(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asLowercaseSet(string : String) : MutableSet&lt;Character?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.set.MutableSet&lt;java.lang.Character&gt; asUppercaseSet(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun asUppercaseSet(string : String) : MutableSet&lt;Character?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String collect(java.lang.String, com.gs.collections.impl.block.function.primitive.CharFunction)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(string : String, function : CharFunction?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String collect(java.lang.String, com.gs.collections.impl.block.function.primitive.CodePointFunction)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun collect(string : String, function : CodePointFunction?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate int count(java.lang.String, com.gs.collections.impl.block.predicate.CodePointPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(string : String, predicate : CodePointPredicate?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate int count(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun count(string : String, predicate : CharPredicate?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.set.MutableSet&lt;java.lang.String&gt; csvTokensToSet(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun csvTokensToSet(string : String?) : MutableSet&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.Character detect(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detect(string : String, predicate : CharPredicate?) : Character?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.Character detectIfNone(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate, char)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(string : String, predicate : CharPredicate?, resultIfNone : Char) : Character?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.Character detectIfNone(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun detectIfNone(string : String, predicate : CharPredicate?, resultIfNone : String?) : Character?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String englishToLowerCase(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun englishToLowerCase(string : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String englishToUpperCase(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun englishToUpperCase(string : String) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate void forEach(java.lang.String, com.gs.collections.impl.block.procedure.primitive.CharProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(string : String, procedure : CharProcedure?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate void forEach(java.lang.String, com.gs.collections.impl.block.procedure.primitive.CodePointProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun forEach(string : String, procedure : CodePointProcedure?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String getFirstToken(java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getFirstToken(value : String?, separator : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String getLastToken(java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getLastToken(value : String?, separator : String?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate boolean isEmpty(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEmpty(string : String?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate boolean isWhitespace(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isWhitespace(string : String) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate int occurrencesOf(java.lang.String, char)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun occurrencesOf(string : String, value : Char) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate int occurrencesOf(java.lang.String, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun occurrencesOf(string : String, value : Int) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate int occurrencesOf(java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun occurrencesOf(string : String, singleCharacter : String) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String padOrTrim(java.lang.String, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun padOrTrim(message : String, targetLength : Int) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String reject(java.lang.String, com.gs.collections.impl.block.predicate.CodePointPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(string : String, predicate : CodePointPredicate?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String reject(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reject(string : String, predicate : CharPredicate?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String repeat(java.lang.String, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun repeat(template : String, repeatTimes : Int) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate void reverseForEach(java.lang.String, com.gs.collections.impl.block.procedure.primitive.CharProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseForEach(string : String, procedure : CharProcedure?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate void reverseForEach(java.lang.String, com.gs.collections.impl.block.procedure.primitive.CodePointProcedure)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun reverseForEach(string : String, procedure : CodePointProcedure?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String select(java.lang.String, com.gs.collections.impl.block.predicate.CodePointPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(string : String, predicate : CodePointPredicate?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate java.lang.String select(java.lang.String, com.gs.collections.impl.block.predicate.primitive.CharPredicate)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun select(string : String, predicate : CharPredicate?) : String?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.tuple.Twin&lt;java.lang.String&gt; splitAtIndex(java.lang.String, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun splitAtIndex(aString : String, index : Int) : Twin&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.set.MutableSet&lt;java.lang.Character&gt; toSet(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun toSet(string : String) : MutableSet&lt;Character?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.map.MutableMap&lt;java.lang.String,java.lang.String&gt; tokensToMap(java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tokensToMap(string : String?) : MutableMap&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.map.MutableMap&lt;java.lang.String,java.lang.String&gt; tokensToMap(java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tokensToMap(string : String?, pairSeparator : String?, keyValueSeparator : String?) : MutableMap&lt;String?, String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.map.MutableMap&lt;K,V&gt; tokensToMap(java.lang.String, java.lang.String, java.lang.String, com.gs.collections.api.block.function.Function&lt;java.lang.String,K&gt;, com.gs.collections.api.block.function.Function&lt;java.lang.String,V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;K, V&gt; tokensToMap(string : String?, separator : String?, keyValueSeparator : String?, keyFunction : Function&lt;String?, K&gt;?, valueFunction : Function&lt;String?, V&gt;?) : MutableMap&lt;K, V&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate com.gs.collections.api.set.MutableSet&lt;java.lang.String&gt; tokensToSet(java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun tokensToSet(string : String?, separator : String?) : MutableSet&lt;String?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.StringIterate L trimStringList(L)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;L : List&lt;String?&gt;?&gt; trimStringList(strings : L?) : L?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.DefaultSpeciesNewStrategy java.util.Collection&lt;T&gt; createNewInstanceForCollectionType(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; createNewInstanceForCollectionType(collection : Collection&lt;*&gt;?) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.DefaultSpeciesNewStrategy java.util.Collection&lt;T&gt; speciesNew(java.util.Collection&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; speciesNew(collection : Collection&lt;*&gt;) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.DefaultSpeciesNewStrategy java.util.Collection&lt;T&gt; speciesNew(java.util.Collection&lt;?&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; speciesNew(collection : Collection&lt;*&gt;, size : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate boolean allSatisfy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate boolean allSatisfyWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; allSatisfyWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate boolean anySatisfy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate boolean anySatisfyWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; anySatisfyWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate void appendString(java.lang.Iterable&lt;T&gt;, java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(iterable : Iterable&lt;T&gt;, appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.RichIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(iterable : Iterable&lt;T&gt;, size : Int) : RichIterable&lt;RichIterable&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;V&gt; collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : MutableList&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R collect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;V&gt; collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?) : MutableList&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R collectIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collectIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;V&gt; collectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends V&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, V&gt; collectWith(iterable : Iterable&lt;T&gt;, function : Function2&lt;in T, in P, out V&gt;?, parameter : P?) : MutableList&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R collectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(iterable : Iterable&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate int count(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate int countWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; countWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T detect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate int detectIndex(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate int detectIndexWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectIndexWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T detectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.util.Collection&lt;T&gt; drop(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(list : Iterable&lt;T&gt;, count : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R drop(java.lang.Iterable&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; drop(iterable : Iterable&lt;T&gt;, count : Int, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;V&gt; flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : MutableList&lt;V&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R flatCollect(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; flatCollect(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate void forEach(java.lang.Iterable&lt;T&gt;, int, int, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterable : Iterable&lt;T&gt;, from : Int, to : Int, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate void forEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterable : Iterable&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate void forEachWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(iterable : Iterable&lt;T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate void forEachWithIndex(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(iterable : Iterable&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate void forEachWithIndex(java.util.List&lt;T&gt;, int, int, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(iterable : List&lt;T&gt;, from : Int, to : Int, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T getFirst(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getFirst(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T getLast(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getLast(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T getOnly(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getOnly(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupBy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R groupBy(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupByEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupByEach(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R groupByEach(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(iterable : Iterable&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate double injectInto(double, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, iterable : Iterable&lt;T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate float injectInto(float, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatObjectToFloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Float, iterable : Iterable&lt;T&gt;, function : FloatObjectToFloatFunction&lt;in T&gt;?) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate int injectInto(int, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, iterable : Iterable&lt;T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate long injectInto(long, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, iterable : Iterable&lt;T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate IV injectInto(IV, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, iterable : Iterable&lt;T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate IV injectIntoWith(IV, java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectValue : IV?, iterable : Iterable&lt;T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate boolean isEmpty(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isEmpty(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T max(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T max(java.lang.Iterable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(iterable : Iterable&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T min(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(iterable : Iterable&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate T min(java.lang.Iterable&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(iterable : Iterable&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate boolean notEmpty(java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun notEmpty(iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;T&gt; reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R reject(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R rejectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.lang.Iterable&lt;T&gt; removeIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.lang.Iterable&lt;T&gt; removeIf(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, procedure : Procedure&lt;in T&gt;?) : MutableIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.lang.Iterable&lt;T&gt; removeIfWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; removeIfWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableIterable&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;T&gt; select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R select(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(iterable : Iterable&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectAndRejectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectInstancesOf(java.lang.Iterable&lt;?&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; selectInstancesOf(iterable : Iterable&lt;*&gt;, clazz : Class&lt;T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R selectInstancesOf(java.lang.Iterable&lt;?&gt;, java.lang.Class&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; selectInstancesOf(iterable : Iterable&lt;*&gt;, clazz : Class&lt;T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R selectWith(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(iterable : Iterable&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, injectedValue : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate double sumOfDouble(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfDouble(iterable : Iterable&lt;T&gt;, function : DoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate double sumOfFloat(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfFloat(iterable : Iterable&lt;T&gt;, function : FloatFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate long sumOfInt(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfInt(iterable : Iterable&lt;T&gt;, function : IntFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate long sumOfLong(java.lang.Iterable&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfLong(iterable : Iterable&lt;T&gt;, function : LongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.util.Collection&lt;T&gt; take(java.lang.Iterable&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(iterable : Iterable&lt;T&gt;, count : Int) : MutableCollection&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R take(java.lang.Iterable&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; take(iterable : Iterable&lt;T&gt;, count : Int, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.util.Collection&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; zip(java.lang.Iterable&lt;X&gt;, java.lang.Iterable&lt;Y&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y&gt; zip(xs : Iterable&lt;X&gt;, ys : Iterable&lt;Y&gt;) : MutableCollection&lt;Pair&lt;X, Y&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R zip(java.lang.Iterable&lt;X&gt;, java.lang.Iterable&lt;Y&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(xs : Iterable&lt;X&gt;, ys : Iterable&lt;Y&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate java.util.Collection&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(java.lang.Iterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(iterable : Iterable&lt;T&gt;) : MutableCollection&lt;Pair&lt;T, Int?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IterableIterate R zipWithIndex(java.lang.Iterable&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(iterable : Iterable&lt;T&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate boolean allSatisfy(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate boolean allSatisfyWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; allSatisfyWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate boolean anySatisfy(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate boolean anySatisfyWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; anySatisfyWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate com.gs.collections.api.RichIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(java.util.Iterator&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(iterator : Iterator&lt;T&gt;, size : Int) : RichIterable&lt;RichIterable&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R collect(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collect(iterator : Iterator&lt;T&gt;, function : Function&lt;in T, out V&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R collectIf(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; collectIf(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out V&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R collectWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(iterator : Iterator&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate int count(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate int countWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; countWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate T detect(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate int detectIndex(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate int detectIndexWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectIndexWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate T detectWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R flatCollect(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : Collection&lt;V&gt;?&gt; flatCollect(iterator : Iterator&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate void forEach(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(iterator : Iterator&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate void forEachWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(iterator : Iterator&lt;T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate void forEachWithIndex(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(iterator : Iterator&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate com.gs.collections.api.multimap.ImmutableMultimap&lt;V,T&gt; groupBy(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(iterator : Iterator&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : ImmutableMultimap&lt;V, T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R groupBy(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(iterator : Iterator&lt;T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R groupByEach(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(iterator : Iterator&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate double injectInto(double, java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, iterator : Iterator&lt;T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate float injectInto(float, java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatObjectToFloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Float, iterator : Iterator&lt;T&gt;, function : FloatObjectToFloatFunction&lt;in T&gt;?) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate int injectInto(int, java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, iterator : Iterator&lt;T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate long injectInto(long, java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, iterator : Iterator&lt;T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate IV injectInto(IV, java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, iterator : Iterator&lt;T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate IV injectIntoWith(IV, java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectValue : IV?, iterator : Iterator&lt;T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate T max(java.util.Iterator&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(iterator : Iterator&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate T min(java.util.Iterator&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(iterator : Iterator&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R reject(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R rejectWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate java.util.Iterator&lt;T&gt; removeIf(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(iterator : MutableIterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate java.util.Iterator&lt;T&gt; removeIf(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(iterator : MutableIterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, procedure : Procedure&lt;in T&gt;?) : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate java.util.Iterator&lt;T&gt; removeIfWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; removeIfWith(iterator : MutableIterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableIterator&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R select(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(iterator : Iterator&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; selectAndRejectWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R selectInstancesOf(java.util.Iterator&lt;?&gt;, java.lang.Class&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; selectInstancesOf(iterator : Iterator&lt;*&gt;, clazz : Class&lt;T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R selectWith(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(iterator : Iterator&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, injectedValue : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate double sumOfDouble(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfDouble(iterator : Iterator&lt;T&gt;, function : DoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate double sumOfFloat(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfFloat(iterator : Iterator&lt;T&gt;, function : FloatFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate long sumOfInt(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfInt(iterator : Iterator&lt;T&gt;, function : IntFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate long sumOfLong(java.util.Iterator&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfLong(iterator : Iterator&lt;T&gt;, function : LongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R zip(java.util.Iterator&lt;X&gt;, java.util.Iterator&lt;Y&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(xs : Iterator&lt;X&gt;, ys : Iterator&lt;Y&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.IteratorIterate R zipWithIndex(java.util.Iterator&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(iterator : Iterator&lt;T&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.MutableCollectionIterate com.gs.collections.api.RichIterable&lt;com.gs.collections.api.RichIterable&lt;T&gt;&gt; chunk(com.gs.collections.api.collection.MutableCollection&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; chunk(collection : MutableCollection&lt;T&gt;, size : Int) : RichIterable&lt;RichIterable&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate boolean allSatisfy(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; allSatisfy(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate boolean allSatisfyWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; allSatisfyWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate boolean anySatisfy(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; anySatisfy(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate boolean anySatisfyWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; anySatisfyWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate void appendString(java.util.List&lt;T&gt;, java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; appendString(list : List&lt;T&gt;?, appendable : Appendable, start : String?, separator : String?, end : String?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;A&gt; collect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collect(list : List&lt;T&gt;, function : Function&lt;in T, out A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R collect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collect(list : List&lt;T&gt;, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;A&gt; collectIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; collectIf(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R collectIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends A&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; collectIf(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, function : Function&lt;in T, out A&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R collectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super T,? super P,? extends A&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, A, R : Collection&lt;A&gt;?&gt; collectWith(list : List&lt;T&gt;, function : Function2&lt;in T, in P, out A&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate int count(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; count(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate int countWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; countWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T detect(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detect(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate int detectIndex(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; detectIndex(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate int detectIndexWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectIndexWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T detectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; detectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; drop(java.util.List&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; drop(list : List&lt;T&gt;, count : Int) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R drop(java.util.List&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; drop(list : List&lt;T&gt;, count : Int, targetList : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;A&gt; flatCollect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A&gt; flatCollect(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?) : MutableList&lt;A&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R flatCollect(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;A&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, A, R : Collection&lt;A&gt;?&gt; flatCollect(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;A&gt;?&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate void forEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEach(list : List&lt;T&gt;, procedure : Procedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate void forEachInBoth(java.util.List&lt;T1&gt;, java.util.List&lt;T2&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T1,? super T2&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T1, T2&gt; forEachInBoth(list1 : List&lt;T1&gt;?, list2 : List&lt;T2&gt;?, procedure : Procedure2&lt;in T1, in T2&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate void forEachWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.Procedure2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; forEachWith(list : List&lt;T&gt;, procedure : Procedure2&lt;in T, in P&gt;?, parameter : P?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate void forEachWithIndex(java.util.List&lt;T&gt;, com.gs.collections.api.block.procedure.ObjectIntProcedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; forEachWithIndex(list : List&lt;T&gt;, objectIntProcedure : ObjectIntProcedure&lt;in T&gt;?) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T getLast(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getLast(collection : List&lt;T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupBy(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupBy(list : List&lt;T&gt;, function : Function&lt;in T, out V&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R groupBy(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends V&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupBy(list : List&lt;T&gt;, function : Function&lt;in T, out V&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.impl.multimap.list.FastListMultimap&lt;V,T&gt; groupByEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V&gt; groupByEach(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?) : FastListMultimap&lt;V, T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R groupByEach(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function&lt;? super T,? extends java.lang.Iterable&lt;V&gt;&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, V, R : MutableMultimap&lt;V, T&gt;?&gt; groupByEach(list : List&lt;T&gt;, function : Function&lt;in T, out Iterable&lt;V&gt;?&gt;?, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate double injectInto(double, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleObjectToDoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Double, list : List&lt;T&gt;, function : DoubleObjectToDoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate float injectInto(float, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatObjectToFloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Float, list : List&lt;T&gt;, function : FloatObjectToFloatFunction&lt;in T&gt;?) : Float&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate int injectInto(int, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntObjectToIntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Int, list : List&lt;T&gt;, function : IntObjectToIntFunction&lt;in T&gt;?) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate long injectInto(long, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongObjectToLongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; injectInto(injectValue : Long, list : List&lt;T&gt;, function : LongObjectToLongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate IV injectInto(IV, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function2&lt;? super IV,? super T,? extends IV&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; injectInto(injectValue : IV?, list : List&lt;T&gt;, function : Function2&lt;in IV, in T, out IV&gt;?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate IV injectIntoWith(IV, java.util.List&lt;T&gt;, com.gs.collections.api.block.function.Function3&lt;? super IV,? super T,? super P,? extends IV&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV, P&gt; injectIntoWith(injectedValue : IV?, list : List&lt;T&gt;, function : Function3&lt;in IV, in T, in P, out IV&gt;?, parameter : P?) : IV?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T max(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(list : List&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T max(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; max(list : List&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T min(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(list : List&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate T min(java.util.List&lt;T&gt;, java.util.Comparator&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; min(list : List&lt;T&gt;, comparator : Comparator&lt;in T&gt;?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.partition.list.PartitionMutableList&lt;T&gt; partition(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; partition(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : PartitionMutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; reject(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; reject(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R reject(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; reject(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; rejectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; rejectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R rejectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; rejectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate java.util.List&lt;T&gt; removeIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(list : MutableList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate java.util.List&lt;T&gt; removeIf(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, com.gs.collections.api.block.procedure.Procedure&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; removeIf(list : MutableList&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, procedure : Procedure&lt;in T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate java.util.List&lt;T&gt; removeIfWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P&gt; removeIfWith(list : MutableList&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; select(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; select(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R select(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate&lt;? super T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; select(list : List&lt;T&gt;, predicate : Predicate&lt;in T&gt;?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.tuple.Twin&lt;com.gs.collections.api.list.MutableList&lt;T&gt;&gt; selectAndRejectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectAndRejectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : Twin&lt;MutableList&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectInstancesOf(java.util.List&lt;?&gt;, java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; selectInstancesOf(list : List&lt;*&gt;, clazz : Class&lt;T&gt;?) : MutableList&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; selectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super IV&gt;, IV)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, IV&gt; selectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in IV&gt;?, injectedValue : IV?) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R selectWith(java.util.List&lt;T&gt;, com.gs.collections.api.block.predicate.Predicate2&lt;? super T,? super P&gt;, P, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, P, R : Collection&lt;T&gt;?&gt; selectWith(list : List&lt;T&gt;, predicate : Predicate2&lt;in T, in P&gt;?, parameter : P?, targetCollection : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate double sumOfDouble(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.DoubleFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfDouble(list : List&lt;T&gt;, function : DoubleFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate double sumOfFloat(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.FloatFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfFloat(list : List&lt;T&gt;, function : FloatFunction&lt;in T&gt;?) : Double&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate long sumOfInt(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.IntFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfInt(list : List&lt;T&gt;, function : IntFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate long sumOfLong(java.util.List&lt;T&gt;, com.gs.collections.api.block.function.primitive.LongFunction&lt;? super T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; sumOfLong(list : List&lt;T&gt;, function : LongFunction&lt;in T&gt;?) : Long&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;T&gt; take(java.util.List&lt;T&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; take(list : List&lt;T&gt;, count : Int) : MutableList&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R take(java.util.List&lt;T&gt;, int, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;T&gt;?&gt; take(list : List&lt;T&gt;, count : Int, targetList : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;X,Y&gt;&gt; zip(java.util.List&lt;X&gt;, java.lang.Iterable&lt;Y&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y&gt; zip(list : List&lt;X&gt;, iterable : Iterable&lt;Y&gt;) : MutableList&lt;Pair&lt;X, Y&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R zip(java.util.List&lt;X&gt;, java.lang.Iterable&lt;Y&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;X, Y, R : Collection&lt;Pair&lt;X, Y&gt;?&gt;?&gt; zip(list : List&lt;X&gt;, iterable : Iterable&lt;Y&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate com.gs.collections.api.list.MutableList&lt;com.gs.collections.api.tuple.Pair&lt;T,java.lang.Integer&gt;&gt; zipWithIndex(java.util.List&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; zipWithIndex(list : List&lt;T&gt;) : MutableList&lt;Pair&lt;T, Int?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.RandomAccessListIterate R zipWithIndex(java.util.List&lt;T&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T, R : Collection&lt;Pair&lt;T, Int?&gt;?&gt;?&gt; zipWithIndex(list : List&lt;T&gt;, target : R?) : R?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.ReflectionHelper java.lang.reflect.Constructor&lt;T&gt; getConstructor(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; getConstructor(instantiable : Class&lt;T&gt;, vararg constructorParameterTypes : Class&lt;*&gt;?) : Constructor&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.ReflectionHelper T newInstance(java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newInstance(aClass : Class&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.ReflectionHelper T newInstance(java.lang.reflect.Constructor&lt;T&gt;, java.lang.Object...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; newInstance(constructor : Constructor&lt;T&gt;, vararg constructorArguments : Any?) : T?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.ReflectionHelper boolean parameterTypesMatch(java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun parameterTypesMatch(candidateParamTypes : Array&lt;out Class&lt;*&gt;?&gt;, vararg desiredParameterTypes : Class&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.ReflectionHelper java.lang.reflect.Constructor&lt;T&gt; searchForConstructor(java.lang.Class&lt;T&gt;, java.lang.Class&lt;?&gt;...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; searchForConstructor(instantiable : Class&lt;T&gt;, vararg constructorParameterTypes : Class&lt;*&gt;?) : Constructor&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.1.1 com.gs.collections.api.set.MutableSet&lt;T&gt; valueOf(com.gs.collections.api.set.MutableSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(innerSet : MutableSet&lt;T&gt;) : MutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.1.1 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.1 com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; value(com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(accumulator : MutableSet&lt;MutableSet&lt;T&gt;?&gt;, element : T?) : MutableSet&lt;MutableSet&lt;T&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.1 java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.2 com.gs.collections.api.set.ImmutableSet&lt;T&gt; valueOf(com.gs.collections.api.set.MutableSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(set : MutableSet&lt;T&gt;) : ImmutableSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.2 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.3.1 com.gs.collections.api.tuple.Pair&lt;A,B&gt; valueOf(B)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(second : B?) : Pair&lt;A, B&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.3.1 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.3 com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;A,B&gt;&gt; valueOf(A)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(first : A?) : LazyIterable&lt;Pair&lt;A, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables.3 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any?) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.LazyIterable&lt;com.gs.collections.api.tuple.Pair&lt;A,B&gt;&gt; cartesianProduct(com.gs.collections.api.set.SetIterable&lt;A&gt;, com.gs.collections.api.set.SetIterable&lt;B&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;A, B&gt; cartesianProduct(set1 : SetIterable&lt;A&gt;?, set2 : SetIterable&lt;B&gt;?) : LazyIterable&lt;Pair&lt;A, B&gt;?&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;E&gt; difference(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; difference(minuendSet : SetIterable&lt;out E&gt;?, subtrahendSet : SetIterable&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables R differenceInto(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; differenceInto(minuendSet : SetIterable&lt;out E&gt;?, subtrahendSet : SetIterable&lt;out E&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.ImmutableSet&lt;com.gs.collections.api.set.ImmutableSet&lt;T&gt;&gt; immutablePowerSet(java.util.Set&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; immutablePowerSet(set : Set&lt;T&gt;) : ImmutableSet&lt;ImmutableSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;E&gt; intersect(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; intersect(setA : SetIterable&lt;out E&gt;?, setB : SetIterable&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables R intersectInto(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; intersectInto(setA : SetIterable&lt;out E&gt;?, setB : SetIterable&lt;out E&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables boolean isProperSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; isProperSubsetOf(candidateSubset : SetIterable&lt;out E&gt;, candidateSuperset : SetIterable&lt;out E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables boolean isSubsetOf(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; isSubsetOf(candidateSubset : SetIterable&lt;out E&gt;, candidateSuperset : SetIterable&lt;out E&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; powerSet(com.gs.collections.impl.set.strategy.mutable.UnifiedSetWithHashingStrategy&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; powerSet(set : UnifiedSetWithHashingStrategy&lt;T&gt;) : MutableSet&lt;MutableSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; powerSet(java.util.Set&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; powerSet(set : Set&lt;T&gt;) : MutableSet&lt;MutableSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt; powerSetWithSeed(java.util.Set&lt;T&gt;, com.gs.collections.api.set.MutableSet&lt;com.gs.collections.api.set.MutableSet&lt;T&gt;&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; powerSetWithSeed(set : Set&lt;T&gt;, seed : MutableSet&lt;MutableSet&lt;T&gt;?&gt;?) : MutableSet&lt;MutableSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;E&gt; symmetricDifference(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; symmetricDifference(setA : SetIterable&lt;out E&gt;?, setB : SetIterable&lt;out E&gt;?) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables R symmetricDifferenceInto(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; symmetricDifferenceInto(setA : SetIterable&lt;out E&gt;?, setB : SetIterable&lt;out E&gt;?, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables com.gs.collections.api.set.MutableSet&lt;E&gt; union(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E&gt; union(setA : SetIterable&lt;out E&gt;, setB : SetIterable&lt;out E&gt;) : MutableSet&lt;E&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterables R unionInto(com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, com.gs.collections.api.set.SetIterable&lt;? extends E&gt;, R)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;E, R : Set&lt;E&gt;?&gt; unionInto(setA : SetIterable&lt;out E&gt;, setB : SetIterable&lt;out E&gt;, targetSet : R) : R&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SetIterate boolean removeAllIterable(java.util.Set&lt;?&gt;, java.lang.Iterable&lt;?&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun removeAllIterable(collection : MutableSet&lt;*&gt;?, iterable : Iterable&lt;*&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables.1.1 com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt; valueOf(com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(set : MutableSortedSet&lt;T&gt;) : MutableSortedSet&lt;T&gt;&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables.1.1 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables.1 com.gs.collections.api.set.sorted.MutableSortedSet&lt;com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt;&gt; value(com.gs.collections.api.set.sorted.MutableSortedSet&lt;com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt;&gt;, T)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(accumulator : MutableSortedSet&lt;MutableSortedSet&lt;T&gt;?&gt;, element : T?) : MutableSortedSet&lt;MutableSortedSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables.1 java.lang.Object value(java.lang.Object, java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun value(x0 : Any, x1 : Any?) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables.2 com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt; valueOf(com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(set : MutableSortedSet&lt;T&gt;) : ImmutableSortedSet&lt;T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables.2 java.lang.Object valueOf(java.lang.Object)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun valueOf(x0 : Any) : Any?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables int compare(com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;, com.gs.collections.api.set.sorted.SortedSetIterable&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; compare(setA : SortedSetIterable&lt;T&gt;, setB : SortedSetIterable&lt;T&gt;) : Int&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;com.gs.collections.api.set.sorted.ImmutableSortedSet&lt;T&gt;&gt; immutablePowerSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; immutablePowerSet(set : SortedSet&lt;T&gt;) : ImmutableSortedSet&lt;ImmutableSortedSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='com.gs.collections.impl.utility.internal.SortedSetIterables com.gs.collections.api.set.sorted.MutableSortedSet&lt;com.gs.collections.api.set.sorted.MutableSortedSet&lt;T&gt;&gt; powerSet(java.util.SortedSet&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T&gt; powerSet(set : SortedSet&lt;T&gt;) : MutableSortedSet&lt;MutableSortedSet&lt;T&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
</root>
