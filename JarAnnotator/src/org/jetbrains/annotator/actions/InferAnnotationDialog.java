package org.jetbrains.annotator.actions;

import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.util.io.FileUtil;
import com.intellij.refactoring.RefactoringBundle;
import com.intellij.ui.DocumentAdapter;
import com.intellij.ui.TitledSeparator;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import java.awt.*;

public class InferAnnotationDialog extends DialogWrapper {
    JPanel contentPanel;
    JCheckBox nullabilityCheckBox;
    JCheckBox kotlinSignaturesCheckBox;
    TextFieldWithBrowseButton outputDirectory;
    JBScrollPane jarsTreeScrollPane;
    JLabel outputDirectoryLabel;
    JLabel jarsTreeLabel;

    // Non from gui
    LibraryCheckboxTree libraryTree;

    @Nullable
    private Project project;

    public InferAnnotationDialog(@Nullable Project project) {
        super(project);
        $$$setupUI$$$();

        this.project = project;

        init();

        updateControls();
    }

    @Override
    protected void init() {
        setTitle("Annotate Jar Files");

        contentPanel.setPreferredSize(new Dimension(440, 500));

        outputDirectory.addBrowseFolderListener(
                RefactoringBundle.message("select.target.directory"),
                "Inferred annotation will be written to this folder",
                null, FileChooserDescriptorFactory.createSingleFolderDescriptor());

        outputDirectory.getTextField().getDocument().addDocumentListener(new DocumentAdapter() {
            protected void textChanged(final DocumentEvent e) {
                updateControls();
            }
        });

        outputDirectoryLabel.setLabelFor(outputDirectory.getTextField());

        nullabilityCheckBox.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                updateControls();
            }
        });

        kotlinSignaturesCheckBox.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                updateControls();
            }
        });

        LibraryItemsTreeController libraryItemsTreeController = new LibraryItemsTreeController();
        libraryTree = new LibraryCheckboxTree(libraryItemsTreeController);
        libraryItemsTreeController.buildTree(libraryTree, project);

        jarsTreeScrollPane.setViewportView(libraryTree);

        jarsTreeLabel.setLabelFor(libraryTree);

        super.init();
    }

    @Nullable
    public String getConfiguredOutputPath() {
        String outputPath = FileUtil.toSystemIndependentName(outputDirectory.getText().trim());
        if (outputPath.length() == 0) {
            outputPath = null;
        }
        return outputPath;
    }

    public boolean shouldInferNullabilityAnnotations() {
        return nullabilityCheckBox.isSelected();
    }

    public boolean shouldInferKotlinAnnotations() {
        return kotlinSignaturesCheckBox.isSelected();
    }

    protected void updateControls() {
        boolean someAnnotationTypeSelected = shouldInferNullabilityAnnotations() || shouldInferKotlinAnnotations();
        setOKActionEnabled(getConfiguredOutputPath() != null && someAnnotationTypeSelected);
    }

    @Nullable
    @Override
    public JComponent getPreferredFocusedComponent() {
        return libraryTree;
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return contentPanel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        nullabilityCheckBox = new JCheckBox();
        nullabilityCheckBox.setText("Nullability");
        nullabilityCheckBox.setMnemonic('N');
        nullabilityCheckBox.setDisplayedMnemonicIndex(0);
        contentPanel.add(nullabilityCheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        kotlinSignaturesCheckBox = new JCheckBox();
        kotlinSignaturesCheckBox.setText("Kotlin Signatures");
        kotlinSignaturesCheckBox.setMnemonic('K');
        kotlinSignaturesCheckBox.setDisplayedMnemonicIndex(0);
        contentPanel.add(kotlinSignaturesCheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outputDirectoryLabel = new JLabel();
        outputDirectoryLabel.setText("Output directory:");
        outputDirectoryLabel.setDisplayedMnemonic('D');
        outputDirectoryLabel.setDisplayedMnemonicIndex(7);
        contentPanel.add(outputDirectoryLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(90, 14), null, 0, false));
        outputDirectory = new TextFieldWithBrowseButton();
        contentPanel.add(outputDirectory, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final TitledSeparator titledSeparator1 = new TitledSeparator();
        titledSeparator1.setText("Annotation Types");
        contentPanel.add(titledSeparator1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final TitledSeparator titledSeparator2 = new TitledSeparator();
        titledSeparator2.setText("Output");
        contentPanel.add(titledSeparator2, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        jarsTreeLabel = new JLabel();
        jarsTreeLabel.setText("Select jar files for annotation inferring: ");
        jarsTreeLabel.setDisplayedMnemonic('J');
        jarsTreeLabel.setDisplayedMnemonicIndex(7);
        contentPanel.add(jarsTreeLabel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jarsTreeScrollPane = new JBScrollPane();
        contentPanel.add(jarsTreeScrollPane, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
