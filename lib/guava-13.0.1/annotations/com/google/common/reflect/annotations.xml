<root>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.lang.Object put(java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap&lt;B&gt; build()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken.TypeSet com.google.common.reflect.TypeToken&lt;T&gt;.TypeSet interfaces()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; builder()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(com.google.common.reflect.TypeToken&lt;T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; of(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, com.google.common.reflect.TypeToken&lt;X&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection java.lang.String getPackageName(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T getInstance(com.google.common.reflect.TypeToken&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T putInstance(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isAssignableFrom(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, com.google.common.reflect.TypeToken&lt;X&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T putInstance(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.Reflection T newProxy(java.lang.Class&lt;T&gt;, java.lang.reflect.InvocationHandler) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T getInstance(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken.TypeSet com.google.common.reflect.TypeToken&lt;T&gt;.TypeSet classes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(java.lang.Class&lt;T&gt;, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T getInstance(com.google.common.reflect.TypeToken&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; resolveType(java.lang.reflect.Type)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap com.google.common.reflect.ImmutableTypeToInstanceMap&lt;B&gt; of()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(com.google.common.reflect.TypeToken&lt;T&gt;, T) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(java.lang.Class&lt;T&gt;, T)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T getInstance(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T getInstance(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T putInstance(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection java.lang.String getPackageName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap T putInstance(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, java.lang.Class&lt;X&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.lang.Object delegate()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T putInstance(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, java.lang.Class&lt;X&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap.Builder com.google.common.reflect.ImmutableTypeToInstanceMap.Builder&lt;B&gt; put(com.google.common.reflect.TypeToken&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;? super T&gt; getSupertype(java.lang.Class&lt;? super T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken boolean isAssignableFrom(com.google.common.reflect.TypeToken&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToInstanceMap T putInstance(java.lang.Class&lt;T&gt;, T) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap void putAll(java.util.Map&lt;? extends com.google.common.reflect.TypeToken&lt;? extends B&gt;,? extends B&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; of(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, com.google.common.reflect.TypeToken&lt;X&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken java.lang.Object writeReplace()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; where(com.google.common.reflect.TypeParameter&lt;X&gt;, java.lang.Class&lt;X&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.util.Map&lt;com.google.common.reflect.TypeToken&lt;? extends B&gt;,B&gt; delegate()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection void initialize(java.lang.Class&lt;?&gt;...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt;.TypeSet getTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.MutableTypeToInstanceMap java.lang.Object put(java.lang.Object, java.lang.Object) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='org.jetbrains.kannotator.runtime.annotations.Propagated'>
            <val name="value" val="{org.jetbrains.kannotator.controlFlow.builder.analysis.NullabilityKey.class}"/>
        </annotation>
    </item>
    <item name='com.google.common.reflect.ImmutableTypeToInstanceMap T getInstance(com.google.common.reflect.TypeToken&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;T&gt; of(java.lang.Class&lt;T&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.Reflection T newProxy(java.lang.Class&lt;T&gt;, java.lang.reflect.InvocationHandler) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; resolveType(java.lang.reflect.Type) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='com.google.common.reflect.TypeToken com.google.common.reflect.TypeToken&lt;?&gt; of(java.lang.reflect.Type)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
